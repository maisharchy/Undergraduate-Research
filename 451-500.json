{
    "103": [
        {
            "Word": "getTimeoutInMillis",
            "WordID": "1",
            "SentID": 1266,
            "TokenID": "2",
            "Context": "this . getTimeoutInMillis ( ) , TimeUnit . MILLISECONDS ) ;"
        },
        {
            "Word": "MILLISECONDS",
            "WordID": "1",
            "SentID": 1266,
            "TokenID": "8",
            "Context": "this . getTimeoutInMillis ( ) , TimeUnit . MILLISECONDS ) ;"
        },
        {
            "Word": "timeoutMillis",
            "WordID": "1",
            "SentID": 1389,
            "TokenID": "2",
            "Context": "this . timeoutMillis ,"
        },
        {
            "Word": "HOURS",
            "WordID": "1",
            "SentID": 1595,
            "TokenID": "11",
            "Context": "return this . login ( usernameParam , passwordParam , TimeUnit . HOURS . toSeconds ( 9 ) ) ;"
        },
        {
            "Word": "toSeconds",
            "WordID": "1",
            "SentID": 1595,
            "TokenID": "13",
            "Context": "return this . login ( usernameParam , passwordParam , TimeUnit . HOURS . toSeconds ( 9 ) ) ;"
        },
        {
            "Word": "Arrays",
            "WordID": "1",
            "SentID": 1629,
            "TokenID": "3",
            "Context": "if ( ! Arrays . equals ( hMacFromResponse , localGeneratedHMac ) ) {"
        },
        {
            "Word": "currentTimeMillis",
            "WordID": "1",
            "SentID": 2566,
            "TokenID": "4",
            "Context": "if ( System . currentTimeMillis ( ) > timeToUpdateAgain ) {"
        },
        {
            "Word": "currentTimeMillis",
            "WordID": "2",
            "SentID": 2575,
            "TokenID": "3",
            "Context": "( System . currentTimeMillis ( ) +"
        },
        {
            "Word": "toMillis",
            "WordID": "1",
            "SentID": 2576,
            "TokenID": "4",
            "Context": "TimeUnit . MINUTES . toMillis ( 10 ) ) ;"
        },
        {
            "Word": "currentTimeMillis",
            "WordID": "3",
            "SentID": 2645,
            "TokenID": "2",
            "Context": "System . currentTimeMillis ( ) - TimeUnit . DAYS . toMillis ( 7 )"
        },
        {
            "Word": "DAYS",
            "WordID": "1",
            "SentID": 2645,
            "TokenID": "8",
            "Context": "System . currentTimeMillis ( ) - TimeUnit . DAYS . toMillis ( 7 )"
        },
        {
            "Word": "toMillis",
            "WordID": "2",
            "SentID": 2645,
            "TokenID": "10",
            "Context": "System . currentTimeMillis ( ) - TimeUnit . DAYS . toMillis ( 7 )"
        },
        {
            "Word": "currentTimeMillis",
            "WordID": "4",
            "SentID": 2649,
            "TokenID": "2",
            "Context": "System . currentTimeMillis ( ) : toDateParam . getTime ( ) ;"
        },
        {
            "Word": "Arrays",
            "WordID": "2",
            "SentID": 3567,
            "TokenID": "6",
            "Context": "Optional < T > enumValue = Arrays . stream ( instance . getValues ( ) ) . filter ( enumField -> enumField . getValue ( ) . equals ( value ) ) . findFirst ( ) ;"
        },
        {
            "Word": "Arrays",
            "WordID": "3",
            "SentID": 3708,
            "TokenID": "0",
            "Context": "Arrays . asList ( annotatedElement . getAnnotation ( SystemProperties . class ) . value ( ) ) ) ;"
        },
        {
            "Word": "AoArrays",
            "WordID": "1",
            "SentID": 3769,
            "TokenID": "1",
            "Context": "return AoArrays . maxNonNull ("
        },
        {
            "Word": "currentTimeMillis",
            "WordID": "5",
            "SentID": 3835,
            "TokenID": "4",
            "Context": "lastLoadTime = System . currentTimeMillis ( ) ;"
        },
        {
            "Word": "currentTimeMillis",
            "WordID": "6",
            "SentID": 3892,
            "TokenID": "4",
            "Context": "time += System . currentTimeMillis ( ) - start ;"
        },
        {
            "Word": "Params",
            "WordID": "1",
            "SentID": 4027,
            "TokenID": "0",
            "Context": "Params . notNull ( file , \"File\" ) ;"
        },
        {
            "Word": "Strings",
            "WordID": "1",
            "SentID": 4263,
            "TokenID": "6",
            "Context": "List < String > nodeIDs = Strings . split ( propertyPath , '.' ) ;"
        },
        {
            "Word": "Strings",
            "WordID": "2",
            "SentID": 4426,
            "TokenID": "3",
            "Context": "String protocol = Strings . getProtocol ( implementationURL ) ;"
        },
        {
            "Word": "Strings",
            "WordID": "3",
            "SentID": 4560,
            "TokenID": "10",
            "Context": "this . requestPath = requestPath != null ? requestPath : Strings . toDashCase ( method . getName ( ) ) ;"
        },
        {
            "Word": "MILLISECONDS",
            "WordID": "2",
            "SentID": 4717,
            "TokenID": "13",
            "Context": "if ( ! eventsQueue . offer ( event , EVENTS_QUEUE_PUSH_TIMEOUT , TimeUnit . MILLISECONDS ) ) {"
        },
        {
            "Word": "Strings",
            "WordID": "4",
            "SentID": 4723,
            "TokenID": "2",
            "Context": "string = Strings . concat ( '#' , STREAM_ID ++ , ':' , remoteHost ) ;"
        },
        {
            "Word": "MILLISECONDS",
            "WordID": "3",
            "SentID": 4726,
            "TokenID": "10",
            "Context": "event = eventsQueue . poll ( keepAlivePeriod , TimeUnit . MILLISECONDS ) ;"
        },
        {
            "Word": "Strings",
            "WordID": "5",
            "SentID": 4746,
            "TokenID": "2",
            "Context": "servletName = Strings . concat ( config . getServletContext ( ) . getServletContextName ( ) , '#' , config . getServletName ( ) ) ;"
        },
        {
            "Word": "Strings",
            "WordID": "6",
            "SentID": 4920,
            "TokenID": "9",
            "Context": "Field field = Classes . getField ( type , Strings . toMemberName ( parameter . getName ( ) ) ) ;"
        },
        {
            "Word": "Strings",
            "WordID": "7",
            "SentID": 4935,
            "TokenID": "6",
            "Context": "List < String > strings = Strings . split ( value , ',' ) ;"
        },
        {
            "Labels": [
                "\"Time Conversion and Management in Java\""
            ],
            "Meaningful": "Yes",
            "Syntactic": "variables, datatypes",
            "Semantic": "time",
            "Description": "various identifiers, many related to time.",
            "Lexicographic": "",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "359": [
        {
            "Word": "Throwable",
            "WordID": "1",
            "SentID": 1273,
            "TokenID": "0",
            "Context": "Throwable cause = executeProblem . getCause ( ) ;"
        },
        {
            "Word": "Throwable",
            "WordID": "2",
            "SentID": 3730,
            "TokenID": "8",
            "Context": "} public void trace ( String msg , Throwable t ) {"
        },
        {
            "Word": "Throwable",
            "WordID": "3",
            "SentID": 3738,
            "TokenID": "8",
            "Context": "} public void debug ( String msg , Throwable t ) {"
        },
        {
            "Word": "Throwable",
            "WordID": "4",
            "SentID": 3746,
            "TokenID": "8",
            "Context": "} public void info ( String msg , Throwable t ) {"
        },
        {
            "Word": "Throwable",
            "WordID": "5",
            "SentID": 3754,
            "TokenID": "8",
            "Context": "} public void warn ( String msg , Throwable t ) {"
        },
        {
            "Word": "Throwable",
            "WordID": "6",
            "SentID": 3762,
            "TokenID": "8",
            "Context": "} public void error ( String msg , Throwable t ) {"
        },
        {
            "Word": "Throwable",
            "WordID": "7",
            "SentID": 4418,
            "TokenID": "5",
            "Context": "public static String getFullMessage ( Throwable throwable ) {"
        },
        {
            "Word": "throwable",
            "WordID": "1",
            "SentID": 4418,
            "TokenID": "6",
            "Context": "public static String getFullMessage ( Throwable throwable ) {"
        },
        {
            "Word": "throwable",
            "WordID": "2",
            "SentID": 4419,
            "TokenID": "4",
            "Context": "builder . append ( throwable . getLocalizedMessage ( ) ) . append ( \"\\n\" ) ;"
        },
        {
            "Word": "throwable",
            "WordID": "3",
            "SentID": 4420,
            "TokenID": "0",
            "Context": "throwable = throwable . getCause ( ) ;"
        },
        {
            "Word": "throwable",
            "WordID": "4",
            "SentID": 4420,
            "TokenID": "2",
            "Context": "throwable = throwable . getCause ( ) ;"
        },
        {
            "Word": "throwable",
            "WordID": "5",
            "SentID": 4421,
            "TokenID": "3",
            "Context": "} while ( throwable != null ) ;"
        },
        {
            "Word": "Throwable",
            "WordID": "8",
            "SentID": 4663,
            "TokenID": "16",
            "Context": "public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable {"
        },
        {
            "Word": "Throwable",
            "WordID": "9",
            "SentID": 4786,
            "TokenID": "9",
            "Context": "} protected static void sendError ( RequestContext context , Throwable throwable ) throws IOException {"
        },
        {
            "Word": "throwable",
            "WordID": "6",
            "SentID": 4786,
            "TokenID": "10",
            "Context": "} protected static void sendError ( RequestContext context , Throwable throwable ) throws IOException {"
        },
        {
            "Word": "throwable",
            "WordID": "7",
            "SentID": 4787,
            "TokenID": "2",
            "Context": "if ( throwable instanceof InvocationException && throwable . getCause ( ) != null ) {"
        },
        {
            "Word": "throwable",
            "WordID": "8",
            "SentID": 4787,
            "TokenID": "6",
            "Context": "if ( throwable instanceof InvocationException && throwable . getCause ( ) != null ) {"
        },
        {
            "Word": "throwable",
            "WordID": "9",
            "SentID": 4788,
            "TokenID": "2",
            "Context": "if ( throwable instanceof InvocationTargetException ) {"
        },
        {
            "Word": "throwable",
            "WordID": "10",
            "SentID": 4789,
            "TokenID": "0",
            "Context": "throwable = ( ( InvocationTargetException ) throwable ) . getTargetException ( ) ;"
        },
        {
            "Word": "throwable",
            "WordID": "11",
            "SentID": 4789,
            "TokenID": "6",
            "Context": "throwable = ( ( InvocationTargetException ) throwable ) . getTargetException ( ) ;"
        },
        {
            "Word": "throwable",
            "WordID": "12",
            "SentID": 4790,
            "TokenID": "2",
            "Context": "if ( throwable instanceof BusinessException ) {"
        },
        {
            "Word": "throwable",
            "WordID": "13",
            "SentID": 4791,
            "TokenID": "4",
            "Context": "sendJsonObject ( context , throwable , HttpServletResponse . SC_BAD_REQUEST ) ;"
        },
        {
            "Word": "throwable",
            "WordID": "14",
            "SentID": 4792,
            "TokenID": "4",
            "Context": "dumpError ( context , throwable ) ;"
        },
        {
            "Word": "throwable",
            "WordID": "15",
            "SentID": 4793,
            "TokenID": "7",
            "Context": "sendJsonObject ( context , new RemoteException ( throwable ) , HttpServletResponse . SC_INTERNAL_SERVER_ERROR ) ;"
        },
        {
            "Word": "Throwable",
            "WordID": "10",
            "SentID": 4794,
            "TokenID": "9",
            "Context": "} protected static void dumpError ( RequestContext context , Throwable throwable ) {"
        },
        {
            "Word": "throwable",
            "WordID": "16",
            "SentID": 4794,
            "TokenID": "10",
            "Context": "} protected static void dumpError ( RequestContext context , Throwable throwable ) {"
        },
        {
            "Labels": [
                "\"Exception Handling\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "Throwable, throwable",
            "Semantic": "Exception Handling",
            "Description": "Throwable identifier for exception handling",
            "Syntactic": "",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "337": [
        {
            "Word": "cause",
            "WordID": "2",
            "SentID": 1274,
            "TokenID": "2",
            "Context": "if ( cause instanceof FluidClientException ) {"
        },
        {
            "Word": "cause",
            "WordID": "5",
            "SentID": 1276,
            "TokenID": "6",
            "Context": "cause . getMessage ( ) , cause ,"
        },
        {
            "Word": "process",
            "WordID": "4",
            "SentID": 1934,
            "TokenID": "0",
            "Context": "process . getInputStream ( ) , charset ) ) ;"
        },
        {
            "Word": "process",
            "WordID": "5",
            "SentID": 1939,
            "TokenID": "3",
            "Context": "new InputStreamReader ( process . getErrorStream ( ) , charset ) ) ;"
        },
        {
            "Word": "process",
            "WordID": "6",
            "SentID": 1942,
            "TokenID": "2",
            "Context": "exitValue = process . waitFor ( ) ;"
        },
        {
            "Word": "cause",
            "WordID": "6",
            "SentID": 2242,
            "TokenID": "2",
            "Context": "if ( cause instanceof FluidClientException )"
        },
        {
            "Word": "entity",
            "WordID": "2",
            "SentID": 2981,
            "TokenID": "4",
            "Context": "String responseJsonString = ( entity == null ) ? null :"
        },
        {
            "Word": "entity",
            "WordID": "4",
            "SentID": 2985,
            "TokenID": "4",
            "Context": "String responseString = ( entity != null ) ?"
        },
        {
            "Word": "client",
            "WordID": "7",
            "SentID": 3318,
            "TokenID": "4",
            "Context": "returnVal . append ( client . getProvider ( ) ) ;"
        },
        {
            "Word": "element",
            "WordID": "2",
            "SentID": 3354,
            "TokenID": "2",
            "Context": "if ( element . getElement ( ) instanceof XsdAttributeGroup ) {"
        },
        {
            "Word": "element",
            "WordID": "3",
            "SentID": 3356,
            "TokenID": "22",
            "Context": ". filter ( attributeGroup -> attributeGroup instanceof UnsolvedReference && ( ( UnsolvedReference ) attributeGroup ) . getRef ( ) . equals ( element . getName ( ) ) )"
        },
        {
            "Word": "element",
            "WordID": "4",
            "SentID": 3359,
            "TokenID": "4",
            "Context": "attributeGroups . add ( element ) ;"
        },
        {
            "Word": "element",
            "WordID": "7",
            "SentID": 3362,
            "TokenID": "2",
            "Context": "if ( element . getElement ( ) instanceof XsdAttribute ) {"
        },
        {
            "Word": "element",
            "WordID": "8",
            "SentID": 3364,
            "TokenID": "22",
            "Context": ". filter ( attribute -> attribute instanceof UnsolvedReference && ( ( UnsolvedReference ) attribute ) . getRef ( ) . equals ( element . getName ( ) ) )"
        },
        {
            "Word": "element",
            "WordID": "9",
            "SentID": 3366,
            "TokenID": "4",
            "Context": "attributes . add ( element ) ;"
        },
        {
            "Word": "parent",
            "WordID": "1",
            "SentID": 3427,
            "TokenID": "4",
            "Context": "if ( ! ( parent instanceof XsdSchema ) && name != null ) {"
        },
        {
            "Word": "parent",
            "WordID": "2",
            "SentID": 3429,
            "TokenID": "2",
            "Context": "if ( parent instanceof XsdSchema && name == null ) {"
        },
        {
            "Word": "element",
            "WordID": "14",
            "SentID": 3507,
            "TokenID": "2",
            "Context": "if ( element instanceof XsdSimpleType && simpleType != null && type . equals ( elementWrapper . getName ( ) ) ) {"
        },
        {
            "Word": "parent",
            "WordID": "3",
            "SentID": 3517,
            "TokenID": "2",
            "Context": "if ( parent instanceof XsdSchema && attributesMap . containsKey ( FORM_TAG ) ) {"
        },
        {
            "Word": "parent",
            "WordID": "4",
            "SentID": 3518,
            "TokenID": "2",
            "Context": "if ( parent instanceof XsdSchema && attributesMap . containsKey ( REF_TAG ) ) {"
        },
        {
            "Word": "element",
            "WordID": "16",
            "SentID": 3520,
            "TokenID": "4",
            "Context": "super . replaceUnsolvedElements ( element ) ;"
        },
        {
            "Word": "element",
            "WordID": "18",
            "SentID": 3523,
            "TokenID": "25",
            "Context": "if ( this . type instanceof UnsolvedReference && isComplexOrSimpleType && ( ( UnsolvedReference ) this . type ) . getRef ( ) . equals ( element . getName ( ) ) ) {"
        },
        {
            "Word": "element",
            "WordID": "19",
            "SentID": 3524,
            "TokenID": "4",
            "Context": "this . type = element ;"
        },
        {
            "Word": "element",
            "WordID": "20",
            "SentID": 3526,
            "TokenID": "27",
            "Context": "if ( this . substitutionGroup instanceof UnsolvedReference && elem instanceof XsdElement && ( ( UnsolvedReference ) this . substitutionGroup ) . getRef ( ) . equals ( element . getName ( ) ) ) {"
        },
        {
            "Word": "element",
            "WordID": "21",
            "SentID": 3531,
            "TokenID": "4",
            "Context": "this . substitutionGroup = element ;"
        },
        {
            "Word": "element",
            "WordID": "27",
            "SentID": 3556,
            "TokenID": "13",
            "Context": ". filter ( unsolvedReference -> unsolvedReference . getRef ( ) . equals ( element . getName ( ) ) )"
        },
        {
            "Word": "element",
            "WordID": "28",
            "SentID": 3557,
            "TokenID": "16",
            "Context": ". ifPresent ( oldElement -> elements . set ( elements . indexOf ( oldElement ) , element ) ) ;"
        },
        {
            "Word": "parent",
            "WordID": "7",
            "SentID": 3592,
            "TokenID": "2",
            "Context": "if ( parent instanceof XsdSchema ) {"
        },
        {
            "Word": "element",
            "WordID": "32",
            "SentID": 3604,
            "TokenID": "4",
            "Context": "if ( ! ( element instanceof XsdNamedElements ) ) {"
        },
        {
            "Word": "element",
            "WordID": "36",
            "SentID": 3611,
            "TokenID": "4",
            "Context": "this . base = element ;"
        },
        {
            "Word": "element",
            "WordID": "37",
            "SentID": 3614,
            "TokenID": "4",
            "Context": "this . childElement = element ;"
        },
        {
            "Word": "page",
            "WordID": "2",
            "SentID": 3770,
            "TokenID": "0",
            "Context": "page . getDateCreated ( ) ,"
        },
        {
            "Word": "page",
            "WordID": "3",
            "SentID": 3771,
            "TokenID": "0",
            "Context": "page . getDatePublished ( ) ,"
        },
        {
            "Word": "page",
            "WordID": "4",
            "SentID": 3772,
            "TokenID": "0",
            "Context": "page . getDateModified ( )"
        },
        {
            "Word": "analyzer",
            "WordID": "3",
            "SentID": 3801,
            "TokenID": "8",
            "Context": "System . out . println ( \"analyzer=\" + analyzer . getClass ( ) . getName ( ) ) ;"
        },
        {
            "Word": "node",
            "WordID": "11",
            "SentID": 3845,
            "TokenID": "2",
            "Context": "if ( node != null ) {"
        },
        {
            "Word": "node",
            "WordID": "12",
            "SentID": 3846,
            "TokenID": "1",
            "Context": "return node . indexOf ( sen , offset , tailLen ) ;"
        },
        {
            "Word": "part",
            "WordID": "2",
            "SentID": 3982,
            "TokenID": "4",
            "Context": "if ( ! ( part instanceof UploadStream ) ) {"
        },
        {
            "Word": "object",
            "WordID": "3",
            "SentID": 4565,
            "TokenID": "2",
            "Context": "if ( object instanceof Proxy ) {"
        },
        {
            "Word": "ShutdownEvent",
            "WordID": "1",
            "SentID": 4719,
            "TokenID": "3",
            "Context": "push ( new ShutdownEvent ( ) ) ;"
        },
        {
            "Word": "writer",
            "WordID": "5",
            "SentID": 4728,
            "TokenID": "2",
            "Context": "return ! writer . checkError ( ) ;"
        },
        {
            "Word": "event",
            "WordID": "5",
            "SentID": 4729,
            "TokenID": "2",
            "Context": "if ( event instanceof ShutdownEvent ) {"
        },
        {
            "Word": "ShutdownEvent",
            "WordID": "2",
            "SentID": 4729,
            "TokenID": "4",
            "Context": "if ( event instanceof ShutdownEvent ) {"
        },
        {
            "Word": "event",
            "WordID": "7",
            "SentID": 4731,
            "TokenID": "2",
            "Context": "onSent ( event ) ;"
        },
        {
            "Word": "event",
            "WordID": "9",
            "SentID": 4738,
            "TokenID": "6",
            "Context": "json . serialize ( writer , event ) ;"
        },
        {
            "Word": "event",
            "WordID": "10",
            "SentID": 4740,
            "TokenID": "13",
            "Context": "byte [ ] encryptedMessage = cipher . doFinal ( json . serialize ( event ) ) ;"
        },
        {
            "Word": "ErrorEvent",
            "WordID": "1",
            "SentID": 4817,
            "TokenID": "17",
            "Context": "getUI ( ) . getErrorHandler ( ) . error ( new com . vaadin . server . ErrorEvent ( ex ) ) ;"
        },
        {
            "Word": "ElementDeletedEvent",
            "WordID": "1",
            "SentID": 4820,
            "TokenID": "5",
            "Context": "eventBus . post ( new ElementDeletedEvent < > ( endpoint ) ) ;"
        },
        {
            "Word": "event",
            "WordID": "12",
            "SentID": 4865,
            "TokenID": "3",
            "Context": "if ( ! event . getText ( ) . isEmpty ( ) ) {"
        },
        {
            "Word": "event",
            "WordID": "13",
            "SentID": 4866,
            "TokenID": "16",
            "Context": "( ( Container . Filterable ) container ) . addContainerFilter ( new SimpleStringFilter ( pid , event . getText ( ) , true , false ) ) ;"
        },
        {
            "Word": "component",
            "WordID": "5",
            "SentID": 4891,
            "TokenID": "2",
            "Context": "if ( component instanceof DateField ) {"
        },
        {
            "Word": "ElementEvent",
            "WordID": "1",
            "SentID": 4991,
            "TokenID": "4",
            "Context": "public void handle ( ElementEvent < TEntity > message ) {"
        },
        {
            "Word": "message",
            "WordID": "17",
            "SentID": 4991,
            "TokenID": "8",
            "Context": "public void handle ( ElementEvent < TEntity > message ) {"
        },
        {
            "Word": "message",
            "WordID": "18",
            "SentID": 4992,
            "TokenID": "2",
            "Context": "if ( message . getEndpoint ( ) . getEntityType ( ) == this . endpoint . getEntityType ( ) ) {"
        },
        {
            "Labels": [
                "\"Event-driven Java Programming and Element Management\""
            ],
            "Meaningful": "I don't know",
            "Syntactic": "variables",
            "Description": "variables",
            "Lexicographic": "",
            "Semantic": "",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Imprecise",
            "Q3_Answer": "Inferior",
            "Q4_Answer": "not enough description for labels",
            "Q5_Answer": "Descriptive",
            "Q6_Answer": "None"
        }
    ],
    "44": [
        {
            "Word": "keySet",
            "WordID": "1",
            "SentID": 1317,
            "TokenID": "2",
            "Context": "formJSONObjFlat . keySet ( ) . forEach ("
        },
        {
            "Word": "keySet",
            "WordID": "2",
            "SentID": 2426,
            "TokenID": "7",
            "Context": "for ( String existingKey : existingPropertiesUpdated . keySet ( ) ) {"
        },
        {
            "Word": "keySet",
            "WordID": "3",
            "SentID": 2430,
            "TokenID": "7",
            "Context": "for ( String possibleExistingKey : newContentMappingBuilderFromParam . keySet ( ) ) {"
        },
        {
            "Word": "filter",
            "WordID": "1",
            "SentID": 3356,
            "TokenID": "1",
            "Context": ". filter ( attributeGroup -> attributeGroup instanceof UnsolvedReference && ( ( UnsolvedReference ) attributeGroup ) . getRef ( ) . equals ( element . getName ( ) ) )"
        },
        {
            "Word": "ifPresent",
            "WordID": "1",
            "SentID": 3357,
            "TokenID": "5",
            "Context": ". findFirst ( ) . ifPresent ( referenceBase -> {"
        },
        {
            "Word": "filter",
            "WordID": "2",
            "SentID": 3364,
            "TokenID": "1",
            "Context": ". filter ( attribute -> attribute instanceof UnsolvedReference && ( ( UnsolvedReference ) attribute ) . getRef ( ) . equals ( element . getName ( ) ) )"
        },
        {
            "Word": "filter",
            "WordID": "3",
            "SentID": 3396,
            "TokenID": "1",
            "Context": ". filter ( concreteElement -> concreteElement instanceof NamedConcreteElement )"
        },
        {
            "Word": "map",
            "WordID": "1",
            "SentID": 3397,
            "TokenID": "1",
            "Context": ". map ( concreteElement -> ( NamedConcreteElement ) concreteElement )"
        },
        {
            "Word": "filter",
            "WordID": "4",
            "SentID": 3417,
            "TokenID": "1",
            "Context": ". filter ( unsolvedReferenceObj ->"
        },
        {
            "Word": "isPresent",
            "WordID": "1",
            "SentID": 3421,
            "TokenID": "4",
            "Context": "if ( innerEntry . isPresent ( ) ) {"
        },
        {
            "Word": "ifPresent",
            "WordID": "2",
            "SentID": 3422,
            "TokenID": "2",
            "Context": "innerEntry . ifPresent ( entry -> entry . getParents ( ) . add ( unsolvedReference . getParent ( ) ) ) ;"
        },
        {
            "Word": "filter",
            "WordID": "5",
            "SentID": 3554,
            "TokenID": "1",
            "Context": ". filter ( referenceBase -> referenceBase instanceof UnsolvedReference )"
        },
        {
            "Word": "map",
            "WordID": "2",
            "SentID": 3555,
            "TokenID": "1",
            "Context": ". map ( referenceBase -> ( UnsolvedReference ) referenceBase )"
        },
        {
            "Word": "filter",
            "WordID": "6",
            "SentID": 3556,
            "TokenID": "1",
            "Context": ". filter ( unsolvedReference -> unsolvedReference . getRef ( ) . equals ( element . getName ( ) ) )"
        },
        {
            "Word": "ifPresent",
            "WordID": "3",
            "SentID": 3557,
            "TokenID": "1",
            "Context": ". ifPresent ( oldElement -> elements . set ( elements . indexOf ( oldElement ) , element ) ) ;"
        },
        {
            "Word": "set",
            "WordID": "1",
            "SentID": 3557,
            "TokenID": "7",
            "Context": ". ifPresent ( oldElement -> elements . set ( elements . indexOf ( oldElement ) , element ) ) ;"
        },
        {
            "Word": "isPresent",
            "WordID": "2",
            "SentID": 3568,
            "TokenID": "4",
            "Context": "if ( enumValue . isPresent ( ) ) {"
        },
        {
            "Word": "set",
            "WordID": "2",
            "SentID": 3698,
            "TokenID": "0",
            "Context": "set ( systemProperty ) ;"
        },
        {
            "Word": "Set",
            "WordID": "2",
            "SentID": 3776,
            "TokenID": "1",
            "Context": "final Set < String > words = new TreeSet < String > ( ) ;"
        },
        {
            "Word": "TreeSet",
            "WordID": "1",
            "SentID": 3776,
            "TokenID": "8",
            "Context": "final Set < String > words = new TreeSet < String > ( ) ;"
        },
        {
            "Word": "entrySet",
            "WordID": "1",
            "SentID": 3820,
            "TokenID": "12",
            "Context": "for ( Entry < File , Long > flt : wordsLastTime . entrySet ( ) ) {"
        },
        {
            "Word": "set",
            "WordID": "3",
            "SentID": 3973,
            "TokenID": "2",
            "Context": "threadLocal . set ( ( Closeable ) ( arguments [ 0 ] = getUploadStream ( httpRequest , formalParameters ) ) ) ;"
        },
        {
            "Word": "set",
            "WordID": "4",
            "SentID": 3975,
            "TokenID": "2",
            "Context": "threadLocal . set ( ( Closeable ) ( arguments [ 0 ] = getUploadStream ( httpRequest , formalParameters ) . openStream ( ) ) ) ;"
        },
        {
            "Word": "isAnnotationPresent",
            "WordID": "1",
            "SentID": 4214,
            "TokenID": "5",
            "Context": "if ( ! field . isAnnotationPresent ( Inject . class ) ) {"
        },
        {
            "Word": "set",
            "WordID": "5",
            "SentID": 4277,
            "TokenID": "2",
            "Context": "dependenciesStack . set ( stackTrace ) ;"
        },
        {
            "Word": "map",
            "WordID": "3",
            "SentID": 4322,
            "TokenID": "5",
            "Context": "stream ( hrefs ) . map ( uri :: resolve ) . collect ( toSet ( ) ) ) ;"
        },
        {
            "Word": "toSet",
            "WordID": "1",
            "SentID": 4322,
            "TokenID": "14",
            "Context": "stream ( hrefs ) . map ( uri :: resolve ) . collect ( toSet ( ) ) ) ;"
        },
        {
            "Word": "unmodifiableSet",
            "WordID": "1",
            "SentID": 4410,
            "TokenID": "2",
            "Context": "allowedMethods = unmodifiableSet ( stream ( response . getHeaders ( \"Allow\" ) )"
        },
        {
            "Word": "filter",
            "WordID": "8",
            "SentID": 4411,
            "TokenID": "1",
            "Context": ". filter ( x -> x . getName ( ) . equals ( \"Allow\" ) )"
        },
        {
            "Word": "flatMap",
            "WordID": "1",
            "SentID": 4412,
            "TokenID": "1",
            "Context": ". flatMap ( x -> stream ( x . getElements ( ) ) ) . map ( x -> x . getName ( ) )"
        },
        {
            "Word": "map",
            "WordID": "7",
            "SentID": 4412,
            "TokenID": "15",
            "Context": ". flatMap ( x -> stream ( x . getElements ( ) ) ) . map ( x -> x . getName ( ) )"
        },
        {
            "Word": "toSet",
            "WordID": "2",
            "SentID": 4413,
            "TokenID": "3",
            "Context": ". collect ( toSet ( ) ) ) ;"
        },
        {
            "Word": "set",
            "WordID": "6",
            "SentID": 4463,
            "TokenID": "2",
            "Context": "classDescriptors . set ( i , classDescriptor ) ;"
        },
        {
            "Word": "Set",
            "WordID": "3",
            "SentID": 4478,
            "TokenID": "0",
            "Context": "Set < ManagedClassSPI > sortedClasses = new TreeSet < > ( new Comparator < ManagedClassSPI > ( ) {"
        },
        {
            "Word": "TreeSet",
            "WordID": "2",
            "SentID": 4478,
            "TokenID": "7",
            "Context": "Set < ManagedClassSPI > sortedClasses = new TreeSet < > ( new Comparator < ManagedClassSPI > ( ) {"
        },
        {
            "Word": "set",
            "WordID": "7",
            "SentID": 4625,
            "TokenID": "2",
            "Context": "field . set ( instance , value ) ;"
        },
        {
            "Word": "set",
            "WordID": "8",
            "SentID": 4642,
            "TokenID": "2",
            "Context": "threadLocal . set ( inputStream ) ;"
        },
        {
            "Word": "set",
            "WordID": "9",
            "SentID": 4720,
            "TokenID": "2",
            "Context": "active . set ( false ) ;"
        },
        {
            "Word": "flatMap",
            "WordID": "2",
            "SentID": 4835,
            "TokenID": "1",
            "Context": ". flatMap ( x -> stream ( x . getElements ( ) ) . map ( LinkHeader :: new ) )"
        },
        {
            "Word": "map",
            "WordID": "8",
            "SentID": 4835,
            "TokenID": "14",
            "Context": ". flatMap ( x -> stream ( x . getElements ( ) ) . map ( LinkHeader :: new ) )"
        },
        {
            "Word": "ifPresent",
            "WordID": "4",
            "SentID": 4895,
            "TokenID": "1",
            "Context": ". ifPresent ( x -> layout . addComponent ( buildDescriptionComponent ( property , x . value ( ) ) ) ) ;"
        },
        {
            "Word": "set",
            "WordID": "10",
            "SentID": 4987,
            "TokenID": "2",
            "Context": "threadLocal . set ( closeable ) ;"
        },
        {
            "Word": "isPresent",
            "WordID": "3",
            "SentID": 4998,
            "TokenID": "13",
            "Context": "if ( getAnnotation ( beanType , property , Id . class ) . isPresent ( ) || property . getName ( ) . equals ( \"name\" ) ) {"
        },
        {
            "Labels": [
                "\"Set Operations and Optional Handling in Java\""
            ],
            "Meaningful": "I don't know",
            "Syntactic": "identifiers",
            "Description": "identifiers",
            "Lexicographic": "",
            "Semantic": "",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Imprecise",
            "Q3_Answer": "Inferior",
            "Q4_Answer": "not enough descriptions for labels",
            "Q5_Answer": "Descriptive",
            "Q6_Answer": "None"
        }
    ],
    "478": [
        {
            "Word": "File",
            "WordID": "1",
            "SentID": 1353,
            "TokenID": "2",
            "Context": "} public File convertDocumentToPDF ( File inputDocumentParam ) {"
        },
        {
            "Word": "File",
            "WordID": "2",
            "SentID": 1353,
            "TokenID": "5",
            "Context": "} public File convertDocumentToPDF ( File inputDocumentParam ) {"
        },
        {
            "Word": "File",
            "WordID": "3",
            "SentID": 1359,
            "TokenID": "0",
            "Context": "File parentFolder = inputDocumentParam . getParentFile ( ) ;"
        },
        {
            "Word": "File",
            "WordID": "4",
            "SentID": 1364,
            "TokenID": "0",
            "Context": "File generatedPdfFileOut = new File ( parentFolder . getAbsolutePath ( ) . concat ("
        },
        {
            "Word": "File",
            "WordID": "7",
            "SentID": 1377,
            "TokenID": "0",
            "Context": "File returnVal = new File ( completeOutputPath ) ;"
        },
        {
            "Word": "File",
            "WordID": "10",
            "SentID": 3030,
            "TokenID": "0",
            "Context": "File certFile = new File ( fluidSystemTrustStore ) ;"
        },
        {
            "Word": "File",
            "WordID": "13",
            "SentID": 3649,
            "TokenID": "2",
            "Context": "} public File createFile ( String fileName ) throws IOException {"
        },
        {
            "Word": "Path",
            "WordID": "126",
            "SentID": 3650,
            "TokenID": "0",
            "Context": "Path path = Paths . get ( rootFolder . getPath ( ) , fileName ) ;"
        },
        {
            "Word": "File",
            "WordID": "14",
            "SentID": 3652,
            "TokenID": "2",
            "Context": "} public File createDirectory ( String directoryName ) {"
        },
        {
            "Word": "Path",
            "WordID": "127",
            "SentID": 3653,
            "TokenID": "0",
            "Context": "Path path = Paths . get ( rootFolder . getPath ( ) , directoryName ) ;"
        },
        {
            "Word": "Path",
            "WordID": "129",
            "SentID": 3661,
            "TokenID": "4",
            "Context": "public FileVisitResult visitFile ( Path file , BasicFileAttributes attributes )"
        },
        {
            "Word": "Path",
            "WordID": "130",
            "SentID": 3663,
            "TokenID": "4",
            "Context": "public FileVisitResult postVisitDirectory ( Path directory , IOException exception )"
        },
        {
            "Word": "Path",
            "WordID": "131",
            "SentID": 3666,
            "TokenID": "4",
            "Context": "private FileVisitResult delete ( Path file ) throws IOException {"
        },
        {
            "Word": "File",
            "WordID": "19",
            "SentID": 3800,
            "TokenID": "0",
            "Context": "File path = new File ( args [ 0 ] ) ;"
        },
        {
            "Word": "File",
            "WordID": "21",
            "SentID": 3804,
            "TokenID": "2",
            "Context": "} protected File [ ] listWordsFiles ( ) {"
        },
        {
            "Word": "File",
            "WordID": "22",
            "SentID": 3816,
            "TokenID": "6",
            "Context": "} private synchronized void addLastTime ( File wordsFile ) {"
        },
        {
            "Word": "File",
            "WordID": "23",
            "SentID": 3820,
            "TokenID": "4",
            "Context": "for ( Entry < File , Long > flt : wordsLastTime . entrySet ( ) ) {"
        },
        {
            "Word": "File",
            "WordID": "24",
            "SentID": 3821,
            "TokenID": "0",
            "Context": "File words = flt . getKey ( ) ;"
        },
        {
            "Word": "File",
            "WordID": "25",
            "SentID": 3824,
            "TokenID": "0",
            "Context": "File [ ] words = listWordsFiles ( ) ;"
        },
        {
            "Word": "File",
            "WordID": "26",
            "SentID": 3826,
            "TokenID": "2",
            "Context": "for ( File wordsFile : words ) {"
        },
        {
            "Word": "File",
            "WordID": "27",
            "SentID": 3829,
            "TokenID": "2",
            "Context": "Map < File , Long > oldWordsLastTime = new HashMap < File , Long > ( wordsLastTime ) ;"
        },
        {
            "Word": "File",
            "WordID": "28",
            "SentID": 3829,
            "TokenID": "11",
            "Context": "Map < File , Long > oldWordsLastTime = new HashMap < File , Long > ( wordsLastTime ) ;"
        },
        {
            "Word": "File",
            "WordID": "29",
            "SentID": 3847,
            "TokenID": "3",
            "Context": "} public static File getDefalutPath ( ) {"
        },
        {
            "Word": "File",
            "WordID": "31",
            "SentID": 3882,
            "TokenID": "0",
            "Context": "File [ ] txts = path . listFiles ( new FilenameFilter ( ) {"
        },
        {
            "Word": "File",
            "WordID": "32",
            "SentID": 3885,
            "TokenID": "2",
            "Context": "for ( File txt : txts ) {"
        },
        {
            "Word": "File",
            "WordID": "34",
            "SentID": 3931,
            "TokenID": "0",
            "Context": "File file = new File ( words ) ;"
        },
        {
            "Word": "File",
            "WordID": "36",
            "SentID": 3932,
            "TokenID": "0",
            "Context": "File dist = new File ( \"dic/word-with-attr.dic\" ) ;"
        },
        {
            "Word": "File",
            "WordID": "38",
            "SentID": 4026,
            "TokenID": "6",
            "Context": "} public static ContentType forFile ( File file ) {"
        },
        {
            "Labels": [
                "\"File Path Handling\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "File, Path",
            "Syntactic": "Objects",
            "Semantic": "assignment, data",
            "Description": "Variables with \"file\" and \"path\" in the name many assigning file objects",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "391": [
        {
            "Word": "completeOutputPath",
            "WordID": "1",
            "SentID": 1366,
            "TokenID": "1",
            "Context": "String completeOutputPath = generatedPdfFileOut . getAbsolutePath ( ) ;"
        },
        {
            "Word": "completeOutputPath",
            "WordID": "2",
            "SentID": 1374,
            "TokenID": "0",
            "Context": "completeOutputPath ) ;"
        },
        {
            "Word": "completeOutputPath",
            "WordID": "4",
            "SentID": 1379,
            "TokenID": "0",
            "Context": "completeOutputPath + \"'.\" ,"
        },
        {
            "Word": "baseURL",
            "WordID": "1",
            "SentID": 1387,
            "TokenID": "2",
            "Context": "this . baseURL ,"
        },
        {
            "Word": "getAttachmentPath",
            "WordID": "1",
            "SentID": 1920,
            "TokenID": "4",
            "Context": "if ( this . getAttachmentPath ( ) != null )"
        },
        {
            "Word": "getAttachmentPath",
            "WordID": "2",
            "SentID": 1922,
            "TokenID": "2",
            "Context": "this . getAttachmentPath ( ) ) ;"
        },
        {
            "Word": "isAddToolsToClassPath",
            "WordID": "1",
            "SentID": 2828,
            "TokenID": "4",
            "Context": "if ( this . isAddToolsToClassPath ( ) != null )"
        },
        {
            "Word": "endpointUrl",
            "WordID": "1",
            "SentID": 2859,
            "TokenID": "2",
            "Context": "this . endpointUrl . concat ( postfixUrlParam ) + \"'.\" ,"
        },
        {
            "Word": "endpointUrl",
            "WordID": "2",
            "SentID": 2861,
            "TokenID": "8",
            "Context": "HttpGet httpGet = new HttpGet ( this . endpointUrl . concat ( postfixUrlParam ) ) ;"
        },
        {
            "Word": "endpointUrl",
            "WordID": "3",
            "SentID": 2868,
            "TokenID": "2",
            "Context": "this . endpointUrl . concat ( postfixUrlParam ) ) ;"
        },
        {
            "Word": "endpointUrl",
            "WordID": "4",
            "SentID": 2942,
            "TokenID": "7",
            "Context": "uriRequest = new HttpPost ( this . endpointUrl . concat ( postfixUrlParam ) ) ;"
        },
        {
            "Word": "endpointUrl",
            "WordID": "5",
            "SentID": 2946,
            "TokenID": "7",
            "Context": "uriRequest = new HttpPut ( this . endpointUrl . concat ( postfixUrlParam ) ) ;"
        },
        {
            "Word": "endpointUrl",
            "WordID": "6",
            "SentID": 2948,
            "TokenID": "7",
            "Context": "uriRequest = new HttpDelete ( this . endpointUrl . concat ( postfixUrlParam ) ) ;"
        },
        {
            "Word": "jarPath",
            "WordID": "1",
            "SentID": 3379,
            "TokenID": "6",
            "Context": "} private void setClassLoader ( String jarPath ) {"
        },
        {
            "Word": "filePath",
            "WordID": "1",
            "SentID": 3509,
            "TokenID": "6",
            "Context": "} private void parseFile ( String filePath ) {"
        },
        {
            "Word": "filePath",
            "WordID": "4",
            "SentID": 3513,
            "TokenID": "6",
            "Context": "} private Node getSchemaNode ( String filePath ) throws IOException , SAXException , ParserConfigurationException {"
        },
        {
            "Word": "dicPath",
            "WordID": "1",
            "SentID": 3805,
            "TokenID": "1",
            "Context": "return dicPath . listFiles ( new FilenameFilter ( ) {"
        },
        {
            "Word": "getDefalutPath",
            "WordID": "1",
            "SentID": 3847,
            "TokenID": "4",
            "Context": "} public static File getDefalutPath ( ) {"
        },
        {
            "Word": "defalutPath",
            "WordID": "1",
            "SentID": 3848,
            "TokenID": "2",
            "Context": "if ( defalutPath == null ) {"
        },
        {
            "Word": "defPath",
            "WordID": "2",
            "SentID": 3850,
            "TokenID": "2",
            "Context": "if ( defPath == null ) {"
        },
        {
            "Word": "defPath",
            "WordID": "3",
            "SentID": 3852,
            "TokenID": "0",
            "Context": "defPath = url . getFile ( ) ;"
        },
        {
            "Word": "defPath",
            "WordID": "4",
            "SentID": 3853,
            "TokenID": "0",
            "Context": "defPath = System . getProperty ( \"user.dir\" ) + \"/data\" ;"
        },
        {
            "Word": "defalutPath",
            "WordID": "2",
            "SentID": 3854,
            "TokenID": "0",
            "Context": "defalutPath = new File ( defPath ) ;"
        },
        {
            "Word": "defalutPath",
            "WordID": "4",
            "SentID": 3856,
            "TokenID": "1",
            "Context": "return defalutPath ;"
        },
        {
            "Word": "path",
            "WordID": "7",
            "SentID": 3882,
            "TokenID": "5",
            "Context": "File [ ] txts = path . listFiles ( new FilenameFilter ( ) {"
        },
        {
            "Word": "requestPath",
            "WordID": "1",
            "SentID": 4018,
            "TokenID": "7",
            "Context": "} private static String key ( String requestPath ) {"
        },
        {
            "Word": "requestPath",
            "WordID": "2",
            "SentID": 4019,
            "TokenID": "3",
            "Context": "int queryParametersIndex = requestPath . lastIndexOf ( '?' ) ;"
        },
        {
            "Word": "requestPath",
            "WordID": "3",
            "SentID": 4021,
            "TokenID": "2",
            "Context": "queryParametersIndex = requestPath . length ( ) ;"
        },
        {
            "Word": "requestPath",
            "WordID": "4",
            "SentID": 4022,
            "TokenID": "3",
            "Context": "int extensionIndex = requestPath . lastIndexOf ( '.' , queryParametersIndex ) ;"
        },
        {
            "Word": "requestPath",
            "WordID": "5",
            "SentID": 4025,
            "TokenID": "1",
            "Context": "return requestPath . substring ( 0 , extensionIndex ) ;"
        },
        {
            "Word": "requestPath",
            "WordID": "6",
            "SentID": 4067,
            "TokenID": "0",
            "Context": "requestPath = controllerAnnotation . value ( ) ;"
        },
        {
            "Word": "requestPath",
            "WordID": "7",
            "SentID": 4070,
            "TokenID": "0",
            "Context": "requestPath = serviceAnnotation . value ( ) ;"
        },
        {
            "Word": "requestPath",
            "WordID": "8",
            "SentID": 4075,
            "TokenID": "0",
            "Context": "requestPath = requestPathAnnotation . value ( ) ;"
        },
        {
            "Word": "requestPath",
            "WordID": "11",
            "SentID": 4077,
            "TokenID": "0",
            "Context": "requestPath = null ;"
        },
        {
            "Word": "methodPath",
            "WordID": "2",
            "SentID": 4111,
            "TokenID": "5",
            "Context": "if ( ! remotelyAccessible && methodPath != null ) {"
        },
        {
            "Word": "loadImplementationURL",
            "WordID": "1",
            "SentID": 4195,
            "TokenID": "3",
            "Context": "} private String loadImplementationURL ( Config descriptor ) throws ConfigException {"
        },
        {
            "Word": "implementationURL",
            "WordID": "2",
            "SentID": 4197,
            "TokenID": "11",
            "Context": "if ( instanceType . equals ( InstanceType . REMOTE ) && implementationURL == null ) {"
        },
        {
            "Word": "implementationURL",
            "WordID": "3",
            "SentID": 4198,
            "TokenID": "1",
            "Context": "return implementationURL ;"
        },
        {
            "Word": "implementationURL",
            "WordID": "4",
            "SentID": 4240,
            "TokenID": "2",
            "Context": "if ( implementationURL != null ) {"
        },
        {
            "Word": "propertyPath",
            "WordID": "1",
            "SentID": 4262,
            "TokenID": "6",
            "Context": "} private void setValue ( String propertyPath , Object value ) throws ConverterException , IllegalAccessException {"
        },
        {
            "Word": "getImplementationURL",
            "WordID": "1",
            "SentID": 4423,
            "TokenID": "5",
            "Context": "return getRemoteInstance ( managedClass . getImplementationURL ( ) , ( Class < ? super T > ) managedClass . getInterfaceClass ( ) ) ;"
        },
        {
            "Word": "implementationURL",
            "WordID": "6",
            "SentID": 4424,
            "TokenID": "8",
            "Context": "public < T > T getRemoteInstance ( String implementationURL , Class < ? super T > interfaceClass ) throws UnsupportedProtocolException {"
        },
        {
            "Word": "implementationURL",
            "WordID": "7",
            "SentID": 4425,
            "TokenID": "2",
            "Context": "if ( implementationURL == null ) {"
        },
        {
            "Word": "implementationURL",
            "WordID": "9",
            "SentID": 4429,
            "TokenID": "5",
            "Context": "return remoteFactory . getRemoteInstance ( implementationURL , interfaceClass ) ;"
        },
        {
            "Word": "requestURL",
            "WordID": "1",
            "SentID": 4667,
            "TokenID": "2",
            "Context": "if ( requestURL == null ) {"
        },
        {
            "Word": "requestURL",
            "WordID": "2",
            "SentID": 4668,
            "TokenID": "0",
            "Context": "requestURL = httpRequest . getRequestURI ( ) ;"
        },
        {
            "Word": "requestPath",
            "WordID": "16",
            "SentID": 4671,
            "TokenID": "2",
            "Context": "if ( requestPath == null ) {"
        },
        {
            "Word": "requestPath",
            "WordID": "17",
            "SentID": 4672,
            "TokenID": "0",
            "Context": "requestPath = httpRequest . getRequestURI ( ) . substring ( httpRequest . getContextPath ( ) . length ( ) ) ;"
        },
        {
            "Word": "requestURL",
            "WordID": "3",
            "SentID": 4681,
            "TokenID": "0",
            "Context": "requestURL = null ;"
        },
        {
            "Word": "implementationURL",
            "WordID": "10",
            "SentID": 4847,
            "TokenID": "10",
            "Context": "} public static < T > T getRemoteInstance ( String implementationURL , Class < ? super T > interfaceClass ) {"
        },
        {
            "Word": "implementationURL",
            "WordID": "11",
            "SentID": 4848,
            "TokenID": "7",
            "Context": "return getAppFactory ( ) . getRemoteInstance ( implementationURL , interfaceClass ) ;"
        },
        {
            "Labels": [
                "\"Path and URL Management in Java\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "Path, Url",
            "Syntactic": "variables",
            "Semantic": "Network",
            "Description": "variables relating to Path and URL operations and network",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Lexicographic",
            "Q6_Answer": "None"
        }
    ],
    "494": [
        {
            "Word": "AppRequestToken",
            "WordID": "1",
            "SentID": 1593,
            "TokenID": "2",
            "Context": "} public AppRequestToken login ("
        },
        {
            "Word": "AppRequestToken",
            "WordID": "2",
            "SentID": 1610,
            "TokenID": "0",
            "Context": "AppRequestToken appReqToken = this . issueAppRequestToken ("
        },
        {
            "Word": "appReqToken",
            "WordID": "1",
            "SentID": 1610,
            "TokenID": "1",
            "Context": "AppRequestToken appReqToken = this . issueAppRequestToken ("
        },
        {
            "Word": "issueAppRequestToken",
            "WordID": "1",
            "SentID": 1610,
            "TokenID": "5",
            "Context": "AppRequestToken appReqToken = this . issueAppRequestToken ("
        },
        {
            "Word": "appReqToken",
            "WordID": "2",
            "SentID": 1613,
            "TokenID": "0",
            "Context": "appReqToken . setRoleString ( authEncData . getRoleListing ( ) ) ;"
        },
        {
            "Word": "appReqToken",
            "WordID": "3",
            "SentID": 1614,
            "TokenID": "0",
            "Context": "appReqToken . setSalt ( authResponse . getSalt ( ) ) ;"
        },
        {
            "Word": "appReqToken",
            "WordID": "4",
            "SentID": 1615,
            "TokenID": "1",
            "Context": "return appReqToken ;"
        },
        {
            "Word": "AppRequestToken",
            "WordID": "3",
            "SentID": 1639,
            "TokenID": "2",
            "Context": "} private AppRequestToken issueAppRequestToken ("
        },
        {
            "Word": "issueAppRequestToken",
            "WordID": "2",
            "SentID": 1639,
            "TokenID": "3",
            "Context": "} private AppRequestToken issueAppRequestToken ("
        },
        {
            "Word": "generateLocalHMACForReqToken",
            "WordID": "1",
            "SentID": 1653,
            "TokenID": "2",
            "Context": "AES256Local . generateLocalHMACForReqToken ( encryptedData , sessionKey , seed ) ;"
        },
        {
            "Word": "AppRequestToken",
            "WordID": "4",
            "SentID": 1654,
            "TokenID": "0",
            "Context": "AppRequestToken requestToServer = new AppRequestToken ( ) ;"
        },
        {
            "Word": "AppRequestToken",
            "WordID": "5",
            "SentID": 1654,
            "TokenID": "4",
            "Context": "AppRequestToken requestToServer = new AppRequestToken ( ) ;"
        },
        {
            "Word": "AppRequestToken",
            "WordID": "6",
            "SentID": 1660,
            "TokenID": "2",
            "Context": "return new AppRequestToken ("
        },
        {
            "Word": "userIssueToken",
            "WordID": "1",
            "SentID": 1661,
            "TokenID": "14",
            "Context": "this . postJson ( requestToServer , WS . Path . User . Version1 . userIssueToken ( ) ) ) ;"
        },
        {
            "Word": "getAccessToken",
            "WordID": "1",
            "SentID": 1952,
            "TokenID": "4",
            "Context": "if ( this . getAccessToken ( ) != null )"
        },
        {
            "Word": "getIdToken",
            "WordID": "1",
            "SentID": 1954,
            "TokenID": "4",
            "Context": "if ( this . getIdToken ( ) != null )"
        },
        {
            "Word": "generateLocalHMACForReqToken",
            "WordID": "2",
            "SentID": 2672,
            "TokenID": "6",
            "Context": "} public static byte [ ] generateLocalHMACForReqToken ("
        },
        {
            "Word": "AccessToken",
            "WordID": "1",
            "SentID": 2791,
            "TokenID": "2",
            "Context": "} public AccessToken getAccessToken ("
        },
        {
            "Word": "getAccessToken",
            "WordID": "3",
            "SentID": 2791,
            "TokenID": "3",
            "Context": "} public AccessToken getAccessToken ("
        },
        {
            "Word": "AccessToken",
            "WordID": "2",
            "SentID": 2805,
            "TokenID": "2",
            "Context": "return new AccessToken ( this . postJson ("
        },
        {
            "Word": "userToken",
            "WordID": "1",
            "SentID": 2806,
            "TokenID": "10",
            "Context": "tokenRequest , WS . Path . Auth0 . Version1 . userToken ( ) ) ) ;"
        },
        {
            "Word": "AccessToken",
            "WordID": "3",
            "SentID": 2807,
            "TokenID": "5",
            "Context": "} public NormalizedUserProfile getUserProfileInfo ( AccessToken accessTokenParam )"
        },
        {
            "Word": "getAccessToken",
            "WordID": "4",
            "SentID": 2808,
            "TokenID": "9",
            "Context": "if ( accessTokenParam == null || ( accessTokenParam . getAccessToken ( ) == null ||"
        },
        {
            "Labels": [
                "\"Token Generation and Management in Application\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "Token",
            "Syntactic": "dataType, method",
            "Semantic": "Network",
            "Description": "methods and datatypes with \"Token\" in the name relating to network operations",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Lexicographic",
            "Q6_Answer": "None"
        }
    ],
    "249": [
        {
            "Word": "AuthRequest",
            "WordID": "1",
            "SentID": 1598,
            "TokenID": "0",
            "Context": "AuthRequest authRequest = new AuthRequest ( ) ;"
        },
        {
            "Word": "authRequest",
            "WordID": "1",
            "SentID": 1598,
            "TokenID": "1",
            "Context": "AuthRequest authRequest = new AuthRequest ( ) ;"
        },
        {
            "Word": "AuthRequest",
            "WordID": "2",
            "SentID": 1598,
            "TokenID": "4",
            "Context": "AuthRequest authRequest = new AuthRequest ( ) ;"
        },
        {
            "Word": "authRequest",
            "WordID": "2",
            "SentID": 1599,
            "TokenID": "0",
            "Context": "authRequest . setUsername ( usernameParam ) ;"
        },
        {
            "Word": "authRequest",
            "WordID": "3",
            "SentID": 1600,
            "TokenID": "0",
            "Context": "authRequest . setLifetime ( sessionLifespanSecondsParam ) ;"
        },
        {
            "Word": "authRequest",
            "WordID": "4",
            "SentID": 1604,
            "TokenID": "0",
            "Context": "authRequest ,"
        },
        {
            "Word": "AccessTokenRequest",
            "WordID": "1",
            "SentID": 2799,
            "TokenID": "0",
            "Context": "AccessTokenRequest tokenRequest = new AccessTokenRequest ( ) ;"
        },
        {
            "Word": "tokenRequest",
            "WordID": "1",
            "SentID": 2799,
            "TokenID": "1",
            "Context": "AccessTokenRequest tokenRequest = new AccessTokenRequest ( ) ;"
        },
        {
            "Word": "AccessTokenRequest",
            "WordID": "2",
            "SentID": 2799,
            "TokenID": "4",
            "Context": "AccessTokenRequest tokenRequest = new AccessTokenRequest ( ) ;"
        },
        {
            "Word": "tokenRequest",
            "WordID": "2",
            "SentID": 2800,
            "TokenID": "0",
            "Context": "tokenRequest . setClientId ( clientIdParam ) ;"
        },
        {
            "Word": "tokenRequest",
            "WordID": "3",
            "SentID": 2801,
            "TokenID": "0",
            "Context": "tokenRequest . setClientSecret ( clientSecretParam ) ;"
        },
        {
            "Word": "tokenRequest",
            "WordID": "4",
            "SentID": 2802,
            "TokenID": "0",
            "Context": "tokenRequest . setGrantType ( AUTHORIZATION_CODE ) ;"
        },
        {
            "Word": "tokenRequest",
            "WordID": "5",
            "SentID": 2803,
            "TokenID": "0",
            "Context": "tokenRequest . setCode ( codeParam ) ;"
        },
        {
            "Word": "tokenRequest",
            "WordID": "6",
            "SentID": 2804,
            "TokenID": "0",
            "Context": "tokenRequest . setRedirectUri ( redirectUrlParam ) ;"
        },
        {
            "Word": "tokenRequest",
            "WordID": "7",
            "SentID": 2806,
            "TokenID": "0",
            "Context": "tokenRequest , WS . Path . Auth0 . Version1 . userToken ( ) ) ) ;"
        },
        {
            "Word": "uriRequest",
            "WordID": "1",
            "SentID": 2936,
            "TokenID": "1",
            "Context": "HttpUriRequest uriRequest = null ;"
        },
        {
            "Word": "uriRequest",
            "WordID": "2",
            "SentID": 2941,
            "TokenID": "0",
            "Context": "uriRequest = builder . build ( ) ;"
        },
        {
            "Word": "uriRequest",
            "WordID": "3",
            "SentID": 2942,
            "TokenID": "0",
            "Context": "uriRequest = new HttpPost ( this . endpointUrl . concat ( postfixUrlParam ) ) ;"
        },
        {
            "Word": "uriRequest",
            "WordID": "4",
            "SentID": 2943,
            "TokenID": "0",
            "Context": "uriRequest . setHeader ( CONTENT_TYPE_HEADER , contentTypeParam . toString ( ) ) ;"
        },
        {
            "Word": "uriRequest",
            "WordID": "5",
            "SentID": 2946,
            "TokenID": "0",
            "Context": "uriRequest = new HttpPut ( this . endpointUrl . concat ( postfixUrlParam ) ) ;"
        },
        {
            "Word": "uriRequest",
            "WordID": "6",
            "SentID": 2948,
            "TokenID": "0",
            "Context": "uriRequest = new HttpDelete ( this . endpointUrl . concat ( postfixUrlParam ) ) ;"
        },
        {
            "Word": "uriRequest",
            "WordID": "7",
            "SentID": 2949,
            "TokenID": "2",
            "Context": "if ( uriRequest == null ) {"
        },
        {
            "Word": "uriRequest",
            "WordID": "8",
            "SentID": 2950,
            "TokenID": "0",
            "Context": "uriRequest . setHeader ( headerNameVal . getName ( ) , headerNameVal . getValue ( ) ) ;"
        },
        {
            "Word": "uriRequest",
            "WordID": "9",
            "SentID": 2951,
            "TokenID": "2",
            "Context": "if ( uriRequest instanceof HttpEntityEnclosingRequestBase ) {"
        },
        {
            "Word": "uriRequest",
            "WordID": "10",
            "SentID": 2953,
            "TokenID": "4",
            "Context": "( ( HttpEntityEnclosingRequestBase ) uriRequest ) . setEntity ( httpEntity ) ;"
        },
        {
            "Word": "uriRequest",
            "WordID": "11",
            "SentID": 2954,
            "TokenID": "8",
            "Context": "responseBody = this . executeHttp ( httpclient , uriRequest ,"
        },
        {
            "Word": "LicenseRequest",
            "WordID": "1",
            "SentID": 3190,
            "TokenID": "5",
            "Context": "} public String requestLicense ( LicenseRequest licenseRequestParam ) {"
        },
        {
            "Word": "licenseRequest",
            "WordID": "1",
            "SentID": 3196,
            "TokenID": "2",
            "Context": "Version1 . licenseRequest ( ) ) ;"
        },
        {
            "Word": "LicenseRequest",
            "WordID": "2",
            "SentID": 3197,
            "TokenID": "2",
            "Context": "} public LicenseRequest applyLicense ( String licenseToApplyParam )"
        },
        {
            "Word": "LicenseRequest",
            "WordID": "3",
            "SentID": 3198,
            "TokenID": "0",
            "Context": "LicenseRequest liceReq = new LicenseRequest ( ) ;"
        },
        {
            "Word": "liceReq",
            "WordID": "1",
            "SentID": 3198,
            "TokenID": "1",
            "Context": "LicenseRequest liceReq = new LicenseRequest ( ) ;"
        },
        {
            "Word": "LicenseRequest",
            "WordID": "4",
            "SentID": 3198,
            "TokenID": "4",
            "Context": "LicenseRequest liceReq = new LicenseRequest ( ) ;"
        },
        {
            "Word": "LicenseRequest",
            "WordID": "5",
            "SentID": 3201,
            "TokenID": "2",
            "Context": "return new LicenseRequest ( this . postJson ("
        },
        {
            "Word": "HttpServletRequest",
            "WordID": "1",
            "SentID": 3766,
            "TokenID": "0",
            "Context": "HttpServletRequest request ,"
        },
        {
            "Word": "HttpServletRequest",
            "WordID": "2",
            "SentID": 3773,
            "TokenID": "7",
            "Context": "public boolean getAllowRobots ( ServletContext servletContext , HttpServletRequest request , HttpServletResponse response , Page page ) throws ServletException , IOException {"
        },
        {
            "Word": "HttpServletRequest",
            "WordID": "3",
            "SentID": 3960,
            "TokenID": "6",
            "Context": "public Object [ ] read ( HttpServletRequest httpRequest , Type [ ] formalParameters ) throws IOException , IllegalArgumentException {"
        },
        {
            "Word": "httpRequest",
            "WordID": "1",
            "SentID": 3960,
            "TokenID": "7",
            "Context": "public Object [ ] read ( HttpServletRequest httpRequest , Type [ ] formalParameters ) throws IOException , IllegalArgumentException {"
        },
        {
            "Word": "httpRequest",
            "WordID": "2",
            "SentID": 3966,
            "TokenID": "8",
            "Context": "arguments [ 0 ] = new FormImpl ( httpRequest ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "3",
            "SentID": 3968,
            "TokenID": "8",
            "Context": "arguments [ 0 ] = new FormIteratorImpl ( httpRequest ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "4",
            "SentID": 3970,
            "TokenID": "6",
            "Context": "Form form = new FormImpl ( httpRequest ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "5",
            "SentID": 3973,
            "TokenID": "15",
            "Context": "threadLocal . set ( ( Closeable ) ( arguments [ 0 ] = getUploadStream ( httpRequest , formalParameters ) ) ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "6",
            "SentID": 3975,
            "TokenID": "15",
            "Context": "threadLocal . set ( ( Closeable ) ( arguments [ 0 ] = getUploadStream ( httpRequest , formalParameters ) . openStream ( ) ) ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "7",
            "SentID": 3976,
            "TokenID": "8",
            "Context": "arguments [ 0 ] = new FormObject ( httpRequest , type ) . getValue ( ) ;"
        },
        {
            "Word": "HttpServletRequest",
            "WordID": "4",
            "SentID": 3978,
            "TokenID": "6",
            "Context": "} private static UploadStream getUploadStream ( HttpServletRequest httpRequest , Type [ ] formalParameters ) throws IOException {"
        },
        {
            "Word": "httpRequest",
            "WordID": "8",
            "SentID": 3978,
            "TokenID": "7",
            "Context": "} private static UploadStream getUploadStream ( HttpServletRequest httpRequest , Type [ ] formalParameters ) throws IOException {"
        },
        {
            "Word": "httpRequest",
            "WordID": "9",
            "SentID": 3979,
            "TokenID": "6",
            "Context": "FormIterator form = new FormIteratorImpl ( httpRequest ) ;"
        },
        {
            "Word": "HttpServletRequest",
            "WordID": "5",
            "SentID": 3991,
            "TokenID": "0",
            "Context": "HttpServletRequest httpRequest = context . getRequest ( ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "10",
            "SentID": 3991,
            "TokenID": "1",
            "Context": "HttpServletRequest httpRequest = context . getRequest ( ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "11",
            "SentID": 3995,
            "TokenID": "8",
            "Context": "method = restMethods . get ( key ( httpRequest . getPathInfo ( ) ) ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "12",
            "SentID": 3998,
            "TokenID": "6",
            "Context": "argumentsReader = argumentsReaderFactory . getArgumentsReader ( httpRequest , formalParameters ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "13",
            "SentID": 3999,
            "TokenID": "9",
            "Context": "Object [ ] arguments = argumentsReader . read ( httpRequest , formalParameters ) ;"
        },
        {
            "Word": "HttpServletRequest",
            "WordID": "6",
            "SentID": 4585,
            "TokenID": "4",
            "Context": "public ArgumentsReader getArgumentsReader ( HttpServletRequest httpRequest , Type [ ] formalParameters ) {"
        },
        {
            "Word": "httpRequest",
            "WordID": "14",
            "SentID": 4585,
            "TokenID": "5",
            "Context": "public ArgumentsReader getArgumentsReader ( HttpServletRequest httpRequest , Type [ ] formalParameters ) {"
        },
        {
            "Word": "httpRequest",
            "WordID": "15",
            "SentID": 4588,
            "TokenID": "2",
            "Context": "if ( httpRequest . getQueryString ( ) != null ) {"
        },
        {
            "Word": "httpRequest",
            "WordID": "16",
            "SentID": 4590,
            "TokenID": "3",
            "Context": "return getArgumentsReader ( httpRequest . getContentType ( ) , formalParameters [ 0 ] ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "17",
            "SentID": 4630,
            "TokenID": "7",
            "Context": "FileItemIterator iterator = multipart . getItemIterator ( httpRequest ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "18",
            "SentID": 4654,
            "TokenID": "8",
            "Context": "return new Object [ ] { read ( httpRequest . getInputStream ( ) , formalParameters [ 0 ] ) } ;"
        },
        {
            "Word": "HttpServletRequest",
            "WordID": "7",
            "SentID": 4666,
            "TokenID": "5",
            "Context": "} public void attach ( HttpServletRequest httpRequest , HttpServletResponse httpResponse ) {"
        },
        {
            "Word": "httpRequest",
            "WordID": "20",
            "SentID": 4668,
            "TokenID": "2",
            "Context": "requestURL = httpRequest . getRequestURI ( ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "21",
            "SentID": 4670,
            "TokenID": "2",
            "Context": "locale = httpRequest . getLocale ( ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "27",
            "SentID": 4689,
            "TokenID": "1",
            "Context": "return httpRequest . getSession ( ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "28",
            "SentID": 4690,
            "TokenID": "1",
            "Context": "return httpRequest . getSession ( create [ 0 ] ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "29",
            "SentID": 4693,
            "TokenID": "4",
            "Context": "message . append ( httpRequest . getRequestURI ( ) ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "30",
            "SentID": 4696,
            "TokenID": "4",
            "Context": "message . append ( httpRequest . getRemoteHost ( ) ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "31",
            "SentID": 4697,
            "TokenID": "4",
            "Context": "message . append ( httpRequest . getMethod ( ) ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "32",
            "SentID": 4698,
            "TokenID": "4",
            "Context": "message . append ( httpRequest . getQueryString ( ) ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "33",
            "SentID": 4699,
            "TokenID": "6",
            "Context": "Enumeration < String > headerNames = httpRequest . getHeaderNames ( ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "34",
            "SentID": 4702,
            "TokenID": "4",
            "Context": "message . append ( httpRequest . getHeader ( headerName ) ) ;"
        },
        {
            "Word": "HttpServletRequest",
            "WordID": "8",
            "SentID": 4747,
            "TokenID": "4",
            "Context": "protected void service ( HttpServletRequest httpRequest , HttpServletResponse httpResponse ) throws IOException , ServletException {"
        },
        {
            "Word": "httpRequest",
            "WordID": "38",
            "SentID": 4749,
            "TokenID": "6",
            "Context": "logContext . put ( LOG_CONTEXT_IP , httpRequest . getRemoteHost ( ) ) ;"
        },
        {
            "Word": "isEmptyUriRequest",
            "WordID": "1",
            "SentID": 4751,
            "TokenID": "2",
            "Context": "if ( isEmptyUriRequest ( httpRequest ) ) {"
        },
        {
            "Word": "httpRequest",
            "WordID": "39",
            "SentID": 4751,
            "TokenID": "4",
            "Context": "if ( isEmptyUriRequest ( httpRequest ) ) {"
        },
        {
            "Word": "httpRequest",
            "WordID": "40",
            "SentID": 4752,
            "TokenID": "3",
            "Context": "String requestURI = httpRequest . getRequestURI ( ) ;"
        },
        {
            "Word": "isEmptyUriRequest",
            "WordID": "2",
            "SentID": 4761,
            "TokenID": "4",
            "Context": "} private static boolean isEmptyUriRequest ( HttpServletRequest httpRequest ) {"
        },
        {
            "Word": "HttpServletRequest",
            "WordID": "9",
            "SentID": 4761,
            "TokenID": "6",
            "Context": "} private static boolean isEmptyUriRequest ( HttpServletRequest httpRequest ) {"
        },
        {
            "Word": "httpRequest",
            "WordID": "42",
            "SentID": 4761,
            "TokenID": "7",
            "Context": "} private static boolean isEmptyUriRequest ( HttpServletRequest httpRequest ) {"
        },
        {
            "Word": "httpRequest",
            "WordID": "43",
            "SentID": 4762,
            "TokenID": "7",
            "Context": "if ( ! \"GET\" . equals ( httpRequest . getMethod ( ) ) ) {"
        },
        {
            "Word": "httpRequest",
            "WordID": "44",
            "SentID": 4763,
            "TokenID": "3",
            "Context": "String acceptValue = httpRequest . getHeader ( HttpHeader . ACCEPT ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "45",
            "SentID": 4765,
            "TokenID": "3",
            "Context": "String referer = httpRequest . getHeader ( HttpHeader . REFERER ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "46",
            "SentID": 4767,
            "TokenID": "6",
            "Context": "StringBuilder uri = new StringBuilder ( httpRequest . getRequestURI ( ) ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "47",
            "SentID": 4768,
            "TokenID": "3",
            "Context": "String query = httpRequest . getQueryString ( ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "48",
            "SentID": 4837,
            "TokenID": "6",
            "Context": "QueryParametersParser queryParameters = new QueryParametersParser ( httpRequest . getInputStream ( ) ) ;"
        },
        {
            "Word": "httpRequest",
            "WordID": "49",
            "SentID": 4954,
            "TokenID": "6",
            "Context": "JsonReader reader = new JsonReader ( httpRequest . getInputStream ( ) , expectedStartSequence ( formalParameters ) ) ;"
        },
        {
            "Word": "HttpServletRequest",
            "WordID": "10",
            "SentID": 4980,
            "TokenID": "6",
            "Context": "} public static boolean isXHR ( HttpServletRequest httpRequest ) {"
        },
        {
            "Word": "httpRequest",
            "WordID": "50",
            "SentID": 4980,
            "TokenID": "7",
            "Context": "} public static boolean isXHR ( HttpServletRequest httpRequest ) {"
        },
        {
            "Word": "httpRequest",
            "WordID": "51",
            "SentID": 4981,
            "TokenID": "3",
            "Context": "String requestedWith = httpRequest . getHeader ( X_REQUESTED_WITH ) ;"
        },
        {
            "Word": "XML_HTTP_REQUEST",
            "WordID": "1",
            "SentID": 4982,
            "TokenID": "9",
            "Context": "return requestedWith != null ? requestedWith . equalsIgnoreCase ( XML_HTTP_REQUEST ) : false ;"
        },
        {
            "Word": "HttpServletRequest",
            "WordID": "11",
            "SentID": 4983,
            "TokenID": "6",
            "Context": "} public static boolean isAndroid ( HttpServletRequest httpRequest ) {"
        },
        {
            "Word": "httpRequest",
            "WordID": "52",
            "SentID": 4983,
            "TokenID": "7",
            "Context": "} public static boolean isAndroid ( HttpServletRequest httpRequest ) {"
        },
        {
            "Labels": [
                "\"Authentication and Request Handling in Java\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "Request",
            "Syntactic": "Objects, Datatypes",
            "Semantic": "Network",
            "Description": "Ibjects and datatypes relating to authentication, Request Handling, and network",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Descriptive",
            "Q6_Answer": "None"
        }
    ],
    "488": [
        {
            "Word": ",",
            "WordID": "338",
            "SentID": 1629,
            "TokenID": "8",
            "Context": "if ( ! Arrays . equals ( hMacFromResponse , localGeneratedHMac ) ) {"
        },
        {
            "Word": ",",
            "WordID": "601",
            "SentID": 2670,
            "TokenID": "12",
            "Context": "byte [ ] derivedKey = sha256 ( UtilGlobal . addAll ( passwordSha256 , poisonedSeed ) ) ;"
        },
        {
            "Word": ",",
            "WordID": "605",
            "SentID": 2674,
            "TokenID": "12",
            "Context": "byte [ ] derivedKey = sha256 ( UtilGlobal . addAll ( keyParam , poisonedSeed ) ) ;"
        },
        {
            "Word": ",",
            "WordID": "609",
            "SentID": 2687,
            "TokenID": "12",
            "Context": "byte [ ] derivedKey = sha256 ( UtilGlobal . addAll ( passwordSha256 , seedParam ) ) ;"
        },
        {
            "Word": ",",
            "WordID": "783",
            "SentID": 3344,
            "TokenID": "8",
            "Context": "} public static boolean hasDifferentValue ( XsdStringRestrictions o1 , XsdStringRestrictions o2 ) {"
        },
        {
            "Word": ",",
            "WordID": "792",
            "SentID": 3430,
            "TokenID": "8",
            "Context": "} public static boolean hasDifferentValue ( XsdDoubleRestrictions o1 , XsdDoubleRestrictions o2 ) {"
        },
        {
            "Word": ",",
            "WordID": "797",
            "SentID": 3445,
            "TokenID": "5",
            "Context": "if ( existsRestrictionOverlap ( existingRestriction , unionMemberRestriction ) ) {"
        },
        {
            "Word": ",",
            "WordID": "798",
            "SentID": 3446,
            "TokenID": "3",
            "Context": "updateExistingRestriction ( existingRestriction , unionMemberRestriction ) ;"
        },
        {
            "Word": ",",
            "WordID": "800",
            "SentID": 3449,
            "TokenID": "7",
            "Context": "} private void updateExistingRestriction ( XsdRestriction existing , XsdRestriction newRestriction ) {"
        },
        {
            "Word": ",",
            "WordID": "801",
            "SentID": 3483,
            "TokenID": "3",
            "Context": "updateExistingRestrictionEnumerations ( existing , newRestriction ) ;"
        },
        {
            "Word": ",",
            "WordID": "802",
            "SentID": 3484,
            "TokenID": "7",
            "Context": "} private void updateExistingRestrictionEnumerations ( XsdRestriction existing , XsdRestriction newRestriction ) {"
        },
        {
            "Word": ",",
            "WordID": "803",
            "SentID": 3493,
            "TokenID": "7",
            "Context": "} private boolean existsRestrictionOverlap ( XsdRestriction existing , XsdRestriction newRestriction ) {"
        },
        {
            "Word": ",",
            "WordID": "804",
            "SentID": 3494,
            "TokenID": "8",
            "Context": "return hasDifferentValue ( existing . getPattern ( ) , newRestriction . getPattern ( ) ) ||"
        },
        {
            "Word": ",",
            "WordID": "805",
            "SentID": 3495,
            "TokenID": "7",
            "Context": "hasDifferentValue ( existing . getWhiteSpace ( ) , newRestriction . getWhiteSpace ( ) ) ||"
        },
        {
            "Word": ",",
            "WordID": "806",
            "SentID": 3496,
            "TokenID": "7",
            "Context": "hasDifferentValue ( existing . getTotalDigits ( ) , newRestriction . getTotalDigits ( ) ) ||"
        },
        {
            "Word": ",",
            "WordID": "807",
            "SentID": 3497,
            "TokenID": "7",
            "Context": "hasDifferentValue ( existing . getFractionDigits ( ) , newRestriction . getFractionDigits ( ) ) ||"
        },
        {
            "Word": ",",
            "WordID": "808",
            "SentID": 3498,
            "TokenID": "7",
            "Context": "hasDifferentValue ( existing . getMaxExclusive ( ) , newRestriction . getMaxExclusive ( ) ) ||"
        },
        {
            "Word": ",",
            "WordID": "809",
            "SentID": 3499,
            "TokenID": "7",
            "Context": "hasDifferentValue ( existing . getMaxInclusive ( ) , newRestriction . getMaxInclusive ( ) ) ||"
        },
        {
            "Word": ",",
            "WordID": "810",
            "SentID": 3500,
            "TokenID": "7",
            "Context": "hasDifferentValue ( existing . getMaxLength ( ) , newRestriction . getMaxLength ( ) ) ||"
        },
        {
            "Word": ",",
            "WordID": "811",
            "SentID": 3501,
            "TokenID": "7",
            "Context": "hasDifferentValue ( existing . getMinExclusive ( ) , newRestriction . getMinExclusive ( ) ) ||"
        },
        {
            "Word": ",",
            "WordID": "812",
            "SentID": 3502,
            "TokenID": "7",
            "Context": "hasDifferentValue ( existing . getMinInclusive ( ) , newRestriction . getMinInclusive ( ) ) ||"
        },
        {
            "Word": ",",
            "WordID": "813",
            "SentID": 3503,
            "TokenID": "7",
            "Context": "hasDifferentValue ( existing . getMinLength ( ) , newRestriction . getMinLength ( ) ) ||"
        },
        {
            "Word": ",",
            "WordID": "814",
            "SentID": 3504,
            "TokenID": "7",
            "Context": "hasDifferentValue ( existing . getLength ( ) , newRestriction . getLength ( ) ) ;"
        },
        {
            "Word": ",",
            "WordID": "825",
            "SentID": 3563,
            "TokenID": "8",
            "Context": "} public static boolean hasDifferentValue ( XsdIntegerRestrictions o1 , XsdIntegerRestrictions o2 ) {"
        },
        {
            "Word": ",",
            "WordID": "883",
            "SentID": 3726,
            "TokenID": "10",
            "Context": "} public void trace ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": ",",
            "WordID": "886",
            "SentID": 3727,
            "TokenID": "9",
            "Context": "formatAndLog ( Log . VERBOSE , format , arg1 , arg2 ) ;"
        },
        {
            "Word": ",",
            "WordID": "897",
            "SentID": 3734,
            "TokenID": "10",
            "Context": "} public void debug ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": ",",
            "WordID": "900",
            "SentID": 3735,
            "TokenID": "9",
            "Context": "formatAndLog ( Log . DEBUG , format , arg1 , arg2 ) ;"
        },
        {
            "Word": ",",
            "WordID": "911",
            "SentID": 3742,
            "TokenID": "10",
            "Context": "} public void info ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": ",",
            "WordID": "914",
            "SentID": 3743,
            "TokenID": "9",
            "Context": "formatAndLog ( Log . INFO , format , arg1 , arg2 ) ;"
        },
        {
            "Word": ",",
            "WordID": "925",
            "SentID": 3750,
            "TokenID": "10",
            "Context": "} public void warn ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": ",",
            "WordID": "928",
            "SentID": 3751,
            "TokenID": "9",
            "Context": "formatAndLog ( Log . WARN , format , arg1 , arg2 ) ;"
        },
        {
            "Word": ",",
            "WordID": "939",
            "SentID": 3758,
            "TokenID": "10",
            "Context": "} public void error ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": ",",
            "WordID": "942",
            "SentID": 3759,
            "TokenID": "9",
            "Context": "formatAndLog ( Log . ERROR , format , arg1 , arg2 ) ;"
        },
        {
            "Word": ",",
            "WordID": "1081",
            "SentID": 4184,
            "TokenID": "12",
            "Context": "if ( implementationClass != null && ! Types . isKindOf ( implementationClass , interfaceClass ) ) {"
        },
        {
            "Word": ",",
            "WordID": "1104",
            "SentID": 4288,
            "TokenID": "5",
            "Context": "if ( isProxyRequired ( hostManagedClass , dependencyManagedClass ) ) {"
        },
        {
            "Word": ",",
            "WordID": "1109",
            "SentID": 4297,
            "TokenID": "8",
            "Context": "} private static boolean isProxyRequired ( ManagedClassSPI hostManagedClass , ManagedClassSPI dependencyManagedClass ) {"
        },
        {
            "Word": ",",
            "WordID": "1313",
            "SentID": 4923,
            "TokenID": "14",
            "Context": "int i = 0 , argumentsCount = Math . min ( formalParameters . length , parameters . size ( ) ) ;"
        },
        {
            "Word": ",",
            "WordID": "1336",
            "SentID": 4979,
            "TokenID": "18",
            "Context": "if ( args [ i ] != null && ! Types . isInstanceOf ( args [ i ] , formalParameters [ i ] ) ) {"
        },
        {
            "Labels": [
                "\"Punctuation Marks in Java Code\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": ",",
            "Syntactic": "comma",
            "Semantic": "arguments, function calls",
            "Description": "a collection of commas used to seperate arguemtns in a function call.",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Syntactic",
            "Q6_Answer": "None"
        }
    ],
    "325": [
        {
            "Word": "Type",
            "WordID": "13",
            "SentID": 1831,
            "TokenID": "2",
            "Context": "Field . Type . Text ) ;"
        },
        {
            "Word": "Type",
            "WordID": "14",
            "SentID": 1834,
            "TokenID": "2",
            "Context": "Field . Type . TrueFalse ) ;"
        },
        {
            "Word": "Type",
            "WordID": "15",
            "SentID": 1836,
            "TokenID": "2",
            "Context": "Field . Type . ParagraphText ) ;"
        },
        {
            "Word": "Type",
            "WordID": "16",
            "SentID": 1846,
            "TokenID": "2",
            "Context": "Field . Type . DateTime ) ;"
        },
        {
            "Word": "Type",
            "WordID": "17",
            "SentID": 1849,
            "TokenID": "2",
            "Context": "Field . Type . Decimal ) ;"
        },
        {
            "Word": "Type",
            "WordID": "18",
            "SentID": 1884,
            "TokenID": "2",
            "Context": "Field . Type . Table ) ;"
        },
        {
            "Word": "Type",
            "WordID": "19",
            "SentID": 1887,
            "TokenID": "2",
            "Context": "Field . Type . Label ) ;"
        },
        {
            "Word": "Type",
            "WordID": "21",
            "SentID": 2272,
            "TokenID": "6",
            "Context": "formFieldParam . setTypeAsEnum ( Field . Type . Text ) ;"
        },
        {
            "Word": "Type",
            "WordID": "22",
            "SentID": 2284,
            "TokenID": "6",
            "Context": "formFieldParam . setTypeAsEnum ( Field . Type . MultipleChoice ) ;"
        },
        {
            "Word": "Type",
            "WordID": "23",
            "SentID": 2290,
            "TokenID": "6",
            "Context": "formFieldParam . setTypeAsEnum ( Field . Type . Decimal ) ;"
        },
        {
            "Word": "Type",
            "WordID": "24",
            "SentID": 2303,
            "TokenID": "6",
            "Context": "formFieldParam . setTypeAsEnum ( Field . Type . Table ) ;"
        },
        {
            "Word": "Type",
            "WordID": "25",
            "SentID": 2311,
            "TokenID": "6",
            "Context": "formFieldParam . setTypeAsEnum ( Field . Type . ParagraphText ) ;"
        },
        {
            "Word": "Type",
            "WordID": "26",
            "SentID": 2362,
            "TokenID": "6",
            "Context": "formFieldParam . setTypeAsEnum ( Field . Type . TrueFalse ) ;"
        },
        {
            "Word": "Type",
            "WordID": "27",
            "SentID": 2366,
            "TokenID": "6",
            "Context": "formFieldParam . setTypeAsEnum ( Field . Type . DateTime ) ;"
        },
        {
            "Word": "Type",
            "WordID": "28",
            "SentID": 3214,
            "TokenID": "6",
            "Context": "routeFieldParam . setTypeAsEnum ( Field . Type . Text ) ;"
        },
        {
            "Word": "Type",
            "WordID": "29",
            "SentID": 3218,
            "TokenID": "6",
            "Context": "routeFieldParam . setTypeAsEnum ( Field . Type . TrueFalse ) ;"
        },
        {
            "Word": "Type",
            "WordID": "30",
            "SentID": 3221,
            "TokenID": "6",
            "Context": "routeFieldParam . setTypeAsEnum ( Field . Type . ParagraphText ) ;"
        },
        {
            "Word": "Type",
            "WordID": "31",
            "SentID": 3228,
            "TokenID": "6",
            "Context": "routeFieldParam . setTypeAsEnum ( Field . Type . MultipleChoice ) ;"
        },
        {
            "Word": "Type",
            "WordID": "32",
            "SentID": 3234,
            "TokenID": "6",
            "Context": "routeFieldParam . setTypeAsEnum ( Field . Type . DateTime ) ;"
        },
        {
            "Word": "Type",
            "WordID": "33",
            "SentID": 3239,
            "TokenID": "6",
            "Context": "routeFieldParam . setTypeAsEnum ( Field . Type . Decimal ) ;"
        },
        {
            "Word": "Type",
            "WordID": "34",
            "SentID": 3280,
            "TokenID": "4",
            "Context": "null , Field . Type . Text ) ;"
        },
        {
            "Word": "Type",
            "WordID": "35",
            "SentID": 3281,
            "TokenID": "4",
            "Context": "null , Field . Type . TrueFalse ) ;"
        },
        {
            "Word": "Type",
            "WordID": "36",
            "SentID": 3282,
            "TokenID": "2",
            "Context": "Field . Type . MultipleChoice ) ;"
        },
        {
            "Word": "Type",
            "WordID": "44",
            "SentID": 4882,
            "TokenID": "14",
            "Context": "Notification . show ( \"Error\" , ex . getLocalizedMessage ( ) , Notification . Type . ERROR_MESSAGE ) ;"
        },
        {
            "Labels": [
                "\"Data Type Definition\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "Type",
            "Syntactic": "Enum",
            "Semantic": "variable",
            "Description": "inner Enum to define Types of fields",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Syntactic",
            "Q6_Answer": "None"
        }
    ],
    "495": [
        {
            "Word": "...",
            "WordID": "8",
            "SentID": 1924,
            "TokenID": "6",
            "Context": "} public CommandResult executeCommand ( String ... commandParams ) throws IOException {"
        },
        {
            "Word": "...",
            "WordID": "10",
            "SentID": 3728,
            "TokenID": "9",
            "Context": "} public void trace ( String format , Object ... argArray ) {"
        },
        {
            "Word": "...",
            "WordID": "11",
            "SentID": 3736,
            "TokenID": "9",
            "Context": "} public void debug ( String format , Object ... argArray ) {"
        },
        {
            "Word": "...",
            "WordID": "12",
            "SentID": 3744,
            "TokenID": "9",
            "Context": "} public void info ( String format , Object ... argArray ) {"
        },
        {
            "Word": "...",
            "WordID": "13",
            "SentID": 3752,
            "TokenID": "9",
            "Context": "} public void warn ( String format , Object ... argArray ) {"
        },
        {
            "Word": "...",
            "WordID": "14",
            "SentID": 3760,
            "TokenID": "9",
            "Context": "} public void error ( String format , Object ... argArray ) {"
        },
        {
            "Word": "...",
            "WordID": "15",
            "SentID": 4318,
            "TokenID": "10",
            "Context": "} public final void setDefaultLink ( String rel , String ... hrefs ) {"
        },
        {
            "Word": "...",
            "WordID": "16",
            "SentID": 4422,
            "TokenID": "11",
            "Context": "public < T > T newInstance ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": "...",
            "WordID": "17",
            "SentID": 4502,
            "TokenID": "16",
            "Context": "public < T > T getInstance ( Class < ? super T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "...",
            "WordID": "18",
            "SentID": 4506,
            "TokenID": "14",
            "Context": "private < T > T getInstance ( ManagedClassSPI managedClass , InstanceKey instanceKey , Object ... args ) {"
        },
        {
            "Word": "...",
            "WordID": "19",
            "SentID": 4561,
            "TokenID": "11",
            "Context": "public < T > T invoke ( Object object , Object ... args ) throws AuthorizationException , IllegalArgumentException , InvocationException {"
        },
        {
            "Word": "...",
            "WordID": "20",
            "SentID": 4687,
            "TokenID": "6",
            "Context": "} public HttpSession getSession ( boolean ... create ) {"
        },
        {
            "Word": "...",
            "WordID": "21",
            "SentID": 4841,
            "TokenID": "16",
            "Context": "} public static < T > T getInstance ( Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "...",
            "WordID": "22",
            "SentID": 4843,
            "TokenID": "19",
            "Context": "} public static < T > T getInstance ( String instanceName , Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "...",
            "WordID": "23",
            "SentID": 4845,
            "TokenID": "16",
            "Context": "} public static < T > T getOptionalInstance ( Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "...",
            "WordID": "24",
            "SentID": 4868,
            "TokenID": "11",
            "Context": "public < I > I newInstance ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": "...",
            "WordID": "25",
            "SentID": 4959,
            "TokenID": "11",
            "Context": "} public Object [ ] preProcessArguments ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": "...",
            "WordID": "26",
            "SentID": 4966,
            "TokenID": "11",
            "Context": "} public Object [ ] preProcessArguments ( ManagedMethodSPI managedMethod , Object ... args ) {"
        },
        {
            "Word": "...",
            "WordID": "27",
            "SentID": 4971,
            "TokenID": "23",
            "Context": "} private static Object [ ] preProcessArguments ( ManagedClassSPI managedClass , Member member , Class < ? > [ ] formalParameters , Object ... args ) {"
        },
        {
            "Labels": [
                "I'm sorry, but you didn't provide any Java code tokens. Please provide the tokens so I can generate a concise label or theme."
            ],
            "Meaningful": "Yes",
            "Lexicographic": "...",
            "Syntactic": "Ellipses ",
            "Semantic": "function definitions, Generics",
            "Description": "variable number of arguments , many use generics.",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Syntactic",
            "Q6_Answer": "None"
        }
    ],
    "169": [
        {
            "Word": "commandParams",
            "WordID": "1",
            "SentID": 1924,
            "TokenID": "7",
            "Context": "} public CommandResult executeCommand ( String ... commandParams ) throws IOException {"
        },
        {
            "Word": "commandParams",
            "WordID": "2",
            "SentID": 1925,
            "TokenID": "2",
            "Context": "if ( commandParams == null || commandParams . length == 0 ) {"
        },
        {
            "Word": "commandParams",
            "WordID": "3",
            "SentID": 1925,
            "TokenID": "6",
            "Context": "if ( commandParams == null || commandParams . length == 0 ) {"
        },
        {
            "Word": "commandParams",
            "WordID": "4",
            "SentID": 1929,
            "TokenID": "2",
            "Context": "if ( commandParams . length == 1 ) {"
        },
        {
            "Word": "commandParams",
            "WordID": "5",
            "SentID": 1930,
            "TokenID": "10",
            "Context": "process = Runtime . getRuntime ( ) . exec ( commandParams [ 0 ] ) ;"
        },
        {
            "Word": "commandParams",
            "WordID": "6",
            "SentID": 1931,
            "TokenID": "10",
            "Context": "process = Runtime . getRuntime ( ) . exec ( commandParams ) ;"
        },
        {
            "Word": "commandParams",
            "WordID": "7",
            "SentID": 1943,
            "TokenID": "4",
            "Context": "String commandString = ( commandParams == null || commandParams . length == 0 ) ?"
        },
        {
            "Word": "commandParams",
            "WordID": "8",
            "SentID": 1943,
            "TokenID": "8",
            "Context": "String commandString = ( commandParams == null || commandParams . length == 0 ) ?"
        },
        {
            "Word": "commandParams",
            "WordID": "9",
            "SentID": 1944,
            "TokenID": "2",
            "Context": "\"<unknown>\" : commandParams [ 0 ] ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "1",
            "SentID": 3960,
            "TokenID": "12",
            "Context": "public Object [ ] read ( HttpServletRequest httpRequest , Type [ ] formalParameters ) throws IOException , IllegalArgumentException {"
        },
        {
            "Word": "formalParameters",
            "WordID": "2",
            "SentID": 3961,
            "TokenID": "2",
            "Context": "if ( formalParameters . length != 1 ) {"
        },
        {
            "Word": "formalParameters",
            "WordID": "3",
            "SentID": 3962,
            "TokenID": "2",
            "Context": "if ( formalParameters [ 0 ] instanceof ParameterizedType ) {"
        },
        {
            "Word": "formalParameters",
            "WordID": "4",
            "SentID": 3963,
            "TokenID": "12",
            "Context": "Class < ? > type = ( Class < ? > ) formalParameters [ 0 ] ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "5",
            "SentID": 3973,
            "TokenID": "17",
            "Context": "threadLocal . set ( ( Closeable ) ( arguments [ 0 ] = getUploadStream ( httpRequest , formalParameters ) ) ) ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "6",
            "SentID": 3975,
            "TokenID": "17",
            "Context": "threadLocal . set ( ( Closeable ) ( arguments [ 0 ] = getUploadStream ( httpRequest , formalParameters ) . openStream ( ) ) ) ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "7",
            "SentID": 3978,
            "TokenID": "12",
            "Context": "} private static UploadStream getUploadStream ( HttpServletRequest httpRequest , Type [ ] formalParameters ) throws IOException {"
        },
        {
            "Word": "formalParameters",
            "WordID": "8",
            "SentID": 3997,
            "TokenID": "3",
            "Context": "Type [ ] formalParameters = method . getParameterTypes ( ) ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "9",
            "SentID": 3998,
            "TokenID": "8",
            "Context": "argumentsReader = argumentsReaderFactory . getArgumentsReader ( httpRequest , formalParameters ) ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "10",
            "SentID": 3999,
            "TokenID": "11",
            "Context": "Object [ ] arguments = argumentsReader . read ( httpRequest , formalParameters ) ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "11",
            "SentID": 4585,
            "TokenID": "10",
            "Context": "public ArgumentsReader getArgumentsReader ( HttpServletRequest httpRequest , Type [ ] formalParameters ) {"
        },
        {
            "Word": "formalParameters",
            "WordID": "12",
            "SentID": 4586,
            "TokenID": "2",
            "Context": "if ( formalParameters . length == 0 ) {"
        },
        {
            "Word": "formalParameters",
            "WordID": "13",
            "SentID": 4590,
            "TokenID": "9",
            "Context": "return getArgumentsReader ( httpRequest . getContentType ( ) , formalParameters [ 0 ] ) ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "14",
            "SentID": 4627,
            "TokenID": "8",
            "Context": "Object [ ] arguments = new Object [ formalParameters . length ] ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "15",
            "SentID": 4634,
            "TokenID": "3",
            "Context": "Type parameterType = formalParameters [ argumentIndex ] ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "16",
            "SentID": 4643,
            "TokenID": "4",
            "Context": "if ( argumentIndex != formalParameters . length ) {"
        },
        {
            "Word": "formalParameters",
            "WordID": "17",
            "SentID": 4654,
            "TokenID": "14",
            "Context": "return new Object [ ] { read ( httpRequest . getInputStream ( ) , formalParameters [ 0 ] ) } ;"
        },
        {
            "Word": "queryParameters",
            "WordID": "2",
            "SentID": 4838,
            "TokenID": "1",
            "Context": "return queryParameters . getArguments ( formalParameters ) ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "18",
            "SentID": 4838,
            "TokenID": "5",
            "Context": "return queryParameters . getArguments ( formalParameters ) ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "19",
            "SentID": 4917,
            "TokenID": "10",
            "Context": "} public Object [ ] getArguments ( Type [ ] formalParameters ) {"
        },
        {
            "Word": "formalParameters",
            "WordID": "21",
            "SentID": 4923,
            "TokenID": "11",
            "Context": "int i = 0 , argumentsCount = Math . min ( formalParameters . length , parameters . size ( ) ) ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "22",
            "SentID": 4925,
            "TokenID": "18",
            "Context": "arguments [ i ] = asObject ( parameters . get ( i ) . getValue ( ) , formalParameters [ i ] ) ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "23",
            "SentID": 4926,
            "TokenID": "5",
            "Context": "for ( ; i < formalParameters . length ; ++ i ) {"
        },
        {
            "Word": "formalParameters",
            "WordID": "24",
            "SentID": 4949,
            "TokenID": "9",
            "Context": "} private static boolean isObject ( Type [ ] formalParameters ) {"
        },
        {
            "Word": "formalParameters",
            "WordID": "25",
            "SentID": 4950,
            "TokenID": "4",
            "Context": "final Type type = formalParameters [ 0 ] ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "26",
            "SentID": 4954,
            "TokenID": "14",
            "Context": "JsonReader reader = new JsonReader ( httpRequest . getInputStream ( ) , expectedStartSequence ( formalParameters ) ) ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "27",
            "SentID": 4955,
            "TokenID": "7",
            "Context": "return json . parse ( reader , formalParameters ) ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "28",
            "SentID": 4971,
            "TokenID": "20",
            "Context": "} private static Object [ ] preProcessArguments ( ManagedClassSPI managedClass , Member member , Class < ? > [ ] formalParameters , Object ... args ) {"
        },
        {
            "Word": "formalParameters",
            "WordID": "29",
            "SentID": 4973,
            "TokenID": "5",
            "Context": "args = new Object [ formalParameters . length ] ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "30",
            "SentID": 4974,
            "TokenID": "9",
            "Context": "args [ i ] = getDependencyValue ( managedClass , formalParameters [ i ] ) ;"
        },
        {
            "Word": "formalParameters",
            "WordID": "31",
            "SentID": 4975,
            "TokenID": "9",
            "Context": "if ( args [ 0 ] instanceof VarArgs && formalParameters . length == 1 && formalParameters [ 0 ] . isArray ( ) ) {"
        },
        {
            "Word": "formalParameters",
            "WordID": "32",
            "SentID": 4975,
            "TokenID": "15",
            "Context": "if ( args [ 0 ] instanceof VarArgs && formalParameters . length == 1 && formalParameters [ 0 ] . isArray ( ) ) {"
        },
        {
            "Word": "formalParameters",
            "WordID": "33",
            "SentID": 4977,
            "TokenID": "2",
            "Context": "if ( formalParameters . length != args . length ) {"
        },
        {
            "Word": "formalParameters",
            "WordID": "34",
            "SentID": 4978,
            "TokenID": "9",
            "Context": "for ( int i = 0 ; i < formalParameters . length ; ++ i ) {"
        },
        {
            "Word": "formalParameters",
            "WordID": "35",
            "SentID": 4979,
            "TokenID": "19",
            "Context": "if ( args [ i ] != null && ! Types . isInstanceOf ( args [ i ] , formalParameters [ i ] ) ) {"
        },
        {
            "Labels": [
                "\"Parameter Handling in Java\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "Parameters, Params",
            "Syntactic": "variables",
            "Description": "variables with \"params\" and \"parameters\" as substrings",
            "Semantic": "",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Lexicographic",
            "Q6_Answer": "None"
        }
    ],
    "444": [
        {
            "Word": "fieldWithName",
            "WordID": "2",
            "SentID": 1999,
            "TokenID": "2",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValue ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "3",
            "SentID": 1999,
            "TokenID": "9",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValue ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "4",
            "SentID": 2001,
            "TokenID": "2",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsString ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "5",
            "SentID": 2001,
            "TokenID": "9",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsString ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "6",
            "SentID": 2003,
            "TokenID": "2",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsTableField ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "7",
            "SentID": 2003,
            "TokenID": "9",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsTableField ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "8",
            "SentID": 2004,
            "TokenID": "2",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsMultiChoice ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "9",
            "SentID": 2004,
            "TokenID": "9",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsMultiChoice ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "10",
            "SentID": 2006,
            "TokenID": "2",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsDate ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "11",
            "SentID": 2006,
            "TokenID": "9",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsDate ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "12",
            "SentID": 2008,
            "TokenID": "2",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsBoolean ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "13",
            "SentID": 2008,
            "TokenID": "9",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsBoolean ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "14",
            "SentID": 2010,
            "TokenID": "2",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsDouble ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "15",
            "SentID": 2010,
            "TokenID": "9",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsDouble ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "16",
            "SentID": 2012,
            "TokenID": "2",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsInteger ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "17",
            "SentID": 2012,
            "TokenID": "9",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsInteger ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "18",
            "SentID": 2014,
            "TokenID": "2",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsLong ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "19",
            "SentID": 2014,
            "TokenID": "9",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsLong ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "20",
            "SentID": 2016,
            "TokenID": "2",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsNumber ( ) ;"
        },
        {
            "Word": "fieldWithName",
            "WordID": "21",
            "SentID": 2016,
            "TokenID": "9",
            "Context": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsNumber ( ) ;"
        },
        {
            "Labels": [
                "\"Accessing Field by Name\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "fieldWithName",
            "Syntactic": "Variable",
            "Semantic": "return values, ternary operator",
            "Description": "variables called \"fieldWithName\" all being compared with null and having a getter called on them in a ternary operator ",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Lexicographic",
            "Q6_Answer": "None"
        }
    ],
    "384": [
        {
            "Word": "FieldMetaData",
            "WordID": "5",
            "SentID": 2273,
            "TokenID": "4",
            "Context": "formFieldParam . setTypeMetaData ( FieldMetaData . Text . MASKED . concat ( maskValueParam ) ) ;"
        },
        {
            "Word": "FieldMetaData",
            "WordID": "6",
            "SentID": 2279,
            "TokenID": "4",
            "Context": "formFieldParam . setTypeMetaData ( FieldMetaData . Text . BARCODE . concat ( barcodeTypeParam ) ) ;"
        },
        {
            "Word": "FieldMetaData",
            "WordID": "7",
            "SentID": 2285,
            "TokenID": "4",
            "Context": "formFieldParam . setTypeMetaData ( FieldMetaData . MultiChoice . PLAIN ) ;"
        },
        {
            "Word": "FieldMetaData",
            "WordID": "10",
            "SentID": 2312,
            "TokenID": "4",
            "Context": "formFieldParam . setTypeMetaData ( FieldMetaData . ParagraphText . PLAIN ) ;"
        },
        {
            "Word": "FieldMetaData",
            "WordID": "13",
            "SentID": 2363,
            "TokenID": "4",
            "Context": "formFieldParam . setTypeMetaData ( FieldMetaData . TrueFalse . TRUE_FALSE ) ;"
        },
        {
            "Word": "FieldMetaData",
            "WordID": "14",
            "SentID": 2367,
            "TokenID": "4",
            "Context": "formFieldParam . setTypeMetaData ( FieldMetaData . DateTime . DATE_AND_TIME ) ;"
        },
        {
            "Word": "FieldMetaData",
            "WordID": "15",
            "SentID": 2369,
            "TokenID": "4",
            "Context": "formFieldParam . setTypeMetaData ( FieldMetaData . Decimal . PLAIN ) ;"
        },
        {
            "Word": "FieldMetaData",
            "WordID": "16",
            "SentID": 2374,
            "TokenID": "4",
            "Context": "formFieldParam . setTypeMetaData ( FieldMetaData . DateTime . DATE ) ;"
        },
        {
            "Word": "FieldMetaData",
            "WordID": "17",
            "SentID": 3215,
            "TokenID": "4",
            "Context": "routeFieldParam . setTypeMetaData ( FieldMetaData . Text . PLAIN ) ;"
        },
        {
            "Word": "FieldMetaData",
            "WordID": "18",
            "SentID": 3219,
            "TokenID": "4",
            "Context": "routeFieldParam . setTypeMetaData ( FieldMetaData . TrueFalse . TRUE_FALSE ) ;"
        },
        {
            "Word": "FieldMetaData",
            "WordID": "19",
            "SentID": 3222,
            "TokenID": "4",
            "Context": "routeFieldParam . setTypeMetaData ( FieldMetaData . ParagraphText . PLAIN ) ;"
        },
        {
            "Word": "FieldMetaData",
            "WordID": "20",
            "SentID": 3224,
            "TokenID": "4",
            "Context": "routeFieldParam . setTypeMetaData ( FieldMetaData . ParagraphText . HTML ) ;"
        },
        {
            "Word": "FieldMetaData",
            "WordID": "21",
            "SentID": 3229,
            "TokenID": "4",
            "Context": "routeFieldParam . setTypeMetaData ( FieldMetaData . MultiChoice . PLAIN ) ;"
        },
        {
            "Word": "FieldMetaData",
            "WordID": "22",
            "SentID": 3232,
            "TokenID": "4",
            "Context": "routeFieldParam . setTypeMetaData ( FieldMetaData . MultiChoice . SELECT_MANY ) ;"
        },
        {
            "Word": "FieldMetaData",
            "WordID": "23",
            "SentID": 3235,
            "TokenID": "4",
            "Context": "routeFieldParam . setTypeMetaData ( FieldMetaData . DateTime . DATE ) ;"
        },
        {
            "Word": "FieldMetaData",
            "WordID": "24",
            "SentID": 3237,
            "TokenID": "4",
            "Context": "routeFieldParam . setTypeMetaData ( FieldMetaData . DateTime . DATE_AND_TIME ) ;"
        },
        {
            "Word": "FieldMetaData",
            "WordID": "25",
            "SentID": 3240,
            "TokenID": "4",
            "Context": "routeFieldParam . setTypeMetaData ( FieldMetaData . Decimal . PLAIN ) ;"
        },
        {
            "Labels": [
                "\"Metadata Management in Java Fields\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "FieldMetaData",
            "Syntactic": "object, argument",
            "Semantic": "Function Calls, Arguments, Setters",
            "Description": "Objects called \"FieldMetaData\" that object that is used in obtaining a value for an argument to a setter method.",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "212": [
        {
            "Word": "Field",
            "WordID": "64",
            "SentID": 2306,
            "TokenID": "2",
            "Context": "} public Field updateFieldTextMasked ( Field formFieldParam , String maskValueParam )"
        },
        {
            "Word": "Field",
            "WordID": "65",
            "SentID": 2306,
            "TokenID": "5",
            "Context": "} public Field updateFieldTextMasked ( Field formFieldParam , String maskValueParam )"
        },
        {
            "Word": "Field",
            "WordID": "67",
            "SentID": 2309,
            "TokenID": "2",
            "Context": "} public Field updateFieldTextBarcode ( Field formFieldParam , String barcodeTypeParam )"
        },
        {
            "Word": "Field",
            "WordID": "68",
            "SentID": 2309,
            "TokenID": "5",
            "Context": "} public Field updateFieldTextBarcode ( Field formFieldParam , String barcodeTypeParam )"
        },
        {
            "Word": "Field",
            "WordID": "69",
            "SentID": 2310,
            "TokenID": "2",
            "Context": "} public Field updateFieldParagraphTextPlain ( Field formFieldParam )"
        },
        {
            "Word": "Field",
            "WordID": "70",
            "SentID": 2310,
            "TokenID": "5",
            "Context": "} public Field updateFieldParagraphTextPlain ( Field formFieldParam )"
        },
        {
            "Word": "Field",
            "WordID": "86",
            "SentID": 2361,
            "TokenID": "2",
            "Context": "} public Field createFieldTrueFalse ( Field formFieldParam )"
        },
        {
            "Word": "Field",
            "WordID": "87",
            "SentID": 2361,
            "TokenID": "5",
            "Context": "} public Field createFieldTrueFalse ( Field formFieldParam )"
        },
        {
            "Word": "Field",
            "WordID": "89",
            "SentID": 2365,
            "TokenID": "2",
            "Context": "} public Field createFieldDateTimeDateAndTime ( Field formFieldParam )"
        },
        {
            "Word": "Field",
            "WordID": "90",
            "SentID": 2365,
            "TokenID": "5",
            "Context": "} public Field createFieldDateTimeDateAndTime ( Field formFieldParam )"
        },
        {
            "Word": "Field",
            "WordID": "92",
            "SentID": 2368,
            "TokenID": "2",
            "Context": "} public Field createFieldDecimalPlain ( Field formFieldParam )"
        },
        {
            "Word": "Field",
            "WordID": "93",
            "SentID": 2368,
            "TokenID": "5",
            "Context": "} public Field createFieldDecimalPlain ( Field formFieldParam )"
        },
        {
            "Word": "Field",
            "WordID": "94",
            "SentID": 2370,
            "TokenID": "2",
            "Context": "} public Field updateFieldTrueFalse ( Field formFieldParam )"
        },
        {
            "Word": "Field",
            "WordID": "95",
            "SentID": 2370,
            "TokenID": "5",
            "Context": "} public Field updateFieldTrueFalse ( Field formFieldParam )"
        },
        {
            "Word": "Field",
            "WordID": "96",
            "SentID": 2373,
            "TokenID": "2",
            "Context": "} public Field updateFieldDateTimeDate ( Field formFieldParam )"
        },
        {
            "Word": "Field",
            "WordID": "97",
            "SentID": 2373,
            "TokenID": "5",
            "Context": "} public Field updateFieldDateTimeDate ( Field formFieldParam )"
        },
        {
            "Word": "Field",
            "WordID": "99",
            "SentID": 2375,
            "TokenID": "5",
            "Context": "} public Field updateFieldValue ( Field userFieldValueParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "106",
            "SentID": 2497,
            "TokenID": "5",
            "Context": "} public Field updateFieldValue ( Field globalFieldValueParam )"
        },
        {
            "Word": "Field",
            "WordID": "120",
            "SentID": 3210,
            "TokenID": "2",
            "Context": "} public Field createFieldTextPlain ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "121",
            "SentID": 3210,
            "TokenID": "5",
            "Context": "} public Field createFieldTextPlain ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "123",
            "SentID": 3217,
            "TokenID": "2",
            "Context": "} public Field createFieldTrueFalse ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "124",
            "SentID": 3217,
            "TokenID": "5",
            "Context": "} public Field createFieldTrueFalse ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "126",
            "SentID": 3220,
            "TokenID": "2",
            "Context": "} public Field createFieldParagraphTextPlain ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "127",
            "SentID": 3220,
            "TokenID": "5",
            "Context": "} public Field createFieldParagraphTextPlain ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "129",
            "SentID": 3223,
            "TokenID": "2",
            "Context": "} public Field createFieldParagraphTextHTML ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "130",
            "SentID": 3223,
            "TokenID": "5",
            "Context": "} public Field createFieldParagraphTextHTML ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "134",
            "SentID": 3233,
            "TokenID": "2",
            "Context": "} public Field createFieldDateTimeDate ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "135",
            "SentID": 3233,
            "TokenID": "5",
            "Context": "} public Field createFieldDateTimeDate ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "137",
            "SentID": 3236,
            "TokenID": "2",
            "Context": "} public Field createFieldDateTimeDateAndTime ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "138",
            "SentID": 3236,
            "TokenID": "5",
            "Context": "} public Field createFieldDateTimeDateAndTime ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "139",
            "SentID": 3238,
            "TokenID": "2",
            "Context": "} public Field createFieldDecimalPlain ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "140",
            "SentID": 3238,
            "TokenID": "5",
            "Context": "} public Field createFieldDecimalPlain ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "142",
            "SentID": 3241,
            "TokenID": "2",
            "Context": "} public Field updateFieldTextPlain ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "143",
            "SentID": 3241,
            "TokenID": "5",
            "Context": "} public Field updateFieldTextPlain ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "144",
            "SentID": 3243,
            "TokenID": "2",
            "Context": "} public Field updateFieldTrueFalse ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "145",
            "SentID": 3243,
            "TokenID": "5",
            "Context": "} public Field updateFieldTrueFalse ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "146",
            "SentID": 3244,
            "TokenID": "2",
            "Context": "} public Field updateFieldParagraphTextPlain ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "147",
            "SentID": 3244,
            "TokenID": "5",
            "Context": "} public Field updateFieldParagraphTextPlain ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "148",
            "SentID": 3245,
            "TokenID": "2",
            "Context": "} public Field updateFieldParagraphTextHTML ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "149",
            "SentID": 3245,
            "TokenID": "5",
            "Context": "} public Field updateFieldParagraphTextHTML ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "150",
            "SentID": 3246,
            "TokenID": "2",
            "Context": "} public Field updateFieldDateTimeDate ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "151",
            "SentID": 3246,
            "TokenID": "5",
            "Context": "} public Field updateFieldDateTimeDate ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "152",
            "SentID": 3247,
            "TokenID": "2",
            "Context": "} public Field updateFieldDateTimeDateAndTime ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "153",
            "SentID": 3247,
            "TokenID": "5",
            "Context": "} public Field updateFieldDateTimeDateAndTime ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "154",
            "SentID": 3248,
            "TokenID": "2",
            "Context": "} public Field updateFieldDecimalPlain ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "155",
            "SentID": 3248,
            "TokenID": "5",
            "Context": "} public Field updateFieldDecimalPlain ( Field routeFieldParam ) {"
        },
        {
            "Word": "Field",
            "WordID": "157",
            "SentID": 3249,
            "TokenID": "5",
            "Context": "} public Field updateFieldValue ( Field routeFieldValueParam ) {"
        },
        {
            "Labels": [
                "\"Java Field Declaration\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "Field",
            "Syntactic": "Datatype Keyword",
            "Semantic": "Function Definition, Arguments",
            "Description": "Field datatype keyword used to denote return value type and parameter type",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Syntactic",
            "Q6_Answer": "None"
        }
    ],
    "209": [
        {
            "Word": "ImmutableOpenMap",
            "WordID": "1",
            "SentID": 2403,
            "TokenID": "4",
            "Context": "if ( obj instanceof ImmutableOpenMap ) {"
        },
        {
            "Word": "HashMap",
            "WordID": "2",
            "SentID": 2569,
            "TokenID": "2",
            "Context": "return new HashMap < > ( LOCAL_MAPPING ) ;"
        },
        {
            "Word": "concreteElementsMap",
            "WordID": "1",
            "SentID": 3394,
            "TokenID": "9",
            "Context": "Map < String , List < NamedConcreteElement > > concreteElementsMap ="
        },
        {
            "Word": "concreteElementsMap",
            "WordID": "2",
            "SentID": 3399,
            "TokenID": "8",
            "Context": "unsolvedElements . forEach ( unsolvedElement -> replaceUnsolvedReference ( concreteElementsMap , unsolvedElement ) ) ;"
        },
        {
            "Word": "concreteElementsMap",
            "WordID": "3",
            "SentID": 3400,
            "TokenID": "14",
            "Context": "} private void replaceUnsolvedReference ( Map < String , List < NamedConcreteElement > > concreteElementsMap , UnsolvedReference unsolvedReference ) {"
        },
        {
            "Word": "concreteElementsMap",
            "WordID": "4",
            "SentID": 3401,
            "TokenID": "6",
            "Context": "List < NamedConcreteElement > concreteElements = concreteElementsMap . get ( unsolvedReference . getRef ( ) ) ;"
        },
        {
            "Word": "parserUnsolvedElementsMap",
            "WordID": "1",
            "SentID": 3413,
            "TokenID": "2",
            "Context": "if ( parserUnsolvedElementsMap . isEmpty ( ) ) {"
        },
        {
            "Word": "parserUnsolvedElementsMap",
            "WordID": "2",
            "SentID": 3414,
            "TokenID": "0",
            "Context": "parserUnsolvedElementsMap . add ( new UnsolvedReferenceItem ( unsolvedReference ) ) ;"
        },
        {
            "Word": "parserUnsolvedElementsMap",
            "WordID": "3",
            "SentID": 3416,
            "TokenID": "0",
            "Context": "parserUnsolvedElementsMap . stream ( )"
        },
        {
            "Word": "attributesMap",
            "WordID": "1",
            "SentID": 3505,
            "TokenID": "2",
            "Context": "if ( attributesMap . containsKey ( REF_TAG ) && ( simpleType != null || form != null || type != null ) ) {"
        },
        {
            "Word": "attributesMap",
            "WordID": "2",
            "SentID": 3517,
            "TokenID": "6",
            "Context": "if ( parent instanceof XsdSchema && attributesMap . containsKey ( FORM_TAG ) ) {"
        },
        {
            "Word": "attributesMap",
            "WordID": "3",
            "SentID": 3518,
            "TokenID": "6",
            "Context": "if ( parent instanceof XsdSchema && attributesMap . containsKey ( REF_TAG ) ) {"
        },
        {
            "Word": "convertNodeMap",
            "WordID": "1",
            "SentID": 3544,
            "TokenID": "9",
            "Context": "} protected static Map < String , String > convertNodeMap ( NamedNodeMap nodeMap ) {"
        },
        {
            "Word": "nodeMap",
            "WordID": "2",
            "SentID": 3546,
            "TokenID": "9",
            "Context": "for ( int i = 0 ; i < nodeMap . getLength ( ) ; i ++ ) {"
        },
        {
            "Word": "nodeMap",
            "WordID": "3",
            "SentID": 3547,
            "TokenID": "3",
            "Context": "Node node = nodeMap . item ( i ) ;"
        },
        {
            "Word": "loggerMap",
            "WordID": "1",
            "SentID": 3719,
            "TokenID": "3",
            "Context": "Logger logger = loggerMap . get ( tag ) ;"
        },
        {
            "Word": "loggerMap",
            "WordID": "2",
            "SentID": 3722,
            "TokenID": "3",
            "Context": "Logger oldInstance = loggerMap . putIfAbsent ( tag , newInstance ) ;"
        },
        {
            "Word": "templateMap",
            "WordID": "1",
            "SentID": 3939,
            "TokenID": "2",
            "Context": "this . templateMap . put ( dataBaseId , new JdbcTemplate ( dataSource ) ) ;"
        },
        {
            "Word": "cronMethodsPool",
            "WordID": "1",
            "SentID": 4141,
            "TokenID": "0",
            "Context": "cronMethodsPool . add ( managedMethod ) ;"
        },
        {
            "Word": "methodsPool",
            "WordID": "1",
            "SentID": 4144,
            "TokenID": "0",
            "Context": "methodsPool . put ( interfaceMethod , managedMethod ) ;"
        },
        {
            "Word": "netMethodsPool",
            "WordID": "1",
            "SentID": 4145,
            "TokenID": "8",
            "Context": "if ( managedMethod . isRemotelyAccessible ( ) && netMethodsPool . put ( method . getName ( ) , managedMethod ) != null ) {"
        },
        {
            "Word": "unmodifiableMap",
            "WordID": "1",
            "SentID": 4375,
            "TokenID": "4",
            "Context": "this . links = unmodifiableMap ( links ) ;"
        },
        {
            "Word": "unmodifiableMap",
            "WordID": "2",
            "SentID": 4376,
            "TokenID": "4",
            "Context": "this . linkTemplates = unmodifiableMap ( linkTemplates ) ;"
        },
        {
            "Word": "HashMap",
            "WordID": "10",
            "SentID": 4408,
            "TokenID": "9",
            "Context": "map . put ( key , value = new HashMap < > ( ) ) ;"
        },
        {
            "Word": "classesPool",
            "WordID": "1",
            "SentID": 4469,
            "TokenID": "0",
            "Context": "classesPool . put ( interfaceClass , managedClass ) ;"
        },
        {
            "Word": "classesPool",
            "WordID": "2",
            "SentID": 4474,
            "TokenID": "3",
            "Context": "ManagedClassSPI appContext = classesPool . get ( AppContext . class ) ;"
        },
        {
            "Word": "classesPool",
            "WordID": "3",
            "SentID": 4481,
            "TokenID": "5",
            "Context": "for ( ManagedClassSPI managedClass : classesPool . values ( ) ) {"
        },
        {
            "Word": "classesPool",
            "WordID": "4",
            "SentID": 4498,
            "TokenID": "0",
            "Context": "classesPool . clear ( ) ;"
        },
        {
            "Word": "classesPool",
            "WordID": "5",
            "SentID": 4503,
            "TokenID": "3",
            "Context": "ManagedClassSPI managedClass = classesPool . get ( interfaceClass ) ;"
        },
        {
            "Word": "instancesPool",
            "WordID": "1",
            "SentID": 4990,
            "TokenID": "0",
            "Context": "instancesPool . put ( instanceKey , instance ) ;"
        },
        {
            "Labels": [
                "\"Management and Manipulation of Various Data Maps and Pools in Java\""
            ],
            "Meaningful": "I don't know",
            "Lexicographic": "Map, Pool",
            "Syntactic": "identifiers",
            "Description": "miscelanous identifiers",
            "Semantic": "",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "385": [
        {
            "Word": "getNewHandlerInstance",
            "WordID": "1",
            "SentID": 2722,
            "TokenID": "10",
            "Context": "this . messageHandler . put ( returnVal , this . getNewHandlerInstance ( ) ) ;"
        },
        {
            "Word": "oldInstance",
            "WordID": "1",
            "SentID": 3722,
            "TokenID": "1",
            "Context": "Logger oldInstance = loggerMap . putIfAbsent ( tag , newInstance ) ;"
        },
        {
            "Word": "newInstance",
            "WordID": "4",
            "SentID": 3722,
            "TokenID": "9",
            "Context": "Logger oldInstance = loggerMap . putIfAbsent ( tag , newInstance ) ;"
        },
        {
            "Word": "oldInstance",
            "WordID": "2",
            "SentID": 3723,
            "TokenID": "2",
            "Context": "logger = oldInstance == null ? newInstance : oldInstance ;"
        },
        {
            "Word": "newInstance",
            "WordID": "5",
            "SentID": 3723,
            "TokenID": "6",
            "Context": "logger = oldInstance == null ? newInstance : oldInstance ;"
        },
        {
            "Word": "oldInstance",
            "WordID": "3",
            "SentID": 3723,
            "TokenID": "8",
            "Context": "logger = oldInstance == null ? newInstance : oldInstance ;"
        },
        {
            "Word": "postProcessInstance",
            "WordID": "1",
            "SentID": 3949,
            "TokenID": "2",
            "Context": "public void postProcessInstance ( ManagedClassSPI managedClass , Object instance ) {"
        },
        {
            "Word": "newProxyInstance",
            "WordID": "1",
            "SentID": 4290,
            "TokenID": "3",
            "Context": "return Proxy . newProxyInstance ( dependencyManagedClass . getImplementationClass ( ) . getClassLoader ( ) , dependencyManagedClass . getInterfaceClasses ( ) , handler ) ;"
        },
        {
            "Word": "getOptionalInstance",
            "WordID": "1",
            "SentID": 4291,
            "TokenID": "5",
            "Context": "Object value = container . getOptionalInstance ( ( Class < ? super Object > ) type ) ;"
        },
        {
            "Word": "newInstance",
            "WordID": "7",
            "SentID": 4295,
            "TokenID": "3",
            "Context": "return Classes . newInstance ( type ) ;"
        },
        {
            "Word": "newInstance",
            "WordID": "8",
            "SentID": 4422,
            "TokenID": "5",
            "Context": "public < T > T newInstance ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": "getRemoteInstance",
            "WordID": "1",
            "SentID": 4423,
            "TokenID": "1",
            "Context": "return getRemoteInstance ( managedClass . getImplementationURL ( ) , ( Class < ? super T > ) managedClass . getInterfaceClass ( ) ) ;"
        },
        {
            "Word": "getRemoteInstance",
            "WordID": "2",
            "SentID": 4424,
            "TokenID": "5",
            "Context": "public < T > T getRemoteInstance ( String implementationURL , Class < ? super T > interfaceClass ) throws UnsupportedProtocolException {"
        },
        {
            "Word": "getRemoteInstance",
            "WordID": "3",
            "SentID": 4429,
            "TokenID": "3",
            "Context": "return remoteFactory . getRemoteInstance ( implementationURL , interfaceClass ) ;"
        },
        {
            "Word": "persistInstance",
            "WordID": "1",
            "SentID": 4476,
            "TokenID": "9",
            "Context": "scopeFactories . get ( InstanceScope . APPLICATION ) . persistInstance ( new InstanceKey ( appContext . getKey ( ) ) , this ) ;"
        },
        {
            "Word": "getInstance",
            "WordID": "10",
            "SentID": 4485,
            "TokenID": "0",
            "Context": "getInstance ( ( Class < ? super Object > ) managedClass . getInterfaceClass ( ) ) ;"
        },
        {
            "Word": "managedInstance",
            "WordID": "2",
            "SentID": 4494,
            "TokenID": "0",
            "Context": "managedInstance . preDestroy ( ) ;"
        },
        {
            "Word": "getInstance",
            "WordID": "12",
            "SentID": 4502,
            "TokenID": "5",
            "Context": "public < T > T getInstance ( Class < ? super T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "getInstance",
            "WordID": "13",
            "SentID": 4505,
            "TokenID": "1",
            "Context": "return getInstance ( managedClass , instanceKey , args ) ;"
        },
        {
            "Word": "getInstance",
            "WordID": "14",
            "SentID": 4506,
            "TokenID": "5",
            "Context": "private < T > T getInstance ( ManagedClassSPI managedClass , InstanceKey instanceKey , Object ... args ) {"
        },
        {
            "Word": "persistInstance",
            "WordID": "2",
            "SentID": 4516,
            "TokenID": "2",
            "Context": "scopeFactory . persistInstance ( instanceKey , instance ) ;"
        },
        {
            "Word": "pojoInstance",
            "WordID": "1",
            "SentID": 4519,
            "TokenID": "1",
            "Context": "Object pojoInstance = null ;"
        },
        {
            "Word": "pojoInstance",
            "WordID": "2",
            "SentID": 4523,
            "TokenID": "0",
            "Context": "pojoInstance = handler . getWrappedInstance ( ) ;"
        },
        {
            "Word": "getWrappedInstance",
            "WordID": "1",
            "SentID": 4523,
            "TokenID": "4",
            "Context": "pojoInstance = handler . getWrappedInstance ( ) ;"
        },
        {
            "Word": "pojoInstance",
            "WordID": "3",
            "SentID": 4524,
            "TokenID": "0",
            "Context": "pojoInstance = instance ;"
        },
        {
            "Word": "pojoInstance",
            "WordID": "4",
            "SentID": 4525,
            "TokenID": "2",
            "Context": "if ( pojoInstance != null ) {"
        },
        {
            "Word": "postProcessInstance",
            "WordID": "2",
            "SentID": 4527,
            "TokenID": "2",
            "Context": "instanceProcessor . postProcessInstance ( managedClass , pojoInstance ) ;"
        },
        {
            "Word": "pojoInstance",
            "WordID": "5",
            "SentID": 4527,
            "TokenID": "6",
            "Context": "instanceProcessor . postProcessInstance ( managedClass , pojoInstance ) ;"
        },
        {
            "Word": "newProxyInstance",
            "WordID": "2",
            "SentID": 4832,
            "TokenID": "6",
            "Context": "return ( T ) Proxy . newProxyInstance ( classLoader , interfaceClasses , handler ) ;"
        },
        {
            "Word": "getInstance",
            "WordID": "22",
            "SentID": 4841,
            "TokenID": "7",
            "Context": "} public static < T > T getInstance ( Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "getInstance",
            "WordID": "24",
            "SentID": 4843,
            "TokenID": "7",
            "Context": "} public static < T > T getInstance ( String instanceName , Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "getOptionalInstance",
            "WordID": "2",
            "SentID": 4845,
            "TokenID": "7",
            "Context": "} public static < T > T getOptionalInstance ( Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "getOptionalInstance",
            "WordID": "3",
            "SentID": 4846,
            "TokenID": "5",
            "Context": "return getAppFactory ( ) . getOptionalInstance ( interfaceClass , args ) ;"
        },
        {
            "Word": "getRemoteInstance",
            "WordID": "4",
            "SentID": 4847,
            "TokenID": "7",
            "Context": "} public static < T > T getRemoteInstance ( String implementationURL , Class < ? super T > interfaceClass ) {"
        },
        {
            "Word": "getRemoteInstance",
            "WordID": "5",
            "SentID": 4848,
            "TokenID": "5",
            "Context": "return getAppFactory ( ) . getRemoteInstance ( implementationURL , interfaceClass ) ;"
        },
        {
            "Word": "newInstance",
            "WordID": "12",
            "SentID": 4868,
            "TokenID": "5",
            "Context": "public < I > I newInstance ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": "newInstance",
            "WordID": "14",
            "SentID": 4919,
            "TokenID": "5",
            "Context": "Object object = Classes . newInstance ( type ) ;"
        },
        {
            "Word": "getInstance",
            "WordID": "26",
            "SentID": 4986,
            "TokenID": "5",
            "Context": "Closeable closeable = StreamFactory . getInstance ( inputStream , type ) ;"
        },
        {
            "Word": "persistInstance",
            "WordID": "3",
            "SentID": 4989,
            "TokenID": "2",
            "Context": "public void persistInstance ( InstanceKey instanceKey , Object instance ) {"
        },
        {
            "Labels": [
                "\"Instance Management and Processing in Java\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "Instance",
            "Syntactic": "method, variable",
            "Semantic": "Configuration",
            "Description": "methods and variables with \"Instance\" in the name, many used for configuration",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "349": [
        {
            "Word": "?",
            "WordID": "42",
            "SentID": 2754,
            "TokenID": "2",
            "Context": "List < ? extends ABaseFluidJSONObject > returnValue ="
        },
        {
            "Word": "?",
            "WordID": "49",
            "SentID": 3641,
            "TokenID": "7",
            "Context": "} private Object resolve ( Class < ? > targetType , Random annotation ) {"
        },
        {
            "Word": "?",
            "WordID": "52",
            "SentID": 3952,
            "TokenID": "2",
            "Context": "Class < ? > [ ] interfaceClasses = managedClass . getInterfaceClasses ( ) ;"
        },
        {
            "Word": "?",
            "WordID": "53",
            "SentID": 3963,
            "TokenID": "2",
            "Context": "Class < ? > type = ( Class < ? > ) formalParameters [ 0 ] ;"
        },
        {
            "Word": "?",
            "WordID": "54",
            "SentID": 3963,
            "TokenID": "9",
            "Context": "Class < ? > type = ( Class < ? > ) formalParameters [ 0 ] ;"
        },
        {
            "Word": "?",
            "WordID": "55",
            "SentID": 4084,
            "TokenID": "2",
            "Context": "Class < ? extends Interceptor > classInterceptor = getInterceptorClass ( implementationClass ) ;"
        },
        {
            "Word": "?",
            "WordID": "56",
            "SentID": 4097,
            "TokenID": "2",
            "Context": "Class < ? extends Interceptor > methodInterceptor = getInterceptorClass ( method ) ;"
        },
        {
            "Word": "?",
            "WordID": "59",
            "SentID": 4150,
            "TokenID": "4",
            "Context": "} private Class < ? > loadImplementationClass ( Config descriptor ) throws ConfigException {"
        },
        {
            "Word": "?",
            "WordID": "60",
            "SentID": 4155,
            "TokenID": "2",
            "Context": "Class < ? > implementationClass = Classes . forOptionalName ( implementationName ) ;"
        },
        {
            "Word": "?",
            "WordID": "61",
            "SentID": 4162,
            "TokenID": "4",
            "Context": "} private Class < ? > [ ] loadInterfaceClasses ( Config descriptor ) throws ConfigException {"
        },
        {
            "Word": "?",
            "WordID": "62",
            "SentID": 4167,
            "TokenID": "4",
            "Context": "return new Class < ? > [ ] { implementationClass } ;"
        },
        {
            "Word": "?",
            "WordID": "63",
            "SentID": 4177,
            "TokenID": "2",
            "Context": "Class < ? > [ ] interfaceClasses = new Class < ? > [ interfaceNames . size ( ) ] ;"
        },
        {
            "Word": "?",
            "WordID": "64",
            "SentID": 4177,
            "TokenID": "11",
            "Context": "Class < ? > [ ] interfaceClasses = new Class < ? > [ interfaceNames . size ( ) ] ;"
        },
        {
            "Word": "?",
            "WordID": "65",
            "SentID": 4180,
            "TokenID": "3",
            "Context": "final Class < ? > interfaceClass = Classes . forOptionalName ( interfaceName ) ;"
        },
        {
            "Word": "?",
            "WordID": "66",
            "SentID": 4199,
            "TokenID": "5",
            "Context": "} private static Constructor < ? > getDeclaredConstructor ( Class < ? > implementationClass ) {"
        },
        {
            "Word": "?",
            "WordID": "67",
            "SentID": 4199,
            "TokenID": "11",
            "Context": "} private static Constructor < ? > getDeclaredConstructor ( Class < ? > implementationClass ) {"
        },
        {
            "Word": "?",
            "WordID": "68",
            "SentID": 4200,
            "TokenID": "2",
            "Context": "Constructor < ? > [ ] declaredConstructors = ( Constructor < ? > [ ] ) implementationClass . getDeclaredConstructors ( ) ;"
        },
        {
            "Word": "?",
            "WordID": "69",
            "SentID": 4200,
            "TokenID": "11",
            "Context": "Constructor < ? > [ ] declaredConstructors = ( Constructor < ? > [ ] ) implementationClass . getDeclaredConstructors ( ) ;"
        },
        {
            "Word": "?",
            "WordID": "70",
            "SentID": 4202,
            "TokenID": "4",
            "Context": "for ( Constructor < ? > declaredConstructor : declaredConstructors ) {"
        },
        {
            "Word": "?",
            "WordID": "71",
            "SentID": 4211,
            "TokenID": "11",
            "Context": "} private static Collection < Field > scanDependencies ( Class < ? > clazz ) {"
        },
        {
            "Word": "?",
            "WordID": "72",
            "SentID": 4235,
            "TokenID": "4",
            "Context": "for ( Class < ? > interfaceClass : interfaceClasses ) {"
        },
        {
            "Word": "?",
            "WordID": "74",
            "SentID": 4242,
            "TokenID": "13",
            "Context": "} private static < T extends Annotation > T getAnnotation ( Class < ? > clazz , Class < T > annotationClass ) {"
        },
        {
            "Word": "?",
            "WordID": "75",
            "SentID": 4244,
            "TokenID": "4",
            "Context": "for ( Class < ? > interfaceClass : clazz . getInterfaces ( ) ) {"
        },
        {
            "Word": "?",
            "WordID": "76",
            "SentID": 4248,
            "TokenID": "8",
            "Context": "} private static boolean hasAnnotation ( Class < ? > clazz , Class < ? extends Annotation > annotationClass ) {"
        },
        {
            "Word": "?",
            "WordID": "77",
            "SentID": 4248,
            "TokenID": "14",
            "Context": "} private static boolean hasAnnotation ( Class < ? > clazz , Class < ? extends Annotation > annotationClass ) {"
        },
        {
            "Word": "?",
            "WordID": "78",
            "SentID": 4252,
            "TokenID": "4",
            "Context": "for ( Class < ? > interfaceClass : method . getDeclaringClass ( ) . getInterfaces ( ) ) {"
        },
        {
            "Word": "?",
            "WordID": "79",
            "SentID": 4257,
            "TokenID": "5",
            "Context": "} private static Class < ? extends Interceptor > getInterceptorClass ( Class < ? > clazz ) {"
        },
        {
            "Word": "?",
            "WordID": "80",
            "SentID": 4257,
            "TokenID": "13",
            "Context": "} private static Class < ? extends Interceptor > getInterceptorClass ( Class < ? > clazz ) {"
        },
        {
            "Word": "?",
            "WordID": "82",
            "SentID": 4260,
            "TokenID": "5",
            "Context": "} private static Class < ? extends Interceptor > getInterceptorClass ( Method method ) {"
        },
        {
            "Word": "?",
            "WordID": "83",
            "SentID": 4269,
            "TokenID": "5",
            "Context": "} private static Class < ? > type ( Field field ) {"
        },
        {
            "Word": "?",
            "WordID": "84",
            "SentID": 4271,
            "TokenID": "4",
            "Context": "return ( Class < ? > ) ( ( ParameterizedType ) field . getGenericType ( ) ) . getActualTypeArguments ( ) [ 0 ] ;"
        },
        {
            "Word": "?",
            "WordID": "85",
            "SentID": 4273,
            "TokenID": "10",
            "Context": "protected static Object getDependencyValue ( ManagedClassSPI hostManagedClass , Class < ? > type ) {"
        },
        {
            "Word": "?",
            "WordID": "86",
            "SentID": 4274,
            "TokenID": "4",
            "Context": "Stack < Class < ? > > stackTrace = dependenciesStack . get ( ) ;"
        },
        {
            "Word": "?",
            "WordID": "87",
            "SentID": 4281,
            "TokenID": "4",
            "Context": "for ( Class < ? > stackTraceClass : stackTrace ) {"
        },
        {
            "Word": "?",
            "WordID": "88",
            "SentID": 4289,
            "TokenID": "2",
            "Context": "ScopeProxyHandler < ? > handler = new ScopeProxyHandler < > ( container , type ) ;"
        },
        {
            "Word": "?",
            "WordID": "89",
            "SentID": 4291,
            "TokenID": "10",
            "Context": "Object value = container . getOptionalInstance ( ( Class < ? super Object > ) type ) ;"
        },
        {
            "Word": "?",
            "WordID": "90",
            "SentID": 4304,
            "TokenID": "10",
            "Context": "return runAsync ( scheduler , ( rx . Observer < ? super TEntity > observer , Subscription subscription ) -> {"
        },
        {
            "Word": "?",
            "WordID": "93",
            "SentID": 4423,
            "TokenID": "12",
            "Context": "return getRemoteInstance ( managedClass . getImplementationURL ( ) , ( Class < ? super T > ) managedClass . getInterfaceClass ( ) ) ;"
        },
        {
            "Word": "?",
            "WordID": "94",
            "SentID": 4424,
            "TokenID": "12",
            "Context": "public < T > T getRemoteInstance ( String implementationURL , Class < ? super T > interfaceClass ) throws UnsupportedProtocolException {"
        },
        {
            "Word": "?",
            "WordID": "95",
            "SentID": 4468,
            "TokenID": "4",
            "Context": "for ( Class < ? > interfaceClass : managedClass . getInterfaceClasses ( ) ) {"
        },
        {
            "Word": "?",
            "WordID": "96",
            "SentID": 4485,
            "TokenID": "5",
            "Context": "getInstance ( ( Class < ? super Object > ) managedClass . getInterfaceClass ( ) ) ;"
        },
        {
            "Word": "?",
            "WordID": "97",
            "SentID": 4502,
            "TokenID": "9",
            "Context": "public < T > T getInstance ( Class < ? super T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "?",
            "WordID": "98",
            "SentID": 4532,
            "TokenID": "2",
            "Context": "Class < ? > valueType = Classes . forOptionalName ( className ) ;"
        },
        {
            "Word": "?",
            "WordID": "99",
            "SentID": 4535,
            "TokenID": "2",
            "Context": "Class < ? extends Converter > converterClass = Classes . forOptionalName ( converterName ) ;"
        },
        {
            "Word": "?",
            "WordID": "100",
            "SentID": 4545,
            "TokenID": "2",
            "Context": "Class < ? > pojoClass = Classes . forOptionalName ( pojoClassName ) ;"
        },
        {
            "Word": "?",
            "WordID": "105",
            "SentID": 4805,
            "TokenID": "4",
            "Context": "( ( StreamHandler < ? > ) value ) . invokeHandler ( httpResponse . getOutputStream ( ) ) ;"
        },
        {
            "Word": "?",
            "WordID": "106",
            "SentID": 4821,
            "TokenID": "2",
            "Context": "Constructor < ? > constructor = managedClass . getConstructor ( ) ;"
        },
        {
            "Word": "?",
            "WordID": "107",
            "SentID": 4831,
            "TokenID": "3",
            "Context": "final Class < ? > [ ] interfaceClasses = managedClass . getInterfaceClasses ( ) ;"
        },
        {
            "Word": "?",
            "WordID": "108",
            "SentID": 4847,
            "TokenID": "14",
            "Context": "} public static < T > T getRemoteInstance ( String implementationURL , Class < ? super T > interfaceClass ) {"
        },
        {
            "Word": "?",
            "WordID": "109",
            "SentID": 4940,
            "TokenID": "2",
            "Context": "Class < ? > itemType = String . class ;"
        },
        {
            "Word": "?",
            "WordID": "110",
            "SentID": 4943,
            "TokenID": "5",
            "Context": "itemType = ( Class < ? > ) ( ( ParameterizedType ) type ) . getActualTypeArguments ( ) [ 0 ] ;"
        },
        {
            "Word": "?",
            "WordID": "111",
            "SentID": 4964,
            "TokenID": "3",
            "Context": "final Class < ? > [ ] types = constructor . getParameterTypes ( ) ;"
        },
        {
            "Word": "?",
            "WordID": "112",
            "SentID": 4969,
            "TokenID": "3",
            "Context": "final Class < ? > [ ] types = method . getParameterTypes ( ) ;"
        },
        {
            "Word": "?",
            "WordID": "113",
            "SentID": 4971,
            "TokenID": "16",
            "Context": "} private static Object [ ] preProcessArguments ( ManagedClassSPI managedClass , Member member , Class < ? > [ ] formalParameters , Object ... args ) {"
        },
        {
            "Word": "?",
            "WordID": "114",
            "SentID": 4976,
            "TokenID": "9",
            "Context": "args [ 0 ] = ( ( VarArgs < ? > ) args [ 0 ] ) . getArguments ( ) ;"
        },
        {
            "Word": "?",
            "WordID": "117",
            "SentID": 4995,
            "TokenID": "10",
            "Context": "public static List < PropertyDescriptor > getProperties ( Class < ? > beanType ) {"
        },
        {
            "Labels": [
                "\"Optional Chaining Operator\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "?",
            "Syntactic": "Condition Operator",
            "Semantic": "Generics, Network",
            "Description": "type safe way to refer to type as part of Generics, many related to network operations.",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Syntactic",
            "Q6_Answer": "None"
        }
    ],
    "149": [
        {
            "Word": "extends",
            "WordID": "1",
            "SentID": 2754,
            "TokenID": "3",
            "Context": "List < ? extends ABaseFluidJSONObject > returnValue ="
        },
        {
            "Word": "extends",
            "WordID": "2",
            "SentID": 3566,
            "TokenID": "5",
            "Context": "} public static < T extends XsdEnum > T belongsToEnum ( final XsdEnum < T > instance , final String value ) {"
        },
        {
            "Word": "extends",
            "WordID": "3",
            "SentID": 4084,
            "TokenID": "3",
            "Context": "Class < ? extends Interceptor > classInterceptor = getInterceptorClass ( implementationClass ) ;"
        },
        {
            "Word": "extends",
            "WordID": "4",
            "SentID": 4097,
            "TokenID": "3",
            "Context": "Class < ? extends Interceptor > methodInterceptor = getInterceptorClass ( method ) ;"
        },
        {
            "Word": "extends",
            "WordID": "5",
            "SentID": 4242,
            "TokenID": "5",
            "Context": "} private static < T extends Annotation > T getAnnotation ( Class < ? > clazz , Class < T > annotationClass ) {"
        },
        {
            "Word": "extends",
            "WordID": "6",
            "SentID": 4248,
            "TokenID": "15",
            "Context": "} private static boolean hasAnnotation ( Class < ? > clazz , Class < ? extends Annotation > annotationClass ) {"
        },
        {
            "Word": "extends",
            "WordID": "7",
            "SentID": 4250,
            "TokenID": "5",
            "Context": "} private static < T extends Annotation > T getAnnotation ( Method method , Class < T > annotationClass ) {"
        },
        {
            "Word": "extends",
            "WordID": "8",
            "SentID": 4257,
            "TokenID": "6",
            "Context": "} private static Class < ? extends Interceptor > getInterceptorClass ( Class < ? > clazz ) {"
        },
        {
            "Word": "extends",
            "WordID": "9",
            "SentID": 4260,
            "TokenID": "6",
            "Context": "} private static Class < ? extends Interceptor > getInterceptorClass ( Method method ) {"
        },
        {
            "Word": "super",
            "WordID": "4",
            "SentID": 4291,
            "TokenID": "11",
            "Context": "Object value = container . getOptionalInstance ( ( Class < ? super Object > ) type ) ;"
        },
        {
            "Word": "super",
            "WordID": "5",
            "SentID": 4304,
            "TokenID": "11",
            "Context": "return runAsync ( scheduler , ( rx . Observer < ? super TEntity > observer , Subscription subscription ) -> {"
        },
        {
            "Word": "super",
            "WordID": "6",
            "SentID": 4423,
            "TokenID": "13",
            "Context": "return getRemoteInstance ( managedClass . getImplementationURL ( ) , ( Class < ? super T > ) managedClass . getInterfaceClass ( ) ) ;"
        },
        {
            "Word": "super",
            "WordID": "7",
            "SentID": 4424,
            "TokenID": "13",
            "Context": "public < T > T getRemoteInstance ( String implementationURL , Class < ? super T > interfaceClass ) throws UnsupportedProtocolException {"
        },
        {
            "Word": "super",
            "WordID": "8",
            "SentID": 4485,
            "TokenID": "6",
            "Context": "getInstance ( ( Class < ? super Object > ) managedClass . getInterfaceClass ( ) ) ;"
        },
        {
            "Word": "super",
            "WordID": "9",
            "SentID": 4502,
            "TokenID": "10",
            "Context": "public < T > T getInstance ( Class < ? super T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "extends",
            "WordID": "10",
            "SentID": 4535,
            "TokenID": "3",
            "Context": "Class < ? extends Converter > converterClass = Classes . forOptionalName ( converterName ) ;"
        },
        {
            "Word": "super",
            "WordID": "10",
            "SentID": 4847,
            "TokenID": "15",
            "Context": "} public static < T > T getRemoteInstance ( String implementationURL , Class < ? super T > interfaceClass ) {"
        },
        {
            "Labels": [
                "\"Inheritance and Superclass Reference in Java\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "extends, super",
            "Syntactic": "keywords",
            "Semantic": "inheritance, super classes",
            "Description": "extends and super keywords related to inheritence and SuperClasses",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "55": [
        {
            "Word": "sslContext",
            "WordID": "2",
            "SentID": 3018,
            "TokenID": "3",
            "Context": "new SSLConnectionSocketFactory ( sslContext ) ) . build ( ) ;"
        },
        {
            "Word": "ParameterContext",
            "WordID": "1",
            "SentID": 3635,
            "TokenID": "0",
            "Context": "ParameterContext parameterContext , ExtensionContext extensionContext )"
        },
        {
            "Word": "parameterContext",
            "WordID": "1",
            "SentID": 3635,
            "TokenID": "1",
            "Context": "ParameterContext parameterContext , ExtensionContext extensionContext )"
        },
        {
            "Word": "ExtensionContext",
            "WordID": "1",
            "SentID": 3635,
            "TokenID": "3",
            "Context": "ParameterContext parameterContext , ExtensionContext extensionContext )"
        },
        {
            "Word": "extensionContext",
            "WordID": "1",
            "SentID": 3635,
            "TokenID": "4",
            "Context": "ParameterContext parameterContext , ExtensionContext extensionContext )"
        },
        {
            "Word": "parameterContext",
            "WordID": "2",
            "SentID": 3637,
            "TokenID": "1",
            "Context": "return parameterContext . getParameter ( ) . getAnnotation ( Random . class ) != null ;"
        },
        {
            "Word": "parameterContext",
            "WordID": "3",
            "SentID": 3639,
            "TokenID": "0",
            "Context": "parameterContext . getParameter ( ) . getType ( ) ,"
        },
        {
            "Word": "parameterContext",
            "WordID": "4",
            "SentID": 3640,
            "TokenID": "0",
            "Context": "parameterContext . getParameter ( ) . getAnnotation ( Random . class ) ) ;"
        },
        {
            "Word": "parameterContext",
            "WordID": "5",
            "SentID": 3670,
            "TokenID": "3",
            "Context": "return appliesTo ( parameterContext . getParameter ( ) . getType ( ) ) ;"
        },
        {
            "Word": "parameterContext",
            "WordID": "6",
            "SentID": 3674,
            "TokenID": "0",
            "Context": "parameterContext , key -> new TemporaryFolder ( ) , TemporaryFolder . class ) ;"
        },
        {
            "Word": "ExtensionContext",
            "WordID": "2",
            "SentID": 3683,
            "TokenID": "3",
            "Context": "} public static ExtensionContext . Store getStore ( ExtensionContext extensionContext , Class clazz ) {"
        },
        {
            "Word": "ExtensionContext",
            "WordID": "3",
            "SentID": 3683,
            "TokenID": "8",
            "Context": "} public static ExtensionContext . Store getStore ( ExtensionContext extensionContext , Class clazz ) {"
        },
        {
            "Word": "extensionContext",
            "WordID": "3",
            "SentID": 3683,
            "TokenID": "9",
            "Context": "} public static ExtensionContext . Store getStore ( ExtensionContext extensionContext , Class clazz ) {"
        },
        {
            "Word": "extensionContext",
            "WordID": "4",
            "SentID": 3684,
            "TokenID": "1",
            "Context": "return extensionContext . getStore ( namespace ( extensionContext , clazz ) ) ;"
        },
        {
            "Word": "ExtensionContext",
            "WordID": "4",
            "SentID": 3685,
            "TokenID": "3",
            "Context": "} private static ExtensionContext . Namespace namespace ("
        },
        {
            "Word": "ExtensionContext",
            "WordID": "5",
            "SentID": 3686,
            "TokenID": "0",
            "Context": "ExtensionContext extensionContext , Class clazz ) {"
        },
        {
            "Word": "extensionContext",
            "WordID": "6",
            "SentID": 3686,
            "TokenID": "1",
            "Context": "ExtensionContext extensionContext , Class clazz ) {"
        },
        {
            "Word": "ExtensionContext",
            "WordID": "6",
            "SentID": 3687,
            "TokenID": "1",
            "Context": "return ExtensionContext . Namespace . create ( clazz , extensionContext ) ;"
        },
        {
            "Word": "ExtensionContext",
            "WordID": "7",
            "SentID": 3688,
            "TokenID": "4",
            "Context": "public void beforeAll ( ExtensionContext extensionContext ) throws Exception {"
        },
        {
            "Word": "extensionContext",
            "WordID": "8",
            "SentID": 3688,
            "TokenID": "5",
            "Context": "public void beforeAll ( ExtensionContext extensionContext ) throws Exception {"
        },
        {
            "Word": "extensionContext",
            "WordID": "9",
            "SentID": 3690,
            "TokenID": "2",
            "Context": "getSystemProperties ( extensionContext . getRequiredTestClass ( ) ) ;"
        },
        {
            "Word": "ExtensionContext",
            "WordID": "8",
            "SentID": 3700,
            "TokenID": "4",
            "Context": "public void afterAll ( ExtensionContext extensionContext ) throws Exception {"
        },
        {
            "Word": "extensionContext",
            "WordID": "11",
            "SentID": 3700,
            "TokenID": "5",
            "Context": "public void afterAll ( ExtensionContext extensionContext ) throws Exception {"
        },
        {
            "Word": "restoreContext",
            "WordID": "2",
            "SentID": 3702,
            "TokenID": "2",
            "Context": "if ( restoreContext != null ) {"
        },
        {
            "Word": "restoreContext",
            "WordID": "3",
            "SentID": 3703,
            "TokenID": "0",
            "Context": "restoreContext . restore ( ) ;"
        },
        {
            "Word": "ServletContext",
            "WordID": "1",
            "SentID": 3765,
            "TokenID": "0",
            "Context": "ServletContext servletContext ,"
        },
        {
            "Word": "servletContext",
            "WordID": "1",
            "SentID": 3765,
            "TokenID": "1",
            "Context": "ServletContext servletContext ,"
        },
        {
            "Word": "ServletContext",
            "WordID": "2",
            "SentID": 3773,
            "TokenID": "4",
            "Context": "public boolean getAllowRobots ( ServletContext servletContext , HttpServletRequest request , HttpServletResponse response , Page page ) throws ServletException , IOException {"
        },
        {
            "Word": "servletContext",
            "WordID": "2",
            "SentID": 3773,
            "TokenID": "5",
            "Context": "public boolean getAllowRobots ( ServletContext servletContext , HttpServletRequest request , HttpServletResponse response , Page page ) throws ServletException , IOException {"
        },
        {
            "Word": "servletContext",
            "WordID": "3",
            "SentID": 3774,
            "TokenID": "5",
            "Context": "return PageUtils . findAllowRobots ( servletContext , request , response , page ) ;"
        },
        {
            "Word": "context",
            "WordID": "2",
            "SentID": 3991,
            "TokenID": "3",
            "Context": "HttpServletRequest httpRequest = context . getRequest ( ) ;"
        },
        {
            "Word": "context",
            "WordID": "3",
            "SentID": 3992,
            "TokenID": "3",
            "Context": "HttpServletResponse httpResponse = context . getResponse ( ) ;"
        },
        {
            "Word": "context",
            "WordID": "4",
            "SentID": 4003,
            "TokenID": "2",
            "Context": "sendUnauthorized ( context ) ;"
        },
        {
            "Word": "context",
            "WordID": "5",
            "SentID": 4004,
            "TokenID": "2",
            "Context": "sendNotFound ( context , e ) ;"
        },
        {
            "Word": "context",
            "WordID": "6",
            "SentID": 4005,
            "TokenID": "2",
            "Context": "sendBadRequest ( context ) ;"
        },
        {
            "Word": "context",
            "WordID": "7",
            "SentID": 4007,
            "TokenID": "2",
            "Context": "sendError ( context , e ) ;"
        },
        {
            "Word": "AppContext",
            "WordID": "1",
            "SentID": 4474,
            "TokenID": "7",
            "Context": "ManagedClassSPI appContext = classesPool . get ( AppContext . class ) ;"
        },
        {
            "Word": "appContext",
            "WordID": "4",
            "SentID": 4476,
            "TokenID": "14",
            "Context": "scopeFactories . get ( InstanceScope . APPLICATION ) . persistInstance ( new InstanceKey ( appContext . getKey ( ) ) , this ) ;"
        },
        {
            "Word": "context",
            "WordID": "8",
            "SentID": 4624,
            "TokenID": "4",
            "Context": "final Object value = context . getProperty ( parameterName , field . getType ( ) ) ;"
        },
        {
            "Word": "getServletContext",
            "WordID": "1",
            "SentID": 4744,
            "TokenID": "7",
            "Context": "container = ( ContainerSPI ) config . getServletContext ( ) . getAttribute ( TinyContainer . ATTR_INSTANCE ) ;"
        },
        {
            "Word": "getServletContext",
            "WordID": "2",
            "SentID": 4746,
            "TokenID": "8",
            "Context": "servletName = Strings . concat ( config . getServletContext ( ) . getServletContextName ( ) , '#' , config . getServletName ( ) ) ;"
        },
        {
            "Word": "logContext",
            "WordID": "1",
            "SentID": 4748,
            "TokenID": "0",
            "Context": "logContext . put ( LOG_CONTEXT_APP , httpRequest . getContextPath ( ) . isEmpty ( ) ? TinyContainer . ROOT_CONTEXT : httpRequest . getContextPath ( ) . substring ( 1 ) ) ;"
        },
        {
            "Word": "logContext",
            "WordID": "2",
            "SentID": 4749,
            "TokenID": "0",
            "Context": "logContext . put ( LOG_CONTEXT_IP , httpRequest . getRemoteHost ( ) ) ;"
        },
        {
            "Word": "logContext",
            "WordID": "3",
            "SentID": 4750,
            "TokenID": "0",
            "Context": "logContext . put ( LOG_CONTEXT_ID , Integer . toString ( requestID . getAndIncrement ( ) , Character . MAX_RADIX ) ) ;"
        },
        {
            "Word": "context",
            "WordID": "10",
            "SentID": 4755,
            "TokenID": "0",
            "Context": "context . attach ( httpRequest , httpResponse ) ;"
        },
        {
            "Word": "context",
            "WordID": "11",
            "SentID": 4756,
            "TokenID": "2",
            "Context": "handleRequest ( context ) ;"
        },
        {
            "Word": "context",
            "WordID": "12",
            "SentID": 4758,
            "TokenID": "2",
            "Context": "dumpError ( context , t ) ;"
        },
        {
            "Word": "logContext",
            "WordID": "4",
            "SentID": 4759,
            "TokenID": "0",
            "Context": "logContext . clear ( ) ;"
        },
        {
            "Word": "context",
            "WordID": "13",
            "SentID": 4760,
            "TokenID": "0",
            "Context": "context . detach ( ) ;"
        },
        {
            "Word": "context",
            "WordID": "15",
            "SentID": 4774,
            "TokenID": "4",
            "Context": "final ContainerSPI container = context . getContainer ( ) ;"
        },
        {
            "Word": "context",
            "WordID": "16",
            "SentID": 4775,
            "TokenID": "4",
            "Context": "final HttpServletResponse httpResponse = context . getResponse ( ) ;"
        },
        {
            "Word": "context",
            "WordID": "17",
            "SentID": 4778,
            "TokenID": "6",
            "Context": "if ( HttpHeader . isXHR ( context . getRequest ( ) ) && loginPage != null ) {"
        },
        {
            "Word": "context",
            "WordID": "19",
            "SentID": 4782,
            "TokenID": "0",
            "Context": "context . dump ( ) ;"
        },
        {
            "Word": "context",
            "WordID": "21",
            "SentID": 4783,
            "TokenID": "12",
            "Context": "context . getResponse ( ) . sendError ( HttpServletResponse . SC_BAD_REQUEST , context . getRequestURI ( ) ) ;"
        },
        {
            "Word": "context",
            "WordID": "23",
            "SentID": 4785,
            "TokenID": "2",
            "Context": "sendJsonObject ( context , new RemoteException ( exception ) , HttpServletResponse . SC_NOT_FOUND ) ;"
        },
        {
            "Word": "context",
            "WordID": "25",
            "SentID": 4791,
            "TokenID": "2",
            "Context": "sendJsonObject ( context , throwable , HttpServletResponse . SC_BAD_REQUEST ) ;"
        },
        {
            "Word": "context",
            "WordID": "26",
            "SentID": 4792,
            "TokenID": "2",
            "Context": "dumpError ( context , throwable ) ;"
        },
        {
            "Word": "context",
            "WordID": "27",
            "SentID": 4793,
            "TokenID": "2",
            "Context": "sendJsonObject ( context , new RemoteException ( throwable ) , HttpServletResponse . SC_INTERNAL_SERVER_ERROR ) ;"
        },
        {
            "Word": "context",
            "WordID": "30",
            "SentID": 4802,
            "TokenID": "6",
            "Context": "httpResponse . setHeader ( \"Content-Language\" , context . getLocale ( ) . toLanguageTag ( ) ) ;"
        },
        {
            "Labels": [
                "\"Context Management in Java\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "Context, context",
            "Syntactic": "argument, variable, datatype keyword",
            "Semantic": "function calls",
            "Description": "variables and datatype keywords that contain \"context\" often called in arguments of function calls",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "364": [
        {
            "Word": "o1",
            "WordID": "1",
            "SentID": 3344,
            "TokenID": "7",
            "Context": "} public static boolean hasDifferentValue ( XsdStringRestrictions o1 , XsdStringRestrictions o2 ) {"
        },
        {
            "Word": "o1",
            "WordID": "2",
            "SentID": 3345,
            "TokenID": "2",
            "Context": "if ( o1 == null && o2 == null ) {"
        },
        {
            "Word": "o1",
            "WordID": "4",
            "SentID": 3349,
            "TokenID": "2",
            "Context": "o1Value = o1 . getValue ( ) ;"
        },
        {
            "Word": "o1",
            "WordID": "5",
            "SentID": 3430,
            "TokenID": "7",
            "Context": "} public static boolean hasDifferentValue ( XsdDoubleRestrictions o1 , XsdDoubleRestrictions o2 ) {"
        },
        {
            "Word": "o1",
            "WordID": "6",
            "SentID": 3563,
            "TokenID": "7",
            "Context": "} public static boolean hasDifferentValue ( XsdIntegerRestrictions o1 , XsdIntegerRestrictions o2 ) {"
        },
        {
            "Word": "arg1",
            "WordID": "1",
            "SentID": 3726,
            "TokenID": "9",
            "Context": "} public void trace ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": "arg1",
            "WordID": "2",
            "SentID": 3727,
            "TokenID": "8",
            "Context": "formatAndLog ( Log . VERBOSE , format , arg1 , arg2 ) ;"
        },
        {
            "Word": "arg1",
            "WordID": "3",
            "SentID": 3734,
            "TokenID": "9",
            "Context": "} public void debug ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": "arg1",
            "WordID": "4",
            "SentID": 3735,
            "TokenID": "8",
            "Context": "formatAndLog ( Log . DEBUG , format , arg1 , arg2 ) ;"
        },
        {
            "Word": "arg1",
            "WordID": "5",
            "SentID": 3742,
            "TokenID": "9",
            "Context": "} public void info ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": "arg1",
            "WordID": "6",
            "SentID": 3743,
            "TokenID": "8",
            "Context": "formatAndLog ( Log . INFO , format , arg1 , arg2 ) ;"
        },
        {
            "Word": "arg1",
            "WordID": "7",
            "SentID": 3750,
            "TokenID": "9",
            "Context": "} public void warn ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": "arg1",
            "WordID": "8",
            "SentID": 3751,
            "TokenID": "8",
            "Context": "formatAndLog ( Log . WARN , format , arg1 , arg2 ) ;"
        },
        {
            "Word": "arg1",
            "WordID": "9",
            "SentID": 3758,
            "TokenID": "9",
            "Context": "} public void error ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": "arg1",
            "WordID": "10",
            "SentID": 3759,
            "TokenID": "8",
            "Context": "formatAndLog ( Log . ERROR , format , arg1 , arg2 ) ;"
        },
        {
            "Word": "o1",
            "WordID": "7",
            "SentID": 4479,
            "TokenID": "5",
            "Context": "public int compare ( ManagedClassSPI o1 , ManagedClassSPI o2 ) {"
        },
        {
            "Labels": [
                "\"Object and Argument Interaction\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "arg1,o1",
            "Syntactic": "Objects",
            "Semantic": "Function definitions, Error Handling",
            "Description": "Objects called \"arg1\" or \"o1\" often used in function definitions that relate to error handling",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Lexicographic",
            "Q6_Answer": "None"
        }
    ],
    "483": [
        {
            "Word": "o2",
            "WordID": "1",
            "SentID": 3344,
            "TokenID": "10",
            "Context": "} public static boolean hasDifferentValue ( XsdStringRestrictions o1 , XsdStringRestrictions o2 ) {"
        },
        {
            "Word": "o2",
            "WordID": "2",
            "SentID": 3345,
            "TokenID": "6",
            "Context": "if ( o1 == null && o2 == null ) {"
        },
        {
            "Word": "o2",
            "WordID": "4",
            "SentID": 3351,
            "TokenID": "2",
            "Context": "o2Value = o2 . getValue ( ) ;"
        },
        {
            "Word": "o2",
            "WordID": "5",
            "SentID": 3430,
            "TokenID": "10",
            "Context": "} public static boolean hasDifferentValue ( XsdDoubleRestrictions o1 , XsdDoubleRestrictions o2 ) {"
        },
        {
            "Word": "o2",
            "WordID": "6",
            "SentID": 3563,
            "TokenID": "10",
            "Context": "} public static boolean hasDifferentValue ( XsdIntegerRestrictions o1 , XsdIntegerRestrictions o2 ) {"
        },
        {
            "Word": "arg2",
            "WordID": "1",
            "SentID": 3726,
            "TokenID": "12",
            "Context": "} public void trace ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": "arg2",
            "WordID": "2",
            "SentID": 3727,
            "TokenID": "10",
            "Context": "formatAndLog ( Log . VERBOSE , format , arg1 , arg2 ) ;"
        },
        {
            "Word": "arg2",
            "WordID": "3",
            "SentID": 3734,
            "TokenID": "12",
            "Context": "} public void debug ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": "arg2",
            "WordID": "4",
            "SentID": 3735,
            "TokenID": "10",
            "Context": "formatAndLog ( Log . DEBUG , format , arg1 , arg2 ) ;"
        },
        {
            "Word": "arg2",
            "WordID": "5",
            "SentID": 3742,
            "TokenID": "12",
            "Context": "} public void info ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": "arg2",
            "WordID": "6",
            "SentID": 3743,
            "TokenID": "10",
            "Context": "formatAndLog ( Log . INFO , format , arg1 , arg2 ) ;"
        },
        {
            "Word": "arg2",
            "WordID": "7",
            "SentID": 3750,
            "TokenID": "12",
            "Context": "} public void warn ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": "arg2",
            "WordID": "8",
            "SentID": 3751,
            "TokenID": "10",
            "Context": "formatAndLog ( Log . WARN , format , arg1 , arg2 ) ;"
        },
        {
            "Word": "arg2",
            "WordID": "9",
            "SentID": 3758,
            "TokenID": "12",
            "Context": "} public void error ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": "arg2",
            "WordID": "10",
            "SentID": 3759,
            "TokenID": "10",
            "Context": "formatAndLog ( Log . ERROR , format , arg1 , arg2 ) ;"
        },
        {
            "Word": "o2",
            "WordID": "7",
            "SentID": 4479,
            "TokenID": "8",
            "Context": "public int compare ( ManagedClassSPI o1 , ManagedClassSPI o2 ) {"
        },
        {
            "Word": "o2",
            "WordID": "8",
            "SentID": 4480,
            "TokenID": "9",
            "Context": "return o1 . getKey ( ) . compareTo ( o2 . getKey ( ) ) ;"
        },
        {
            "Word": "o2",
            "WordID": "9",
            "SentID": 4488,
            "TokenID": "1",
            "Context": "return o2 . getKey ( ) . compareTo ( o1 . getKey ( ) ) ;"
        },
        {
            "Labels": [
                "\"Object and Argument Variables\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "arg2,o2",
            "Syntactic": "Objects",
            "Semantic": "Function Definitions, Error Handling",
            "Description": "objects named \"arg2\" and \"o2\" often used in function definitions for error handling",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Lexicographic",
            "Q6_Answer": "None"
        }
    ],
    "73": [
        {
            "Word": "NamedConcreteElement",
            "WordID": "1",
            "SentID": 3353,
            "TokenID": "5",
            "Context": "} public void replaceUnsolvedAttributes ( NamedConcreteElement element ) {"
        },
        {
            "Word": "replaceUnsolvedElements",
            "WordID": "1",
            "SentID": 3367,
            "TokenID": "2",
            "Context": "public void replaceUnsolvedElements ( NamedConcreteElement elementWrapper ) {"
        },
        {
            "Word": "NamedConcreteElement",
            "WordID": "2",
            "SentID": 3367,
            "TokenID": "4",
            "Context": "public void replaceUnsolvedElements ( NamedConcreteElement elementWrapper ) {"
        },
        {
            "Word": "XsdElement",
            "WordID": "1",
            "SentID": 3368,
            "TokenID": "8",
            "Context": "if ( elementWrapper . getElement ( ) instanceof XsdElement ) {"
        },
        {
            "Word": "replaceUnsolvedElements",
            "WordID": "2",
            "SentID": 3369,
            "TokenID": "2",
            "Context": "super . replaceUnsolvedElements ( elementWrapper ) ;"
        },
        {
            "Word": "NamedConcreteElement",
            "WordID": "3",
            "SentID": 3394,
            "TokenID": "6",
            "Context": "Map < String , List < NamedConcreteElement > > concreteElementsMap ="
        },
        {
            "Word": "parseElements",
            "WordID": "1",
            "SentID": 3395,
            "TokenID": "0",
            "Context": "parseElements . stream ( )"
        },
        {
            "Word": "NamedConcreteElement",
            "WordID": "4",
            "SentID": 3396,
            "TokenID": "7",
            "Context": ". filter ( concreteElement -> concreteElement instanceof NamedConcreteElement )"
        },
        {
            "Word": "NamedConcreteElement",
            "WordID": "5",
            "SentID": 3397,
            "TokenID": "6",
            "Context": ". map ( concreteElement -> ( NamedConcreteElement ) concreteElement )"
        },
        {
            "Word": "NamedConcreteElement",
            "WordID": "6",
            "SentID": 3398,
            "TokenID": "5",
            "Context": ". collect ( groupingBy ( NamedConcreteElement :: getName ) ) ;"
        },
        {
            "Word": "unsolvedElements",
            "WordID": "1",
            "SentID": 3399,
            "TokenID": "0",
            "Context": "unsolvedElements . forEach ( unsolvedElement -> replaceUnsolvedReference ( concreteElementsMap , unsolvedElement ) ) ;"
        },
        {
            "Word": "NamedConcreteElement",
            "WordID": "7",
            "SentID": 3400,
            "TokenID": "11",
            "Context": "} private void replaceUnsolvedReference ( Map < String , List < NamedConcreteElement > > concreteElementsMap , UnsolvedReference unsolvedReference ) {"
        },
        {
            "Word": "NamedConcreteElement",
            "WordID": "8",
            "SentID": 3401,
            "TokenID": "2",
            "Context": "List < NamedConcreteElement > concreteElements = concreteElementsMap . get ( unsolvedReference . getRef ( ) ) ;"
        },
        {
            "Word": "concreteElements",
            "WordID": "1",
            "SentID": 3401,
            "TokenID": "4",
            "Context": "List < NamedConcreteElement > concreteElements = concreteElementsMap . get ( unsolvedReference . getRef ( ) ) ;"
        },
        {
            "Word": "concreteElements",
            "WordID": "2",
            "SentID": 3402,
            "TokenID": "2",
            "Context": "if ( concreteElements != null ) {"
        },
        {
            "Word": "NamedConcreteElement",
            "WordID": "9",
            "SentID": 3404,
            "TokenID": "2",
            "Context": "for ( NamedConcreteElement concreteElement : concreteElements ) {"
        },
        {
            "Word": "concreteElements",
            "WordID": "3",
            "SentID": 3404,
            "TokenID": "5",
            "Context": "for ( NamedConcreteElement concreteElement : concreteElements ) {"
        },
        {
            "Word": "NamedConcreteElement",
            "WordID": "10",
            "SentID": 3405,
            "TokenID": "0",
            "Context": "NamedConcreteElement substitutionElementWrapper ;"
        },
        {
            "Word": "XsdNamedElements",
            "WordID": "1",
            "SentID": 3407,
            "TokenID": "0",
            "Context": "XsdNamedElements substitutionElement = concreteElement . getElement ( ) . clone ( oldElementAttributes ) ;"
        },
        {
            "Word": "NamedConcreteElement",
            "WordID": "11",
            "SentID": 3408,
            "TokenID": "3",
            "Context": "substitutionElementWrapper = ( NamedConcreteElement ) ReferenceBase . createFromXsd ( substitutionElement ) ;"
        },
        {
            "Word": "replaceUnsolvedElements",
            "WordID": "3",
            "SentID": 3410,
            "TokenID": "6",
            "Context": "unsolvedReference . getParent ( ) . replaceUnsolvedElements ( substitutionElementWrapper ) ;"
        },
        {
            "Word": "getUnionElements",
            "WordID": "1",
            "SentID": 3440,
            "TokenID": "2",
            "Context": "union . getUnionElements ( ) . forEach ( unionMember -> {"
        },
        {
            "Word": "XsdAbstractElement",
            "WordID": "1",
            "SentID": 3506,
            "TokenID": "0",
            "Context": "XsdAbstractElement element = elementWrapper . getElement ( ) ;"
        },
        {
            "Word": "replaceUnsolvedElements",
            "WordID": "4",
            "SentID": 3519,
            "TokenID": "2",
            "Context": "public void replaceUnsolvedElements ( NamedConcreteElement element ) {"
        },
        {
            "Word": "NamedConcreteElement",
            "WordID": "12",
            "SentID": 3519,
            "TokenID": "4",
            "Context": "public void replaceUnsolvedElements ( NamedConcreteElement element ) {"
        },
        {
            "Word": "replaceUnsolvedElements",
            "WordID": "5",
            "SentID": 3520,
            "TokenID": "2",
            "Context": "super . replaceUnsolvedElements ( element ) ;"
        },
        {
            "Word": "XsdNamedElements",
            "WordID": "2",
            "SentID": 3521,
            "TokenID": "0",
            "Context": "XsdNamedElements elem = element . getElement ( ) ;"
        },
        {
            "Word": "XsdElement",
            "WordID": "2",
            "SentID": 3526,
            "TokenID": "10",
            "Context": "if ( this . substitutionGroup instanceof UnsolvedReference && elem instanceof XsdElement && ( ( UnsolvedReference ) this . substitutionGroup ) . getRef ( ) . equals ( element . getName ( ) ) ) {"
        },
        {
            "Word": "XsdElement",
            "WordID": "3",
            "SentID": 3527,
            "TokenID": "0",
            "Context": "XsdElement xsdElement = ( XsdElement ) elem ;"
        },
        {
            "Word": "XsdElement",
            "WordID": "4",
            "SentID": 3527,
            "TokenID": "4",
            "Context": "XsdElement xsdElement = ( XsdElement ) elem ;"
        },
        {
            "Word": "substitutionGroup",
            "WordID": "3",
            "SentID": 3531,
            "TokenID": "2",
            "Context": "this . substitutionGroup = element ;"
        },
        {
            "Word": "XsdAbstractElement",
            "WordID": "2",
            "SentID": 3532,
            "TokenID": "8",
            "Context": "} static ReferenceBase xsdParseSkeleton ( Node node , XsdAbstractElement element ) {"
        },
        {
            "Word": "XsdAbstractElement",
            "WordID": "3",
            "SentID": 3538,
            "TokenID": "0",
            "Context": "XsdAbstractElement childElement = parserFunction . apply ( parser , child ) . getElement ( ) ;"
        },
        {
            "Word": "replaceUnsolvedElements",
            "WordID": "6",
            "SentID": 3550,
            "TokenID": "3",
            "Context": "} public void replaceUnsolvedElements ( NamedConcreteElement element ) {"
        },
        {
            "Word": "NamedConcreteElement",
            "WordID": "13",
            "SentID": 3550,
            "TokenID": "5",
            "Context": "} public void replaceUnsolvedElements ( NamedConcreteElement element ) {"
        },
        {
            "Word": "elements",
            "WordID": "5",
            "SentID": 3553,
            "TokenID": "0",
            "Context": "elements . stream ( )"
        },
        {
            "Word": "XsdAbstractElement",
            "WordID": "4",
            "SentID": 3590,
            "TokenID": "5",
            "Context": "} static String getFormDefaultValue ( XsdAbstractElement parent ) {"
        },
        {
            "Word": "XsdAbstractElement",
            "WordID": "5",
            "SentID": 3595,
            "TokenID": "5",
            "Context": "} static String getFinalDefaultValue ( XsdAbstractElement parent ) {"
        },
        {
            "Word": "XsdAbstractElement",
            "WordID": "6",
            "SentID": 3598,
            "TokenID": "5",
            "Context": "} static String getBlockDefaultValue ( XsdAbstractElement parent ) {"
        },
        {
            "Word": "XsdAbstractElement",
            "WordID": "7",
            "SentID": 3601,
            "TokenID": "6",
            "Context": "} public static ReferenceBase createFromXsd ( XsdAbstractElement element ) {"
        },
        {
            "Word": "XsdNamedElements",
            "WordID": "3",
            "SentID": 3604,
            "TokenID": "6",
            "Context": "if ( ! ( element instanceof XsdNamedElements ) ) {"
        },
        {
            "Word": "ConcreteElement",
            "WordID": "1",
            "SentID": 3605,
            "TokenID": "2",
            "Context": "return new ConcreteElement ( element ) ;"
        },
        {
            "Word": "NamedConcreteElement",
            "WordID": "14",
            "SentID": 3607,
            "TokenID": "2",
            "Context": "return new NamedConcreteElement ( ( XsdNamedElements ) element , name ) ;"
        },
        {
            "Word": "XsdNamedElements",
            "WordID": "4",
            "SentID": 3607,
            "TokenID": "5",
            "Context": "return new NamedConcreteElement ( ( XsdNamedElements ) element , name ) ;"
        },
        {
            "Word": "XsdNamedElements",
            "WordID": "5",
            "SentID": 3608,
            "TokenID": "5",
            "Context": "return new UnsolvedReference ( ( XsdNamedElements ) element ) ;"
        },
        {
            "Word": "childElement",
            "WordID": "4",
            "SentID": 3612,
            "TokenID": "4",
            "Context": "if ( this . childElement instanceof UnsolvedReference &&"
        },
        {
            "Word": "childElement",
            "WordID": "5",
            "SentID": 3613,
            "TokenID": "10",
            "Context": "elem instanceof XsdGroup && ( ( UnsolvedReference ) this . childElement ) . getRef ( ) . equals ( elemName ) ) {"
        },
        {
            "Word": "childElement",
            "WordID": "6",
            "SentID": 3614,
            "TokenID": "2",
            "Context": "this . childElement = element ;"
        },
        {
            "Word": "AnnotatedElement",
            "WordID": "1",
            "SentID": 3704,
            "TokenID": "8",
            "Context": "} private List < SystemProperty > getSystemProperties ( AnnotatedElement annotatedElement ) {"
        },
        {
            "Word": "annotatedElement",
            "WordID": "2",
            "SentID": 3706,
            "TokenID": "4",
            "Context": "if ( isAnnotated ( annotatedElement , SystemProperties . class ) ) {"
        },
        {
            "Word": "annotatedElement",
            "WordID": "3",
            "SentID": 3708,
            "TokenID": "4",
            "Context": "Arrays . asList ( annotatedElement . getAnnotation ( SystemProperties . class ) . value ( ) ) ) ;"
        },
        {
            "Word": "annotatedElement",
            "WordID": "4",
            "SentID": 3709,
            "TokenID": "4",
            "Context": "if ( isAnnotated ( annotatedElement , SystemProperty . class ) ) {"
        },
        {
            "Word": "annotatedElement",
            "WordID": "5",
            "SentID": 3710,
            "TokenID": "4",
            "Context": "systemProperties . add ( annotatedElement . getAnnotation ( SystemProperty . class ) ) ;"
        },
        {
            "Word": "pojoClassElement",
            "WordID": "2",
            "SentID": 4542,
            "TokenID": "3",
            "Context": "String pojoClassName = pojoClassElement . getAttribute ( \"class\" ) ;"
        },
        {
            "Word": "pojoClassElement",
            "WordID": "3",
            "SentID": 4544,
            "TokenID": "7",
            "Context": "Config configSection = config . getChild ( pojoClassElement . getName ( ) ) ;"
        },
        {
            "Word": "staticElement",
            "WordID": "2",
            "SentID": 4549,
            "TokenID": "3",
            "Context": "String fieldName = staticElement . getAttribute ( \"name\" ) ;"
        },
        {
            "Word": "staticElement",
            "WordID": "3",
            "SentID": 4550,
            "TokenID": "3",
            "Context": "if ( ! staticElement . hasAttribute ( \"value\" ) ) {"
        },
        {
            "Word": "staticElement",
            "WordID": "4",
            "SentID": 4554,
            "TokenID": "3",
            "Context": "Object value = staticElement . getAttribute ( \"value\" , staticField . getType ( ) ) ;"
        },
        {
            "Labels": [
                "\"Element Manipulation and Parsing in XML Schema Definition (XSD)\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "Element",
            "Syntactic": "datatype Keyword, method, object",
            "Semantic": "function definitions",
            "Description": "datatype keywords, methods, and objects all containing \"Element\" in their names, many used in function definitions.",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Lexicographic",
            "Q6_Answer": "None"
        }
    ],
    "189": [
        {
            "Word": "getElement",
            "WordID": "1",
            "SentID": 3354,
            "TokenID": "4",
            "Context": "if ( element . getElement ( ) instanceof XsdAttributeGroup ) {"
        },
        {
            "Word": "getElement",
            "WordID": "2",
            "SentID": 3360,
            "TokenID": "6",
            "Context": "attributes . addAll ( element . getElement ( ) . getElements ( ) ) ;"
        },
        {
            "Word": "getElements",
            "WordID": "1",
            "SentID": 3360,
            "TokenID": "10",
            "Context": "attributes . addAll ( element . getElement ( ) . getElements ( ) ) ;"
        },
        {
            "Word": "getElement",
            "WordID": "3",
            "SentID": 3361,
            "TokenID": "2",
            "Context": "element . getElement ( ) . setParent ( getOwner ( ) ) ;"
        },
        {
            "Word": "getElement",
            "WordID": "4",
            "SentID": 3362,
            "TokenID": "4",
            "Context": "if ( element . getElement ( ) instanceof XsdAttribute ) {"
        },
        {
            "Word": "getElement",
            "WordID": "5",
            "SentID": 3368,
            "TokenID": "4",
            "Context": "if ( elementWrapper . getElement ( ) instanceof XsdElement ) {"
        },
        {
            "Word": "getElement",
            "WordID": "6",
            "SentID": 3370,
            "TokenID": "4",
            "Context": "if ( elementWrapper . getElement ( ) instanceof XsdGroup ) {"
        },
        {
            "Word": "getElement",
            "WordID": "7",
            "SentID": 3403,
            "TokenID": "10",
            "Context": "Map < String , String > oldElementAttributes = unsolvedReference . getElement ( ) . getAttributesMap ( ) ;"
        },
        {
            "Word": "getElement",
            "WordID": "8",
            "SentID": 3407,
            "TokenID": "5",
            "Context": "XsdNamedElements substitutionElement = concreteElement . getElement ( ) . clone ( oldElementAttributes ) ;"
        },
        {
            "Word": "getElement",
            "WordID": "9",
            "SentID": 3506,
            "TokenID": "5",
            "Context": "XsdAbstractElement element = elementWrapper . getElement ( ) ;"
        },
        {
            "Word": "getFirstChild",
            "WordID": "1",
            "SentID": 3515,
            "TokenID": "3",
            "Context": "return doc . getFirstChild ( ) ;"
        },
        {
            "Word": "getElement",
            "WordID": "10",
            "SentID": 3521,
            "TokenID": "5",
            "Context": "XsdNamedElements elem = element . getElement ( ) ;"
        },
        {
            "Word": "getElement",
            "WordID": "11",
            "SentID": 3538,
            "TokenID": "12",
            "Context": "XsdAbstractElement childElement = parserFunction . apply ( parser , child ) . getElement ( ) ;"
        },
        {
            "Word": "getElements",
            "WordID": "2",
            "SentID": 3551,
            "TokenID": "8",
            "Context": "List < ReferenceBase > elements = this . getElements ( ) ;"
        },
        {
            "Word": "findChildren",
            "WordID": "1",
            "SentID": 4058,
            "TokenID": "8",
            "Context": "List < Config > fields = config . findChildren ( \"instance-field\" ) ;"
        },
        {
            "Word": "hasChildren",
            "WordID": "1",
            "SentID": 4164,
            "TokenID": "5",
            "Context": "if ( ! descriptor . hasChildren ( ) ) {"
        },
        {
            "Word": "getChild",
            "WordID": "1",
            "SentID": 4174,
            "TokenID": "5",
            "Context": "String interfaceName = descriptor . getChild ( i ) . getAttribute ( \"name\" ) ;"
        },
        {
            "Word": "findChildren",
            "WordID": "2",
            "SentID": 4220,
            "TokenID": "7",
            "Context": "for ( Config config : config . findChildren ( \"static-field\" ) ) {"
        },
        {
            "Word": "getChild",
            "WordID": "2",
            "SentID": 4267,
            "TokenID": "4",
            "Context": "node = node . getChild ( nodeIDs . get ( index ) ) ;"
        },
        {
            "Word": "getElements",
            "WordID": "3",
            "SentID": 4412,
            "TokenID": "9",
            "Context": ". flatMap ( x -> stream ( x . getElements ( ) ) ) . map ( x -> x . getName ( ) )"
        },
        {
            "Word": "findChildren",
            "WordID": "3",
            "SentID": 4455,
            "TokenID": "7",
            "Context": "for ( Config descriptorsSection : config . findChildren ( \"managed-classes\" , \"web-sockets\" ) ) {"
        },
        {
            "Word": "getChildren",
            "WordID": "1",
            "SentID": 4456,
            "TokenID": "9",
            "Context": "CLASS_DESCRIPTORS : for ( Config classDescriptor : descriptorsSection . getChildren ( ) ) {"
        },
        {
            "Word": "hasChildren",
            "WordID": "2",
            "SentID": 4457,
            "TokenID": "5",
            "Context": "if ( ! classDescriptor . hasChildren ( ) ) {"
        },
        {
            "Word": "getChild",
            "WordID": "3",
            "SentID": 4529,
            "TokenID": "5",
            "Context": "Config section = config . getChild ( \"converters\" ) ;"
        },
        {
            "Word": "findChildren",
            "WordID": "4",
            "SentID": 4530,
            "TokenID": "7",
            "Context": "for ( Config el : section . findChildren ( \"type\" ) ) {"
        },
        {
            "Word": "getChild",
            "WordID": "4",
            "SentID": 4539,
            "TokenID": "5",
            "Context": "Config pojoClassesSection = config . getChild ( \"pojo-classes\" ) ;"
        },
        {
            "Word": "getChildren",
            "WordID": "2",
            "SentID": 4541,
            "TokenID": "7",
            "Context": "for ( Config pojoClassElement : pojoClassesSection . getChildren ( ) ) {"
        },
        {
            "Word": "getChild",
            "WordID": "5",
            "SentID": 4544,
            "TokenID": "5",
            "Context": "Config configSection = config . getChild ( pojoClassElement . getName ( ) ) ;"
        },
        {
            "Word": "findChildren",
            "WordID": "5",
            "SentID": 4548,
            "TokenID": "7",
            "Context": "for ( Config staticElement : configSection . findChildren ( \"static-field\" ) ) {"
        },
        {
            "Word": "getElements",
            "WordID": "4",
            "SentID": 4618,
            "TokenID": "2",
            "Context": "response . getElements ( ) . stream ( ) . forEach ( observer :: onNext ) ;"
        },
        {
            "Word": "getElements",
            "WordID": "5",
            "SentID": 4835,
            "TokenID": "9",
            "Context": ". flatMap ( x -> stream ( x . getElements ( ) ) . map ( LinkHeader :: new ) )"
        },
        {
            "Labels": [
                "Element and Children Manipulation Methods"
            ],
            "Meaningful": "Yes",
            "Lexicographic": "getElement, getChild",
            "Syntactic": "Methods",
            "Semantic": "function calls, getters",
            "Description": "getter methods, many named \"getElement\" or \"getChild\".",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "113": [
        {
            "Word": "UnsolvedReference",
            "WordID": "1",
            "SentID": 3356,
            "TokenID": "7",
            "Context": ". filter ( attributeGroup -> attributeGroup instanceof UnsolvedReference && ( ( UnsolvedReference ) attributeGroup ) . getRef ( ) . equals ( element . getName ( ) ) )"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "2",
            "SentID": 3356,
            "TokenID": "11",
            "Context": ". filter ( attributeGroup -> attributeGroup instanceof UnsolvedReference && ( ( UnsolvedReference ) attributeGroup ) . getRef ( ) . equals ( element . getName ( ) ) )"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "3",
            "SentID": 3364,
            "TokenID": "7",
            "Context": ". filter ( attribute -> attribute instanceof UnsolvedReference && ( ( UnsolvedReference ) attribute ) . getRef ( ) . equals ( element . getName ( ) ) )"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "4",
            "SentID": 3364,
            "TokenID": "11",
            "Context": ". filter ( attribute -> attribute instanceof UnsolvedReference && ( ( UnsolvedReference ) attribute ) . getRef ( ) . equals ( element . getName ( ) ) )"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "5",
            "SentID": 3373,
            "TokenID": "2",
            "Context": "element instanceof UnsolvedReference && ( ( UnsolvedReference ) element ) . getRef ( ) . equals ( elementWrapper . getName ( ) )"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "6",
            "SentID": 3373,
            "TokenID": "6",
            "Context": "element instanceof UnsolvedReference && ( ( UnsolvedReference ) element ) . getRef ( ) . equals ( elementWrapper . getName ( ) )"
        },
        {
            "Word": "replaceUnsolvedReference",
            "WordID": "1",
            "SentID": 3399,
            "TokenID": "6",
            "Context": "unsolvedElements . forEach ( unsolvedElement -> replaceUnsolvedReference ( concreteElementsMap , unsolvedElement ) ) ;"
        },
        {
            "Word": "replaceUnsolvedReference",
            "WordID": "2",
            "SentID": 3400,
            "TokenID": "3",
            "Context": "} private void replaceUnsolvedReference ( Map < String , List < NamedConcreteElement > > concreteElementsMap , UnsolvedReference unsolvedReference ) {"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "7",
            "SentID": 3400,
            "TokenID": "16",
            "Context": "} private void replaceUnsolvedReference ( Map < String , List < NamedConcreteElement > > concreteElementsMap , UnsolvedReference unsolvedReference ) {"
        },
        {
            "Word": "unsolvedReference",
            "WordID": "2",
            "SentID": 3401,
            "TokenID": "10",
            "Context": "List < NamedConcreteElement > concreteElements = concreteElementsMap . get ( unsolvedReference . getRef ( ) ) ;"
        },
        {
            "Word": "unsolvedReference",
            "WordID": "3",
            "SentID": 3403,
            "TokenID": "8",
            "Context": "Map < String , String > oldElementAttributes = unsolvedReference . getElement ( ) . getAttributesMap ( ) ;"
        },
        {
            "Word": "unsolvedReference",
            "WordID": "4",
            "SentID": 3406,
            "TokenID": "3",
            "Context": "if ( ! unsolvedReference . isTypeRef ( ) ) {"
        },
        {
            "Word": "unsolvedReference",
            "WordID": "5",
            "SentID": 3410,
            "TokenID": "0",
            "Context": "unsolvedReference . getParent ( ) . replaceUnsolvedElements ( substitutionElementWrapper ) ;"
        },
        {
            "Word": "unsolvedReference",
            "WordID": "6",
            "SentID": 3411,
            "TokenID": "2",
            "Context": "storeUnsolvedItem ( unsolvedReference ) ;"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "8",
            "SentID": 3412,
            "TokenID": "5",
            "Context": "} private void storeUnsolvedItem ( UnsolvedReference unsolvedReference ) {"
        },
        {
            "Word": "unsolvedReference",
            "WordID": "8",
            "SentID": 3414,
            "TokenID": "7",
            "Context": "parserUnsolvedElementsMap . add ( new UnsolvedReferenceItem ( unsolvedReference ) ) ;"
        },
        {
            "Word": "getUnsolvedReference",
            "WordID": "1",
            "SentID": 3418,
            "TokenID": "2",
            "Context": "unsolvedReferenceObj . getUnsolvedReference ( )"
        },
        {
            "Word": "unsolvedReference",
            "WordID": "9",
            "SentID": 3420,
            "TokenID": "3",
            "Context": ". equals ( unsolvedReference . getRef ( ) ) )"
        },
        {
            "Word": "unsolvedReference",
            "WordID": "10",
            "SentID": 3422,
            "TokenID": "14",
            "Context": "innerEntry . ifPresent ( entry -> entry . getParents ( ) . add ( unsolvedReference . getParent ( ) ) ) ;"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "9",
            "SentID": 3523,
            "TokenID": "6",
            "Context": "if ( this . type instanceof UnsolvedReference && isComplexOrSimpleType && ( ( UnsolvedReference ) this . type ) . getRef ( ) . equals ( element . getName ( ) ) ) {"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "10",
            "SentID": 3523,
            "TokenID": "12",
            "Context": "if ( this . type instanceof UnsolvedReference && isComplexOrSimpleType && ( ( UnsolvedReference ) this . type ) . getRef ( ) . equals ( element . getName ( ) ) ) {"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "11",
            "SentID": 3526,
            "TokenID": "6",
            "Context": "if ( this . substitutionGroup instanceof UnsolvedReference && elem instanceof XsdElement && ( ( UnsolvedReference ) this . substitutionGroup ) . getRef ( ) . equals ( element . getName ( ) ) ) {"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "12",
            "SentID": 3526,
            "TokenID": "14",
            "Context": "if ( this . substitutionGroup instanceof UnsolvedReference && elem instanceof XsdElement && ( ( UnsolvedReference ) this . substitutionGroup ) . getRef ( ) . equals ( element . getName ( ) ) ) {"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "13",
            "SentID": 3554,
            "TokenID": "7",
            "Context": ". filter ( referenceBase -> referenceBase instanceof UnsolvedReference )"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "14",
            "SentID": 3555,
            "TokenID": "6",
            "Context": ". map ( referenceBase -> ( UnsolvedReference ) referenceBase )"
        },
        {
            "Word": "unsolvedReference",
            "WordID": "11",
            "SentID": 3556,
            "TokenID": "3",
            "Context": ". filter ( unsolvedReference -> unsolvedReference . getRef ( ) . equals ( element . getName ( ) ) )"
        },
        {
            "Word": "unsolvedReference",
            "WordID": "12",
            "SentID": 3556,
            "TokenID": "5",
            "Context": ". filter ( unsolvedReference -> unsolvedReference . getRef ( ) . equals ( element . getName ( ) ) )"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "15",
            "SentID": 3608,
            "TokenID": "2",
            "Context": "return new UnsolvedReference ( ( XsdNamedElements ) element ) ;"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "16",
            "SentID": 3610,
            "TokenID": "6",
            "Context": "if ( this . base instanceof UnsolvedReference && isComplexOrSimpleType && ( ( UnsolvedReference ) this . base ) . getRef ( ) . equals ( elemName ) ) {"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "17",
            "SentID": 3610,
            "TokenID": "12",
            "Context": "if ( this . base instanceof UnsolvedReference && isComplexOrSimpleType && ( ( UnsolvedReference ) this . base ) . getRef ( ) . equals ( elemName ) ) {"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "18",
            "SentID": 3612,
            "TokenID": "6",
            "Context": "if ( this . childElement instanceof UnsolvedReference &&"
        },
        {
            "Word": "UnsolvedReference",
            "WordID": "19",
            "SentID": 3613,
            "TokenID": "6",
            "Context": "elem instanceof XsdGroup && ( ( UnsolvedReference ) this . childElement ) . getRef ( ) . equals ( elemName ) ) {"
        },
        {
            "Labels": [
                "\"Managing Unsolved References\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "UnsolvedReference",
            "Syntactic": "dataType Keyword, method",
            "Semantic": "conditionals",
            "Description": "datatype keywords and methods containing \"unsolvedReference\" as a substring",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Lexicographic",
            "Q6_Answer": "None"
        }
    ],
    "259": [
        {
            "Word": "",
            "WordID": "|1",
            "SentID": 3378,
            "TokenID": "4",
            "Context": "} catch ( SAXException | IOException | ParserConfigurationException e ) {"
        },
        {
            "Word": "",
            "WordID": "|2",
            "SentID": 3378,
            "TokenID": "6",
            "Context": "} catch ( SAXException | IOException | ParserConfigurationException e ) {"
        },
        {
            "Word": "",
            "WordID": "|3",
            "SentID": 4307,
            "TokenID": "4",
            "Context": "} catch ( IOException | IllegalArgumentException | IllegalAccessException ex ) {"
        },
        {
            "Word": "",
            "WordID": "|4",
            "SentID": 4307,
            "TokenID": "6",
            "Context": "} catch ( IOException | IllegalArgumentException | IllegalAccessException ex ) {"
        },
        {
            "Word": "",
            "WordID": "|5",
            "SentID": 4583,
            "TokenID": "4",
            "Context": "} catch ( IOException | FileUploadException e ) {"
        },
        {
            "Word": "",
            "WordID": "|6",
            "SentID": 4616,
            "TokenID": "4",
            "Context": "} catch ( IOException | IllegalArgumentException | IllegalAccessException error ) {"
        },
        {
            "Word": "",
            "WordID": "|7",
            "SentID": 4616,
            "TokenID": "6",
            "Context": "} catch ( IOException | IllegalArgumentException | IllegalAccessException error ) {"
        },
        {
            "Word": "",
            "WordID": "|8",
            "SentID": 4742,
            "TokenID": "4",
            "Context": "} catch ( InvalidKeyException | NoSuchPaddingException | BadPaddingException | IllegalBlockSizeException e ) {"
        },
        {
            "Word": "",
            "WordID": "|9",
            "SentID": 4742,
            "TokenID": "6",
            "Context": "} catch ( InvalidKeyException | NoSuchPaddingException | BadPaddingException | IllegalBlockSizeException e ) {"
        },
        {
            "Word": "",
            "WordID": "|10",
            "SentID": 4742,
            "TokenID": "8",
            "Context": "} catch ( InvalidKeyException | NoSuchPaddingException | BadPaddingException | IllegalBlockSizeException e ) {"
        },
        {
            "Word": "",
            "WordID": "|11",
            "SentID": 4757,
            "TokenID": "4",
            "Context": "} catch ( IOException | ServletException | Error | RuntimeException t ) {"
        },
        {
            "Word": "",
            "WordID": "|12",
            "SentID": 4757,
            "TokenID": "6",
            "Context": "} catch ( IOException | ServletException | Error | RuntimeException t ) {"
        },
        {
            "Word": "",
            "WordID": "|13",
            "SentID": 4757,
            "TokenID": "8",
            "Context": "} catch ( IOException | ServletException | Error | RuntimeException t ) {"
        },
        {
            "Word": "",
            "WordID": "|14",
            "SentID": 4814,
            "TokenID": "4",
            "Context": "} catch ( IOException | IllegalArgumentException | IllegalAccessException | IllegalStateException ex ) {"
        },
        {
            "Word": "",
            "WordID": "|15",
            "SentID": 4814,
            "TokenID": "6",
            "Context": "} catch ( IOException | IllegalArgumentException | IllegalAccessException | IllegalStateException ex ) {"
        },
        {
            "Word": "",
            "WordID": "|16",
            "SentID": 4814,
            "TokenID": "8",
            "Context": "} catch ( IOException | IllegalArgumentException | IllegalAccessException | IllegalStateException ex ) {"
        },
        {
            "Word": "",
            "WordID": "|17",
            "SentID": 4958,
            "TokenID": "4",
            "Context": "} catch ( JsonException | ClassCastException | UnsupportedEncodingException e ) {"
        },
        {
            "Word": "",
            "WordID": "|18",
            "SentID": 4958,
            "TokenID": "6",
            "Context": "} catch ( JsonException | ClassCastException | UnsupportedEncodingException e ) {"
        },
        {
            "Labels": [
                "Without any specific Java code tokens provided, it's impossible to generate a label or theme. Please provide the necessary information."
            ],
            "Meaningful": "Yes",
            "Lexicographic": "|",
            "Syntactic": "Vertical bar",
            "Semantic": "exception handling",
            "Description": "vertical bar in catch blocks for multiple exception handling",
            "Q1_Answer": "Unacceptable",
            "Q2_Answer": "Imprecise",
            "Q3_Answer": "Inferior",
            "Q4_Answer": "no word or syntax",
            "Q5_Answer": "Unanswered",
            "Q6_Answer": "None"
        }
    ],
    "229": [
        {
            "Word": "Node",
            "WordID": "2",
            "SentID": 3387,
            "TokenID": "5",
            "Context": "} static ReferenceBase xsdAnnotationChildrenParse ( Node node , XsdAnnotationChildren annotationChildren ) {"
        },
        {
            "Word": "Node",
            "WordID": "3",
            "SentID": 3390,
            "TokenID": "4",
            "Context": "} boolean isXsdSchema ( Node node ) {"
        },
        {
            "Word": "Node",
            "WordID": "5",
            "SentID": 3513,
            "TokenID": "2",
            "Context": "} private Node getSchemaNode ( String filePath ) throws IOException , SAXException , ParserConfigurationException {"
        },
        {
            "Word": "Node",
            "WordID": "6",
            "SentID": 3532,
            "TokenID": "5",
            "Context": "} static ReferenceBase xsdParseSkeleton ( Node node , XsdAbstractElement element ) {"
        },
        {
            "Word": "Node",
            "WordID": "8",
            "SentID": 3536,
            "TokenID": "4",
            "Context": "BiFunction < XsdParserCore , Node , ReferenceBase > parserFunction = XsdParserCore . getParseMappers ( ) . get ( nodeName ) ;"
        },
        {
            "Word": "Node",
            "WordID": "10",
            "SentID": 3558,
            "TokenID": "5",
            "Context": "} static String xsdRawContentParse ( Node node ) {"
        },
        {
            "Word": "CharNode",
            "WordID": "2",
            "SentID": 3842,
            "TokenID": "0",
            "Context": "CharNode cn = dict . get ( word . charAt ( 0 ) ) ;"
        },
        {
            "Word": "CharNode",
            "WordID": "3",
            "SentID": 3844,
            "TokenID": "5",
            "Context": "} public int search ( CharNode node , char [ ] sen , int offset , int tailLen ) {"
        },
        {
            "Word": "CharNode",
            "WordID": "4",
            "SentID": 3915,
            "TokenID": "0",
            "Context": "CharNode cn = dic . head ( chs [ offset ] ) ;"
        },
        {
            "Word": "CharNode",
            "WordID": "5",
            "SentID": 3917,
            "TokenID": "5",
            "Context": "} protected int search ( CharNode cn , char [ ] chs , int offset , int tailLen ) {"
        },
        {
            "Word": "CharNode",
            "WordID": "6",
            "SentID": 3920,
            "TokenID": "5",
            "Context": "} protected int maxMatch ( CharNode [ ] cns , int cnIdx , char [ ] chs , int offset ) {"
        },
        {
            "Word": "CharNode",
            "WordID": "7",
            "SentID": 3921,
            "TokenID": "0",
            "Context": "CharNode cn = null ;"
        },
        {
            "Word": "CharNode",
            "WordID": "8",
            "SentID": 3926,
            "TokenID": "5",
            "Context": "} protected void maxMatch ( CharNode [ ] cns , int cnIdx , char [ ] chs , int offset , ArrayList < Integer > [ ] tailLens , int tailLensIdx ) {"
        },
        {
            "Word": "JsonNode",
            "WordID": "1",
            "SentID": 4348,
            "TokenID": "0",
            "Context": "JsonNode messageNode = serializer . readTree ( body ) . get ( \"message\" ) ;"
        },
        {
            "Word": "JsonNode",
            "WordID": "2",
            "SentID": 4384,
            "TokenID": "5",
            "Context": "} protected void handleBodyLinks ( JsonNode jsonBody , Map < String , Map < URI , String > > links , Map < String , String > linkTemplates ) {"
        },
        {
            "Word": "JsonNode",
            "WordID": "3",
            "SentID": 4386,
            "TokenID": "0",
            "Context": "JsonNode linksNode = jsonBody . get ( \"_links\" ) ;"
        },
        {
            "Word": "ObjectNode",
            "WordID": "4",
            "SentID": 4397,
            "TokenID": "8",
            "Context": "} private void parseLinkObject ( String rel , ObjectNode obj , Map < URI , String > linksForRel , Map < String , String > linkTemplates ) {"
        },
        {
            "Word": "JsonNode",
            "WordID": "4",
            "SentID": 4398,
            "TokenID": "0",
            "Context": "JsonNode href = obj . findValue ( \"href\" ) ;"
        },
        {
            "Word": "JsonNode",
            "WordID": "5",
            "SentID": 4399,
            "TokenID": "0",
            "Context": "JsonNode templated = obj . findValue ( \"templated\" ) ;"
        },
        {
            "Word": "JsonNode",
            "WordID": "6",
            "SentID": 4402,
            "TokenID": "0",
            "Context": "JsonNode title = obj . findValue ( \"title\" ) ;"
        },
        {
            "Labels": [
                "\"Node Types in Data Structures\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "Node",
            "Syntactic": "datatype keyword",
            "Semantic": "function definitions, parameters",
            "Description": "datatypes of objects with \"node\" in the name, often used for method return types and parameter types",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Syntactic",
            "Q6_Answer": "None"
        }
    ],
    "223": [
        {
            "Word": ".",
            "WordID": "3610",
            "SentID": 3391,
            "TokenID": "4",
            "Context": "String schemaNodeName = node . getNodeName ( ) ;"
        },
        {
            "Word": ".",
            "WordID": "3723",
            "SentID": 3515,
            "TokenID": "2",
            "Context": "return doc . getFirstChild ( ) ;"
        },
        {
            "Word": ".",
            "WordID": "3748",
            "SentID": 3534,
            "TokenID": "3",
            "Context": "if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) {"
        },
        {
            "Word": ".",
            "WordID": "3750",
            "SentID": 3535,
            "TokenID": "4",
            "Context": "String nodeName = child . getNodeName ( ) ;"
        },
        {
            "Word": ".",
            "WordID": "3776",
            "SentID": 3560,
            "TokenID": "3",
            "Context": "if ( child . getNodeType ( ) == Node . TEXT_NODE ) {"
        },
        {
            "Word": ".",
            "WordID": "4115",
            "SentID": 4058,
            "TokenID": "7",
            "Context": "List < Config > fields = config . findChildren ( \"instance-field\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4175",
            "SentID": 4151,
            "TokenID": "4",
            "Context": "String implementationName = descriptor . getAttribute ( \"class\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4187",
            "SentID": 4165,
            "TokenID": "4",
            "Context": "if ( ! descriptor . hasAttribute ( \"interface\" ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4190",
            "SentID": 4168,
            "TokenID": "5",
            "Context": "interfaceNames . add ( descriptor . getAttribute ( \"interface\" ) ) ;"
        },
        {
            "Word": ".",
            "WordID": "4192",
            "SentID": 4169,
            "TokenID": "7",
            "Context": "if ( \"REMOTE\" . equals ( descriptor . getAttribute ( \"type\" ) ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4193",
            "SentID": 4170,
            "TokenID": "4",
            "Context": "String url = descriptor . getAttribute ( \"url\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4197",
            "SentID": 4174,
            "TokenID": "4",
            "Context": "String interfaceName = descriptor . getChild ( i ) . getAttribute ( \"name\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4198",
            "SentID": 4174,
            "TokenID": "9",
            "Context": "String interfaceName = descriptor . getChild ( i ) . getAttribute ( \"name\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4217",
            "SentID": 4196,
            "TokenID": "4",
            "Context": "String implementationURL = descriptor . getAttribute ( \"url\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4236",
            "SentID": 4220,
            "TokenID": "6",
            "Context": "for ( Config config : config . findChildren ( \"static-field\" ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4237",
            "SentID": 4221,
            "TokenID": "4",
            "Context": "String fieldName = config . getAttribute ( \"name\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4238",
            "SentID": 4223,
            "TokenID": "4",
            "Context": "if ( ! config . hasAttribute ( \"value\" ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4372",
            "SentID": 4386,
            "TokenID": "4",
            "Context": "JsonNode linksNode = jsonBody . get ( \"_links\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4373",
            "SentID": 4388,
            "TokenID": "3",
            "Context": "linksNode = jsonBody . get ( \"links\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4384",
            "SentID": 4398,
            "TokenID": "4",
            "Context": "JsonNode href = obj . findValue ( \"href\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4385",
            "SentID": 4399,
            "TokenID": "4",
            "Context": "JsonNode templated = obj . findValue ( \"templated\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4390",
            "SentID": 4402,
            "TokenID": "4",
            "Context": "JsonNode title = obj . findValue ( \"title\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4434",
            "SentID": 4455,
            "TokenID": "6",
            "Context": "for ( Config descriptorsSection : config . findChildren ( \"managed-classes\" , \"web-sockets\" ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4435",
            "SentID": 4456,
            "TokenID": "8",
            "Context": "CLASS_DESCRIPTORS : for ( Config classDescriptor : descriptorsSection . getChildren ( ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4437",
            "SentID": 4458,
            "TokenID": "4",
            "Context": "if ( ! classDescriptor . hasAttribute ( \"interface\" ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4438",
            "SentID": 4459,
            "TokenID": "1",
            "Context": "classDescriptor . setAttribute ( \"interface\" , classDescriptor . getAttribute ( \"class\" ) ) ;"
        },
        {
            "Word": ".",
            "WordID": "4439",
            "SentID": 4459,
            "TokenID": "7",
            "Context": "classDescriptor . setAttribute ( \"interface\" , classDescriptor . getAttribute ( \"class\" ) ) ;"
        },
        {
            "Word": ".",
            "WordID": "4440",
            "SentID": 4460,
            "TokenID": "4",
            "Context": "String interfaceClass = classDescriptor . getAttribute ( \"interface\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4498",
            "SentID": 4529,
            "TokenID": "4",
            "Context": "Config section = config . getChild ( \"converters\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4499",
            "SentID": 4530,
            "TokenID": "6",
            "Context": "for ( Config el : section . findChildren ( \"type\" ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4500",
            "SentID": 4531,
            "TokenID": "4",
            "Context": "String className = el . getAttribute ( \"class\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4502",
            "SentID": 4534,
            "TokenID": "4",
            "Context": "String converterName = el . getAttribute ( \"converter\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4506",
            "SentID": 4539,
            "TokenID": "4",
            "Context": "Config pojoClassesSection = config . getChild ( \"pojo-classes\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4507",
            "SentID": 4541,
            "TokenID": "6",
            "Context": "for ( Config pojoClassElement : pojoClassesSection . getChildren ( ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4508",
            "SentID": 4542,
            "TokenID": "4",
            "Context": "String pojoClassName = pojoClassElement . getAttribute ( \"class\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4509",
            "SentID": 4544,
            "TokenID": "4",
            "Context": "Config configSection = config . getChild ( pojoClassElement . getName ( ) ) ;"
        },
        {
            "Word": ".",
            "WordID": "4512",
            "SentID": 4548,
            "TokenID": "6",
            "Context": "for ( Config staticElement : configSection . findChildren ( \"static-field\" ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4513",
            "SentID": 4549,
            "TokenID": "4",
            "Context": "String fieldName = staticElement . getAttribute ( \"name\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4514",
            "SentID": 4550,
            "TokenID": "4",
            "Context": "if ( ! staticElement . hasAttribute ( \"value\" ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4517",
            "SentID": 4554,
            "TokenID": "4",
            "Context": "Object value = staticElement . getAttribute ( \"value\" , staticField . getType ( ) ) ;"
        },
        {
            "Word": ".",
            "WordID": "4774",
            "SentID": 4856,
            "TokenID": "6",
            "Context": "Grid . HeaderRow headerRow = grid . getHeaderRow ( 1 ) ;"
        },
        {
            "Labels": [
                "You haven't provided any Java code tokens for me to generate a label or theme. Please provide the necessary information."
            ],
            "Meaningful": "Yes",
            "Lexicographic": ".",
            "Syntactic": "dot  operator",
            "Semantic": "function calls, accessor",
            "Description": "dot operator used to call functions on objects and access variables",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Inferior",
            "Q4_Answer": "",
            "Q5_Answer": "Syntactic",
            "Q6_Answer": "None"
        }
    ],
    "250": [
        {
            "Word": "getRestriction",
            "WordID": "1",
            "SentID": 3441,
            "TokenID": "5",
            "Context": "XsdRestriction unionMemberRestriction = unionMember . getRestriction ( ) ;"
        },
        {
            "Word": "unionMemberRestriction",
            "WordID": "2",
            "SentID": 3442,
            "TokenID": "2",
            "Context": "if ( unionMemberRestriction != null ) {"
        },
        {
            "Word": "unionMemberRestriction",
            "WordID": "3",
            "SentID": 3443,
            "TokenID": "11",
            "Context": "XsdRestriction existingRestriction = restrictions . getOrDefault ( xsdBuiltinTypes . get ( unionMemberRestriction . getBase ( ) ) , null ) ;"
        },
        {
            "Word": "existingRestriction",
            "WordID": "2",
            "SentID": 3444,
            "TokenID": "2",
            "Context": "if ( existingRestriction != null ) {"
        },
        {
            "Word": "existingRestriction",
            "WordID": "3",
            "SentID": 3445,
            "TokenID": "4",
            "Context": "if ( existsRestrictionOverlap ( existingRestriction , unionMemberRestriction ) ) {"
        },
        {
            "Word": "unionMemberRestriction",
            "WordID": "4",
            "SentID": 3445,
            "TokenID": "6",
            "Context": "if ( existsRestrictionOverlap ( existingRestriction , unionMemberRestriction ) ) {"
        },
        {
            "Word": "updateExistingRestriction",
            "WordID": "1",
            "SentID": 3446,
            "TokenID": "0",
            "Context": "updateExistingRestriction ( existingRestriction , unionMemberRestriction ) ;"
        },
        {
            "Word": "existingRestriction",
            "WordID": "4",
            "SentID": 3446,
            "TokenID": "2",
            "Context": "updateExistingRestriction ( existingRestriction , unionMemberRestriction ) ;"
        },
        {
            "Word": "unionMemberRestriction",
            "WordID": "5",
            "SentID": 3446,
            "TokenID": "4",
            "Context": "updateExistingRestriction ( existingRestriction , unionMemberRestriction ) ;"
        },
        {
            "Word": "updateExistingRestriction",
            "WordID": "2",
            "SentID": 3449,
            "TokenID": "3",
            "Context": "} private void updateExistingRestriction ( XsdRestriction existing , XsdRestriction newRestriction ) {"
        },
        {
            "Word": "newRestriction",
            "WordID": "1",
            "SentID": 3449,
            "TokenID": "9",
            "Context": "} private void updateExistingRestriction ( XsdRestriction existing , XsdRestriction newRestriction ) {"
        },
        {
            "Word": "newRestriction",
            "WordID": "2",
            "SentID": 3450,
            "TokenID": "3",
            "Context": "XsdPattern pattern = newRestriction . getPattern ( ) ;"
        },
        {
            "Word": "newRestriction",
            "WordID": "3",
            "SentID": 3451,
            "TokenID": "3",
            "Context": "XsdMaxExclusive maxExclusive = newRestriction . getMaxExclusive ( ) ;"
        },
        {
            "Word": "newRestriction",
            "WordID": "4",
            "SentID": 3452,
            "TokenID": "3",
            "Context": "XsdMaxInclusive maxInclusive = newRestriction . getMaxInclusive ( ) ;"
        },
        {
            "Word": "newRestriction",
            "WordID": "5",
            "SentID": 3453,
            "TokenID": "3",
            "Context": "XsdMaxLength maxLength = newRestriction . getMaxLength ( ) ;"
        },
        {
            "Word": "newRestriction",
            "WordID": "6",
            "SentID": 3454,
            "TokenID": "3",
            "Context": "XsdMinExclusive minExclusive = newRestriction . getMinExclusive ( ) ;"
        },
        {
            "Word": "newRestriction",
            "WordID": "7",
            "SentID": 3455,
            "TokenID": "3",
            "Context": "XsdMinInclusive minInclusive = newRestriction . getMinInclusive ( ) ;"
        },
        {
            "Word": "newRestriction",
            "WordID": "8",
            "SentID": 3456,
            "TokenID": "3",
            "Context": "XsdMinLength minLength = newRestriction . getMinLength ( ) ;"
        },
        {
            "Word": "newRestriction",
            "WordID": "9",
            "SentID": 3457,
            "TokenID": "3",
            "Context": "XsdLength length = newRestriction . getLength ( ) ;"
        },
        {
            "Word": "newRestriction",
            "WordID": "10",
            "SentID": 3458,
            "TokenID": "3",
            "Context": "XsdFractionDigits fractionDigits = newRestriction . getFractionDigits ( ) ;"
        },
        {
            "Word": "newRestriction",
            "WordID": "11",
            "SentID": 3459,
            "TokenID": "3",
            "Context": "XsdTotalDigits totalDigits = newRestriction . getTotalDigits ( ) ;"
        },
        {
            "Word": "newRestriction",
            "WordID": "12",
            "SentID": 3460,
            "TokenID": "3",
            "Context": "XsdWhiteSpace whiteSpace = newRestriction . getWhiteSpace ( ) ;"
        },
        {
            "Word": "newRestriction",
            "WordID": "13",
            "SentID": 3483,
            "TokenID": "4",
            "Context": "updateExistingRestrictionEnumerations ( existing , newRestriction ) ;"
        },
        {
            "Word": "newRestriction",
            "WordID": "14",
            "SentID": 3484,
            "TokenID": "9",
            "Context": "} private void updateExistingRestrictionEnumerations ( XsdRestriction existing , XsdRestriction newRestriction ) {"
        },
        {
            "Word": "newRestriction",
            "WordID": "15",
            "SentID": 3486,
            "TokenID": "6",
            "Context": "List < XsdEnumeration > newRestrictionEnumeration = newRestriction . getEnumeration ( ) ;"
        },
        {
            "Word": "newRestriction",
            "WordID": "16",
            "SentID": 3493,
            "TokenID": "9",
            "Context": "} private boolean existsRestrictionOverlap ( XsdRestriction existing , XsdRestriction newRestriction ) {"
        },
        {
            "Word": "newRestriction",
            "WordID": "17",
            "SentID": 3494,
            "TokenID": "9",
            "Context": "return hasDifferentValue ( existing . getPattern ( ) , newRestriction . getPattern ( ) ) ||"
        },
        {
            "Word": "newRestriction",
            "WordID": "18",
            "SentID": 3495,
            "TokenID": "8",
            "Context": "hasDifferentValue ( existing . getWhiteSpace ( ) , newRestriction . getWhiteSpace ( ) ) ||"
        },
        {
            "Word": "newRestriction",
            "WordID": "19",
            "SentID": 3496,
            "TokenID": "8",
            "Context": "hasDifferentValue ( existing . getTotalDigits ( ) , newRestriction . getTotalDigits ( ) ) ||"
        },
        {
            "Word": "newRestriction",
            "WordID": "20",
            "SentID": 3497,
            "TokenID": "8",
            "Context": "hasDifferentValue ( existing . getFractionDigits ( ) , newRestriction . getFractionDigits ( ) ) ||"
        },
        {
            "Word": "newRestriction",
            "WordID": "21",
            "SentID": 3498,
            "TokenID": "8",
            "Context": "hasDifferentValue ( existing . getMaxExclusive ( ) , newRestriction . getMaxExclusive ( ) ) ||"
        },
        {
            "Word": "newRestriction",
            "WordID": "22",
            "SentID": 3499,
            "TokenID": "8",
            "Context": "hasDifferentValue ( existing . getMaxInclusive ( ) , newRestriction . getMaxInclusive ( ) ) ||"
        },
        {
            "Word": "newRestriction",
            "WordID": "23",
            "SentID": 3500,
            "TokenID": "8",
            "Context": "hasDifferentValue ( existing . getMaxLength ( ) , newRestriction . getMaxLength ( ) ) ||"
        },
        {
            "Word": "newRestriction",
            "WordID": "24",
            "SentID": 3501,
            "TokenID": "8",
            "Context": "hasDifferentValue ( existing . getMinExclusive ( ) , newRestriction . getMinExclusive ( ) ) ||"
        },
        {
            "Word": "newRestriction",
            "WordID": "25",
            "SentID": 3502,
            "TokenID": "8",
            "Context": "hasDifferentValue ( existing . getMinInclusive ( ) , newRestriction . getMinInclusive ( ) ) ||"
        },
        {
            "Word": "newRestriction",
            "WordID": "26",
            "SentID": 3503,
            "TokenID": "8",
            "Context": "hasDifferentValue ( existing . getMinLength ( ) , newRestriction . getMinLength ( ) ) ||"
        },
        {
            "Word": "newRestriction",
            "WordID": "27",
            "SentID": 3504,
            "TokenID": "8",
            "Context": "hasDifferentValue ( existing . getLength ( ) , newRestriction . getLength ( ) ) ;"
        },
        {
            "Labels": [
                "\"Restriction Management in Union Members\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "newRestriction, Restriction substring",
            "Syntactic": "objects, methods",
            "Semantic": "function calls, variable assignment",
            "Description": "identifiers with \"newRestriction\" or \"restriction\" as substrings. Many are objects but a few are method calls.",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "466": [
        {
            "Word": "type",
            "WordID": "4",
            "SentID": 3505,
            "TokenID": "18",
            "Context": "if ( attributesMap . containsKey ( REF_TAG ) && ( simpleType != null || form != null || type != null ) ) {"
        },
        {
            "Word": "type",
            "WordID": "7",
            "SentID": 3523,
            "TokenID": "16",
            "Context": "if ( this . type instanceof UnsolvedReference && isComplexOrSimpleType && ( ( UnsolvedReference ) this . type ) . getRef ( ) . equals ( element . getName ( ) ) ) {"
        },
        {
            "Word": "targetType",
            "WordID": "2",
            "SentID": 3642,
            "TokenID": "2",
            "Context": "if ( targetType . isAssignableFrom ( List . class ) || targetType . isAssignableFrom ( Collection . class ) ) {"
        },
        {
            "Word": "targetType",
            "WordID": "3",
            "SentID": 3642,
            "TokenID": "11",
            "Context": "if ( targetType . isAssignableFrom ( List . class ) || targetType . isAssignableFrom ( Collection . class ) ) {"
        },
        {
            "Word": "type",
            "WordID": "11",
            "SentID": 3644,
            "TokenID": "5",
            "Context": ". objects ( annotation . type ( ) , annotation . size ( ) , annotation . excludes ( ) )"
        },
        {
            "Word": "type",
            "WordID": "12",
            "SentID": 3647,
            "TokenID": "7",
            "Context": "return random . objects ( annotation . type ( ) , annotation . size ( ) , annotation . excludes ( ) ) ;"
        },
        {
            "Word": "type",
            "WordID": "14",
            "SentID": 3965,
            "TokenID": "2",
            "Context": "if ( type . equals ( Form . class ) ) {"
        },
        {
            "Word": "type",
            "WordID": "15",
            "SentID": 3967,
            "TokenID": "3",
            "Context": "else if ( type . equals ( FormIterator . class ) ) {"
        },
        {
            "Word": "type",
            "WordID": "16",
            "SentID": 3969,
            "TokenID": "3",
            "Context": "else if ( type . equals ( UploadedFile . class ) ) {"
        },
        {
            "Word": "type",
            "WordID": "17",
            "SentID": 3972,
            "TokenID": "3",
            "Context": "else if ( type . equals ( UploadStream . class ) ) {"
        },
        {
            "Word": "type",
            "WordID": "18",
            "SentID": 3974,
            "TokenID": "3",
            "Context": "else if ( type . equals ( InputStream . class ) ) {"
        },
        {
            "Word": "type",
            "WordID": "19",
            "SentID": 3976,
            "TokenID": "10",
            "Context": "arguments [ 0 ] = new FormObject ( httpRequest , type ) . getValue ( ) ;"
        },
        {
            "Word": "type",
            "WordID": "20",
            "SentID": 4269,
            "TokenID": "7",
            "Context": "} private static Class < ? > type ( Field field ) {"
        },
        {
            "Word": "type",
            "WordID": "22",
            "SentID": 4279,
            "TokenID": "6",
            "Context": "if ( stackTrace . contains ( type ) ) {"
        },
        {
            "Word": "type",
            "WordID": "23",
            "SentID": 4280,
            "TokenID": "4",
            "Context": "stackTrace . add ( type ) ;"
        },
        {
            "Word": "type",
            "WordID": "24",
            "SentID": 4286,
            "TokenID": "4",
            "Context": "stackTrace . push ( type ) ;"
        },
        {
            "Word": "type",
            "WordID": "25",
            "SentID": 4287,
            "TokenID": "7",
            "Context": "ManagedClassSPI dependencyManagedClass = container . getManagedClass ( type ) ;"
        },
        {
            "Word": "type",
            "WordID": "26",
            "SentID": 4289,
            "TokenID": "13",
            "Context": "ScopeProxyHandler < ? > handler = new ScopeProxyHandler < > ( container , type ) ;"
        },
        {
            "Word": "type",
            "WordID": "27",
            "SentID": 4291,
            "TokenID": "15",
            "Context": "Object value = container . getOptionalInstance ( ( Class < ? super Object > ) type ) ;"
        },
        {
            "Word": "type",
            "WordID": "28",
            "SentID": 4292,
            "TokenID": "6",
            "Context": "if ( Types . isKindOf ( type , AppFactory . class ) ) {"
        },
        {
            "Word": "type",
            "WordID": "29",
            "SentID": 4294,
            "TokenID": "6",
            "Context": "if ( Classes . isInstantiable ( type ) ) {"
        },
        {
            "Word": "type",
            "WordID": "30",
            "SentID": 4295,
            "TokenID": "5",
            "Context": "return Classes . newInstance ( type ) ;"
        },
        {
            "Word": "type",
            "WordID": "32",
            "SentID": 4656,
            "TokenID": "6",
            "Context": "if ( Types . isKindOf ( type , Document . class ) ) {"
        },
        {
            "Word": "type",
            "WordID": "33",
            "SentID": 4658,
            "TokenID": "8",
            "Context": "} else if ( Types . isKindOf ( type , InputStream . class ) ) {"
        },
        {
            "Word": "type",
            "WordID": "35",
            "SentID": 4734,
            "TokenID": "11",
            "Context": "return ConverterRegistry . getConverter ( ) . asObject ( value , type ) ;"
        },
        {
            "Word": "type",
            "WordID": "36",
            "SentID": 4919,
            "TokenID": "7",
            "Context": "Object object = Classes . newInstance ( type ) ;"
        },
        {
            "Word": "type",
            "WordID": "37",
            "SentID": 4920,
            "TokenID": "7",
            "Context": "Field field = Classes . getField ( type , Strings . toMemberName ( parameter . getName ( ) ) ) ;"
        },
        {
            "Word": "type",
            "WordID": "39",
            "SentID": 4930,
            "TokenID": "8",
            "Context": "return ( T ) Types . getEmptyValue ( type ) ;"
        },
        {
            "Word": "type",
            "WordID": "40",
            "SentID": 4931,
            "TokenID": "7",
            "Context": "if ( ! Types . isArrayLike ( type ) ) {"
        },
        {
            "Word": "type",
            "WordID": "42",
            "SentID": 4933,
            "TokenID": "6",
            "Context": "if ( ConverterRegistry . hasType ( type ) ) {"
        },
        {
            "Word": "type",
            "WordID": "43",
            "SentID": 4934,
            "TokenID": "17",
            "Context": "return ConverterRegistry . getConverter ( ) . asObject ( value , ( Class < T > ) type ) ;"
        },
        {
            "Word": "type",
            "WordID": "45",
            "SentID": 4938,
            "TokenID": "6",
            "Context": "if ( Types . isKindOf ( type , Collection . class ) ) {"
        },
        {
            "Word": "type",
            "WordID": "46",
            "SentID": 4939,
            "TokenID": "3",
            "Context": "Type collectionType = type ;"
        },
        {
            "Word": "type",
            "WordID": "48",
            "SentID": 4942,
            "TokenID": "6",
            "Context": "collectionType = ( ( ParameterizedType ) type ) . getRawType ( ) ;"
        },
        {
            "Word": "type",
            "WordID": "49",
            "SentID": 4943,
            "TokenID": "12",
            "Context": "itemType = ( Class < ? > ) ( ( ParameterizedType ) type ) . getActualTypeArguments ( ) [ 0 ] ;"
        },
        {
            "Word": "type",
            "WordID": "51",
            "SentID": 4951,
            "TokenID": "6",
            "Context": "if ( Types . isPrimitive ( type ) ) {"
        },
        {
            "Word": "type",
            "WordID": "52",
            "SentID": 4952,
            "TokenID": "6",
            "Context": "if ( Types . isArrayLike ( type ) ) {"
        },
        {
            "Word": "type",
            "WordID": "53",
            "SentID": 4953,
            "TokenID": "6",
            "Context": "if ( Types . isMap ( type ) ) {"
        },
        {
            "Word": "type",
            "WordID": "54",
            "SentID": 4957,
            "TokenID": "13",
            "Context": "return json . parse ( new InputStreamReader ( inputStream , \"UTF-8\" ) , type ) ;"
        },
        {
            "Word": "type",
            "WordID": "55",
            "SentID": 4986,
            "TokenID": "9",
            "Context": "Closeable closeable = StreamFactory . getInstance ( inputStream , type ) ;"
        },
        {
            "Labels": [
                "\"Data Type Conversion\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "type ",
            "Syntactic": "object",
            "Semantic": "conditionals",
            "Description": "objects named type, many used in conditionals.",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "419": [
        {
            "Word": ",",
            "WordID": "815",
            "SentID": 3513,
            "TokenID": "10",
            "Context": "} private Node getSchemaNode ( String filePath ) throws IOException , SAXException , ParserConfigurationException {"
        },
        {
            "Word": ",",
            "WordID": "816",
            "SentID": 3513,
            "TokenID": "12",
            "Context": "} private Node getSchemaNode ( String filePath ) throws IOException , SAXException , ParserConfigurationException {"
        },
        {
            "Word": ",",
            "WordID": "951",
            "SentID": 3768,
            "TokenID": "3",
            "Context": ") throws ServletException , IOException {"
        },
        {
            "Word": ",",
            "WordID": "957",
            "SentID": 3773,
            "TokenID": "18",
            "Context": "public boolean getAllowRobots ( ServletContext servletContext , HttpServletRequest request , HttpServletResponse response , Page page ) throws ServletException , IOException {"
        },
        {
            "Word": ",",
            "WordID": "1030",
            "SentID": 3960,
            "TokenID": "16",
            "Context": "public Object [ ] read ( HttpServletRequest httpRequest , Type [ ] formalParameters ) throws IOException , IllegalArgumentException {"
        },
        {
            "Word": ",",
            "WordID": "1099",
            "SentID": 4262,
            "TokenID": "13",
            "Context": "} private void setValue ( String propertyPath , Object value ) throws ConverterException , IllegalAccessException {"
        },
        {
            "Word": ",",
            "WordID": "1116",
            "SentID": 4328,
            "TokenID": "2",
            "Context": "throws IOException , IllegalArgumentException , IllegalAccessException , FileNotFoundException , IllegalStateException {"
        },
        {
            "Word": ",",
            "WordID": "1117",
            "SentID": 4328,
            "TokenID": "4",
            "Context": "throws IOException , IllegalArgumentException , IllegalAccessException , FileNotFoundException , IllegalStateException {"
        },
        {
            "Word": ",",
            "WordID": "1118",
            "SentID": 4328,
            "TokenID": "6",
            "Context": "throws IOException , IllegalArgumentException , IllegalAccessException , FileNotFoundException , IllegalStateException {"
        },
        {
            "Word": ",",
            "WordID": "1119",
            "SentID": 4328,
            "TokenID": "8",
            "Context": "throws IOException , IllegalArgumentException , IllegalAccessException , FileNotFoundException , IllegalStateException {"
        },
        {
            "Word": ",",
            "WordID": "1205",
            "SentID": 4561,
            "TokenID": "16",
            "Context": "public < T > T invoke ( Object object , Object ... args ) throws AuthorizationException , IllegalArgumentException , InvocationException {"
        },
        {
            "Word": ",",
            "WordID": "1206",
            "SentID": 4561,
            "TokenID": "18",
            "Context": "public < T > T invoke ( Object object , Object ... args ) throws AuthorizationException , IllegalArgumentException , InvocationException {"
        },
        {
            "Word": ",",
            "WordID": "1229",
            "SentID": 4652,
            "TokenID": "18",
            "Context": "public < T > T asObject ( String string , Class < T > valueType ) throws IllegalArgumentException , ConverterException {"
        },
        {
            "Word": ",",
            "WordID": "1253",
            "SentID": 4747,
            "TokenID": "12",
            "Context": "protected void service ( HttpServletRequest httpRequest , HttpServletResponse httpResponse ) throws IOException , ServletException {"
        },
        {
            "Labels": [
                "\"Punctuation Marks in Java Code\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": ",",
            "Syntactic": "comma ",
            "Semantic": "parameters, function definitions, exception handling, Network",
            "Description": "comma used to seperate parameters in function definitions, many of which relate to network operations and throw exceptions.",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Syntactic",
            "Q6_Answer": "None"
        }
    ],
    "400": [
        {
            "Word": "<",
            "WordID": "152",
            "SentID": 3566,
            "TokenID": "3",
            "Context": "} public static < T extends XsdEnum > T belongsToEnum ( final XsdEnum < T > instance , final String value ) {"
        },
        {
            "Word": "<",
            "WordID": "210",
            "SentID": 4242,
            "TokenID": "3",
            "Context": "} private static < T extends Annotation > T getAnnotation ( Class < ? > clazz , Class < T > annotationClass ) {"
        },
        {
            "Word": "<",
            "WordID": "216",
            "SentID": 4250,
            "TokenID": "3",
            "Context": "} private static < T extends Annotation > T getAnnotation ( Method method , Class < T > annotationClass ) {"
        },
        {
            "Word": "<",
            "WordID": "256",
            "SentID": 4422,
            "TokenID": "1",
            "Context": "public < T > T newInstance ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": "<",
            "WordID": "258",
            "SentID": 4424,
            "TokenID": "1",
            "Context": "public < T > T getRemoteInstance ( String implementationURL , Class < ? super T > interfaceClass ) throws UnsupportedProtocolException {"
        },
        {
            "Word": "<",
            "WordID": "268",
            "SentID": 4502,
            "TokenID": "1",
            "Context": "public < T > T getInstance ( Class < ? super T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "<",
            "WordID": "270",
            "SentID": 4506,
            "TokenID": "1",
            "Context": "private < T > T getInstance ( ManagedClassSPI managedClass , InstanceKey instanceKey , Object ... args ) {"
        },
        {
            "Word": "<",
            "WordID": "276",
            "SentID": 4561,
            "TokenID": "1",
            "Context": "public < T > T invoke ( Object object , Object ... args ) throws AuthorizationException , IllegalArgumentException , InvocationException {"
        },
        {
            "Word": "<",
            "WordID": "279",
            "SentID": 4621,
            "TokenID": "1",
            "Context": "public < T > T asObject ( String string , Class < T > valueType ) {"
        },
        {
            "Word": "<",
            "WordID": "281",
            "SentID": 4652,
            "TokenID": "1",
            "Context": "public < T > T asObject ( String string , Class < T > valueType ) throws IllegalArgumentException , ConverterException {"
        },
        {
            "Word": "<",
            "WordID": "287",
            "SentID": 4732,
            "TokenID": "2",
            "Context": "} protected < T > T getParameter ( String name , Class < T > type ) {"
        },
        {
            "Word": "<",
            "WordID": "294",
            "SentID": 4841,
            "TokenID": "3",
            "Context": "} public static < T > T getInstance ( Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "<",
            "WordID": "296",
            "SentID": 4843,
            "TokenID": "3",
            "Context": "} public static < T > T getInstance ( String instanceName , Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "<",
            "WordID": "298",
            "SentID": 4845,
            "TokenID": "3",
            "Context": "} public static < T > T getOptionalInstance ( Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "<",
            "WordID": "300",
            "SentID": 4847,
            "TokenID": "3",
            "Context": "} public static < T > T getRemoteInstance ( String implementationURL , Class < ? super T > interfaceClass ) {"
        },
        {
            "Word": "<",
            "WordID": "303",
            "SentID": 4868,
            "TokenID": "1",
            "Context": "public < I > I newInstance ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": "<",
            "WordID": "313",
            "SentID": 4929,
            "TokenID": "2",
            "Context": "private static < T > T asObject ( String value , Type type ) {"
        },
        {
            "Labels": [
                "\"Period or Dot Operator in Java\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "< ",
            "Syntactic": "opening angle bracket",
            "Semantic": "generics, function definition",
            "Description": "angular bracket to specify type in Generics",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Syntactic",
            "Q6_Answer": "None"
        }
    ],
    "497": [
        {
            "Word": ">",
            "WordID": "161",
            "SentID": 3566,
            "TokenID": "7",
            "Context": "} public static < T extends XsdEnum > T belongsToEnum ( final XsdEnum < T > instance , final String value ) {"
        },
        {
            "Word": ">",
            "WordID": "213",
            "SentID": 4242,
            "TokenID": "7",
            "Context": "} private static < T extends Annotation > T getAnnotation ( Class < ? > clazz , Class < T > annotationClass ) {"
        },
        {
            "Word": ">",
            "WordID": "219",
            "SentID": 4250,
            "TokenID": "7",
            "Context": "} private static < T extends Annotation > T getAnnotation ( Method method , Class < T > annotationClass ) {"
        },
        {
            "Word": ">",
            "WordID": "258",
            "SentID": 4422,
            "TokenID": "3",
            "Context": "public < T > T newInstance ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": ">",
            "WordID": "260",
            "SentID": 4424,
            "TokenID": "3",
            "Context": "public < T > T getRemoteInstance ( String implementationURL , Class < ? super T > interfaceClass ) throws UnsupportedProtocolException {"
        },
        {
            "Word": ">",
            "WordID": "269",
            "SentID": 4502,
            "TokenID": "3",
            "Context": "public < T > T getInstance ( Class < ? super T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": ">",
            "WordID": "271",
            "SentID": 4506,
            "TokenID": "3",
            "Context": "private < T > T getInstance ( ManagedClassSPI managedClass , InstanceKey instanceKey , Object ... args ) {"
        },
        {
            "Word": ">",
            "WordID": "277",
            "SentID": 4561,
            "TokenID": "3",
            "Context": "public < T > T invoke ( Object object , Object ... args ) throws AuthorizationException , IllegalArgumentException , InvocationException {"
        },
        {
            "Word": ">",
            "WordID": "280",
            "SentID": 4621,
            "TokenID": "3",
            "Context": "public < T > T asObject ( String string , Class < T > valueType ) {"
        },
        {
            "Word": ">",
            "WordID": "282",
            "SentID": 4652,
            "TokenID": "3",
            "Context": "public < T > T asObject ( String string , Class < T > valueType ) throws IllegalArgumentException , ConverterException {"
        },
        {
            "Word": ">",
            "WordID": "288",
            "SentID": 4732,
            "TokenID": "4",
            "Context": "} protected < T > T getParameter ( String name , Class < T > type ) {"
        },
        {
            "Word": ">",
            "WordID": "295",
            "SentID": 4841,
            "TokenID": "5",
            "Context": "} public static < T > T getInstance ( Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": ">",
            "WordID": "297",
            "SentID": 4843,
            "TokenID": "5",
            "Context": "} public static < T > T getInstance ( String instanceName , Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": ">",
            "WordID": "299",
            "SentID": 4845,
            "TokenID": "5",
            "Context": "} public static < T > T getOptionalInstance ( Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": ">",
            "WordID": "301",
            "SentID": 4847,
            "TokenID": "5",
            "Context": "} public static < T > T getRemoteInstance ( String implementationURL , Class < ? super T > interfaceClass ) {"
        },
        {
            "Word": ">",
            "WordID": "303",
            "SentID": 4868,
            "TokenID": "3",
            "Context": "public < I > I newInstance ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": ">",
            "WordID": "310",
            "SentID": 4929,
            "TokenID": "4",
            "Context": "private static < T > T asObject ( String value , Type type ) {"
        },
        {
            "Labels": [
                "\"Accessing Properties or Methods in Java\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": ">",
            "Syntactic": "closing angle bracket",
            "Semantic": "Generics, Function definitions",
            "Description": "closing angle bracket to specify type in Generics in function definitions",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Syntactic",
            "Q6_Answer": "None"
        }
    ],
    "273": [
        {
            "Word": "getAnnotation",
            "WordID": "1",
            "SentID": 3637,
            "TokenID": "7",
            "Context": "return parameterContext . getParameter ( ) . getAnnotation ( Random . class ) != null ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "2",
            "SentID": 3640,
            "TokenID": "6",
            "Context": "parameterContext . getParameter ( ) . getAnnotation ( Random . class ) ) ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "3",
            "SentID": 3708,
            "TokenID": "6",
            "Context": "Arrays . asList ( annotatedElement . getAnnotation ( SystemProperties . class ) . value ( ) ) ) ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "4",
            "SentID": 3710,
            "TokenID": "6",
            "Context": "systemProperties . add ( annotatedElement . getAnnotation ( SystemProperty . class ) ) ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "5",
            "SentID": 4064,
            "TokenID": "3",
            "Context": "Controller controllerAnnotation = getAnnotation ( implementationClass , Controller . class ) ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "6",
            "SentID": 4068,
            "TokenID": "3",
            "Context": "Service serviceAnnotation = getAnnotation ( implementationClass , Service . class ) ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "7",
            "SentID": 4071,
            "TokenID": "3",
            "Context": "Remote remoteAnnotation = getAnnotation ( implementationClass , Remote . class ) ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "8",
            "SentID": 4073,
            "TokenID": "3",
            "Context": "RequestPath requestPathAnnotation = getAnnotation ( implementationClass , RequestPath . class ) ;"
        },
        {
            "Word": "hasAnnotation",
            "WordID": "1",
            "SentID": 4080,
            "TokenID": "3",
            "Context": "boolean transactionalType = hasAnnotation ( implementationClass , Transactional . class ) ;"
        },
        {
            "Word": "hasAnnotation",
            "WordID": "2",
            "SentID": 4081,
            "TokenID": "3",
            "Context": "boolean immutableType = hasAnnotation ( implementationClass , Immutable . class ) ;"
        },
        {
            "Word": "hasAnnotation",
            "WordID": "3",
            "SentID": 4085,
            "TokenID": "3",
            "Context": "boolean publicType = hasAnnotation ( implementationClass , Public . class ) ;"
        },
        {
            "Word": "hasAnnotation",
            "WordID": "4",
            "SentID": 4091,
            "TokenID": "3",
            "Context": "boolean remoteMethod = hasAnnotation ( method , Remote . class ) ;"
        },
        {
            "Word": "hasAnnotation",
            "WordID": "5",
            "SentID": 4094,
            "TokenID": "2",
            "Context": "if ( hasAnnotation ( method , Local . class ) ) {"
        },
        {
            "Word": "hasAnnotation",
            "WordID": "6",
            "SentID": 4103,
            "TokenID": "3",
            "Context": "boolean publicMethod = hasAnnotation ( method , Public . class ) ;"
        },
        {
            "Word": "hasAnnotation",
            "WordID": "7",
            "SentID": 4107,
            "TokenID": "2",
            "Context": "if ( hasAnnotation ( method , Private . class ) ) {"
        },
        {
            "Word": "getAnnotation",
            "WordID": "9",
            "SentID": 4110,
            "TokenID": "3",
            "Context": "RequestPath methodPath = getAnnotation ( method , RequestPath . class ) ;"
        },
        {
            "Word": "hasAnnotation",
            "WordID": "8",
            "SentID": 4118,
            "TokenID": "2",
            "Context": "transactionalType = hasAnnotation ( method , Transactional . class ) ;"
        },
        {
            "Word": "hasAnnotation",
            "WordID": "9",
            "SentID": 4122,
            "TokenID": "3",
            "Context": "boolean immutable = hasAnnotation ( method , Immutable . class ) ;"
        },
        {
            "Word": "hasAnnotation",
            "WordID": "10",
            "SentID": 4126,
            "TokenID": "2",
            "Context": "if ( hasAnnotation ( method , Mutable . class ) ) {"
        },
        {
            "Word": "hasAnnotation",
            "WordID": "11",
            "SentID": 4133,
            "TokenID": "3",
            "Context": "boolean asynchronousMethod = hasAnnotation ( method , Asynchronous . class ) ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "10",
            "SentID": 4137,
            "TokenID": "3",
            "Context": "Cron cronMethod = getAnnotation ( method , Cron . class ) ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "11",
            "SentID": 4147,
            "TokenID": "5",
            "Context": "ContextParam contextParam = field . getAnnotation ( ContextParam . class ) ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "12",
            "SentID": 4205,
            "TokenID": "4",
            "Context": "if ( declaredConstructor . getAnnotation ( Test . class ) != null ) {"
        },
        {
            "Word": "getAnnotation",
            "WordID": "14",
            "SentID": 4243,
            "TokenID": "5",
            "Context": "T annotation = clazz . getAnnotation ( annotationClass ) ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "15",
            "SentID": 4245,
            "TokenID": "4",
            "Context": "annotation = interfaceClass . getAnnotation ( annotationClass ) ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "16",
            "SentID": 4249,
            "TokenID": "5",
            "Context": "Annotation annotation = clazz . getAnnotation ( annotationClass ) ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "18",
            "SentID": 4251,
            "TokenID": "5",
            "Context": "T annotation = method . getAnnotation ( annotationClass ) ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "19",
            "SentID": 4253,
            "TokenID": "19",
            "Context": "annotation = interfaceClass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) . getAnnotation ( annotationClass ) ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "20",
            "SentID": 4258,
            "TokenID": "3",
            "Context": "Intercepted intercepted = getAnnotation ( clazz , Intercepted . class ) ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "21",
            "SentID": 4261,
            "TokenID": "3",
            "Context": "Intercepted intercepted = getAnnotation ( method , Intercepted . class ) ;"
        },
        {
            "Word": "getAnnotation",
            "WordID": "22",
            "SentID": 4894,
            "TokenID": "0",
            "Context": "getAnnotation ( entityType , property , Description . class )"
        },
        {
            "Word": "getAnnotation",
            "WordID": "23",
            "SentID": 4998,
            "TokenID": "2",
            "Context": "if ( getAnnotation ( beanType , property , Id . class ) . isPresent ( ) || property . getName ( ) . equals ( \"name\" ) ) {"
        },
        {
            "Labels": [
                "\"Annotation Handling in Java\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "Annotation",
            "Syntactic": "method",
            "Semantic": "function calls, getters, ",
            "Description": "getter methods with \"annotation\" substring",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "128": [
        {
            "Word": ".",
            "WordID": "3824",
            "SentID": 3637,
            "TokenID": "10",
            "Context": "return parameterContext . getParameter ( ) . getAnnotation ( Random . class ) != null ;"
        },
        {
            "Word": ".",
            "WordID": "3829",
            "SentID": 3640,
            "TokenID": "9",
            "Context": "parameterContext . getParameter ( ) . getAnnotation ( Random . class ) ) ;"
        },
        {
            "Word": ".",
            "WordID": "3831",
            "SentID": 3642,
            "TokenID": "7",
            "Context": "if ( targetType . isAssignableFrom ( List . class ) || targetType . isAssignableFrom ( Collection . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "3833",
            "SentID": 3642,
            "TokenID": "16",
            "Context": "if ( targetType . isAssignableFrom ( List . class ) || targetType . isAssignableFrom ( Collection . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "3839",
            "SentID": 3645,
            "TokenID": "9",
            "Context": "} else if ( targetType . isAssignableFrom ( Set . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "3841",
            "SentID": 3646,
            "TokenID": "9",
            "Context": "} else if ( targetType . isAssignableFrom ( Stream . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "3866",
            "SentID": 3674,
            "TokenID": "10",
            "Context": "parameterContext , key -> new TemporaryFolder ( ) , TemporaryFolder . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "3895",
            "SentID": 3706,
            "TokenID": "7",
            "Context": "if ( isAnnotated ( annotatedElement , SystemProperties . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "3899",
            "SentID": 3708,
            "TokenID": "9",
            "Context": "Arrays . asList ( annotatedElement . getAnnotation ( SystemProperties . class ) . value ( ) ) ) ;"
        },
        {
            "Word": ".",
            "WordID": "3901",
            "SentID": 3709,
            "TokenID": "7",
            "Context": "if ( isAnnotated ( annotatedElement , SystemProperty . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "3904",
            "SentID": 3710,
            "TokenID": "9",
            "Context": "systemProperties . add ( annotatedElement . getAnnotation ( SystemProperty . class ) ) ;"
        },
        {
            "Word": ".",
            "WordID": "3982",
            "SentID": 3851,
            "TokenID": "4",
            "Context": "URL url = Dictionary . class . getClassLoader ( ) . getResource ( \"data\" ) ;"
        },
        {
            "Word": ".",
            "WordID": "4031",
            "SentID": 3946,
            "TokenID": "13",
            "Context": "List < String > results = template . queryForList ( sql , String . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4047",
            "SentID": 3965,
            "TokenID": "7",
            "Context": "if ( type . equals ( Form . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4049",
            "SentID": 3967,
            "TokenID": "8",
            "Context": "else if ( type . equals ( FormIterator . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4051",
            "SentID": 3969,
            "TokenID": "8",
            "Context": "else if ( type . equals ( UploadedFile . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4054",
            "SentID": 3972,
            "TokenID": "8",
            "Context": "else if ( type . equals ( UploadStream . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4057",
            "SentID": 3974,
            "TokenID": "8",
            "Context": "else if ( type . equals ( InputStream . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4068",
            "SentID": 3988,
            "TokenID": "14",
            "Context": "if ( ! Types . isKindOf ( managedMethod . getReturnType ( ) , Resource . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4123",
            "SentID": 4064,
            "TokenID": "8",
            "Context": "Controller controllerAnnotation = getAnnotation ( implementationClass , Controller . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4125",
            "SentID": 4068,
            "TokenID": "8",
            "Context": "Service serviceAnnotation = getAnnotation ( implementationClass , Service . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4127",
            "SentID": 4071,
            "TokenID": "8",
            "Context": "Remote remoteAnnotation = getAnnotation ( implementationClass , Remote . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4128",
            "SentID": 4073,
            "TokenID": "8",
            "Context": "RequestPath requestPathAnnotation = getAnnotation ( implementationClass , RequestPath . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4131",
            "SentID": 4080,
            "TokenID": "8",
            "Context": "boolean transactionalType = hasAnnotation ( implementationClass , Transactional . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4132",
            "SentID": 4081,
            "TokenID": "8",
            "Context": "boolean immutableType = hasAnnotation ( implementationClass , Immutable . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4134",
            "SentID": 4085,
            "TokenID": "8",
            "Context": "boolean publicType = hasAnnotation ( implementationClass , Public . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4139",
            "SentID": 4091,
            "TokenID": "8",
            "Context": "boolean remoteMethod = hasAnnotation ( method , Remote . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4140",
            "SentID": 4094,
            "TokenID": "7",
            "Context": "if ( hasAnnotation ( method , Local . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4142",
            "SentID": 4103,
            "TokenID": "8",
            "Context": "boolean publicMethod = hasAnnotation ( method , Public . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4143",
            "SentID": 4107,
            "TokenID": "7",
            "Context": "if ( hasAnnotation ( method , Private . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4144",
            "SentID": 4110,
            "TokenID": "8",
            "Context": "RequestPath methodPath = getAnnotation ( method , RequestPath . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4151",
            "SentID": 4118,
            "TokenID": "7",
            "Context": "transactionalType = hasAnnotation ( method , Transactional . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4153",
            "SentID": 4122,
            "TokenID": "8",
            "Context": "boolean immutable = hasAnnotation ( method , Immutable . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4154",
            "SentID": 4126,
            "TokenID": "7",
            "Context": "if ( hasAnnotation ( method , Mutable . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4158",
            "SentID": 4133,
            "TokenID": "8",
            "Context": "boolean asynchronousMethod = hasAnnotation ( method , Asynchronous . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4162",
            "SentID": 4137,
            "TokenID": "8",
            "Context": "Cron cronMethod = getAnnotation ( method , Cron . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4172",
            "SentID": 4147,
            "TokenID": "8",
            "Context": "ContextParam contextParam = field . getAnnotation ( ContextParam . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4183",
            "SentID": 4160,
            "TokenID": "9",
            "Context": "if ( Types . isKindOf ( implementationClass , ManagedLifeCycle . class ) && ! InstanceScope . APPLICATION . equals ( instanceScope ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4205",
            "SentID": 4182,
            "TokenID": "9",
            "Context": "if ( Types . isKindOf ( interfaceClass , ManagedLifeCycle . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4210",
            "SentID": 4188,
            "TokenID": "10",
            "Context": "InstanceScope instanceScope = descriptor . getAttribute ( \"scope\" , InstanceScope . class , InstanceScope . APPLICATION ) ;"
        },
        {
            "Word": ".",
            "WordID": "4214",
            "SentID": 4192,
            "TokenID": "10",
            "Context": "InstanceType instanceType = descriptor . getAttribute ( \"type\" , InstanceType . class , InstanceType . POJO ) ;"
        },
        {
            "Word": ".",
            "WordID": "4226",
            "SentID": 4205,
            "TokenID": "7",
            "Context": "if ( declaredConstructor . getAnnotation ( Test . class ) != null ) {"
        },
        {
            "Word": ".",
            "WordID": "4230",
            "SentID": 4214,
            "TokenID": "8",
            "Context": "if ( ! field . isAnnotationPresent ( Inject . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4272",
            "SentID": 4258,
            "TokenID": "8",
            "Context": "Intercepted intercepted = getAnnotation ( clazz , Intercepted . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4274",
            "SentID": 4261,
            "TokenID": "8",
            "Context": "Intercepted intercepted = getAnnotation ( method , Intercepted . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4283",
            "SentID": 4270,
            "TokenID": "13",
            "Context": "if ( Types . isKindOf ( field . getType ( ) , List . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4306",
            "SentID": 4292,
            "TokenID": "9",
            "Context": "if ( Types . isKindOf ( type , AppFactory . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4450",
            "SentID": 4474,
            "TokenID": "8",
            "Context": "ManagedClassSPI appContext = classesPool . get ( AppContext . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4453",
            "SentID": 4475,
            "TokenID": "17",
            "Context": "if ( appContext != null && Types . isKindOf ( appContext . getImplementationClass ( ) , ContainerSPI . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4473",
            "SentID": 4489,
            "TokenID": "13",
            "Context": "if ( Types . isKindOf ( managedClass . getImplementationClass ( ) , ManagedPreDestroy . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4577",
            "SentID": 4646,
            "TokenID": "8",
            "Context": "TemplateEngine templateEngine = Classes . loadService ( TemplateEngine . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4586",
            "SentID": 4656,
            "TokenID": "9",
            "Context": "if ( Types . isKindOf ( type , Document . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4589",
            "SentID": 4658,
            "TokenID": "11",
            "Context": "} else if ( Types . isKindOf ( type , InputStream . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4671",
            "SentID": 4754,
            "TokenID": "8",
            "Context": "RequestContext context = container . getInstance ( RequestContext . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4715",
            "SentID": 4796,
            "TokenID": "8",
            "Context": "Json json = Classes . loadService ( Json . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4752",
            "SentID": 4827,
            "TokenID": "12",
            "Context": "TransactionalResource transactionalResource = managedClass . getContainer ( ) . getInstance ( TransactionalResource . class ) ;"
        },
        {
            "Word": ".",
            "WordID": "4807",
            "SentID": 4885,
            "TokenID": "5",
            "Context": "getPropertiesWithoutAnnotation ( entityType , EditorHidden . class ) . forEach ( ( property ) -> {"
        },
        {
            "Word": ".",
            "WordID": "4818",
            "SentID": 4894,
            "TokenID": "7",
            "Context": "getAnnotation ( entityType , property , Description . class )"
        },
        {
            "Word": ".",
            "WordID": "4856",
            "SentID": 4936,
            "TokenID": "7",
            "Context": "if ( type == String [ ] . class ) {"
        },
        {
            "Word": ".",
            "WordID": "4860",
            "SentID": 4938,
            "TokenID": "9",
            "Context": "if ( Types . isKindOf ( type , Collection . class ) ) {"
        },
        {
            "Word": ".",
            "WordID": "4861",
            "SentID": 4940,
            "TokenID": "7",
            "Context": "Class < ? > itemType = String . class ;"
        },
        {
            "Word": ".",
            "WordID": "4901",
            "SentID": 4998,
            "TokenID": "9",
            "Context": "if ( getAnnotation ( beanType , property , Id . class ) . isPresent ( ) || property . getName ( ) . equals ( \"name\" ) ) {"
        },
        {
            "Labels": [
                "Apologies for any confusion, but it seems you haven't provided any Java code tokens. Please provide the code so I can assist you better."
            ],
            "Meaningful": "Yes",
            "Lexicographic": ".",
            "Syntactic": "dot operator",
            "Semantic": "variable accessor, function calls",
            "Description": "dot operator used for both accessing variables of objects and to call functions",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Syntactic",
            "Q6_Answer": "None"
        }
    ],
    "181": [
        {
            "Word": "class",
            "WordID": "1",
            "SentID": 3637,
            "TokenID": "11",
            "Context": "return parameterContext . getParameter ( ) . getAnnotation ( Random . class ) != null ;"
        },
        {
            "Word": "class",
            "WordID": "2",
            "SentID": 3640,
            "TokenID": "10",
            "Context": "parameterContext . getParameter ( ) . getAnnotation ( Random . class ) ) ;"
        },
        {
            "Word": "class",
            "WordID": "3",
            "SentID": 3642,
            "TokenID": "8",
            "Context": "if ( targetType . isAssignableFrom ( List . class ) || targetType . isAssignableFrom ( Collection . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "4",
            "SentID": 3642,
            "TokenID": "17",
            "Context": "if ( targetType . isAssignableFrom ( List . class ) || targetType . isAssignableFrom ( Collection . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "5",
            "SentID": 3645,
            "TokenID": "10",
            "Context": "} else if ( targetType . isAssignableFrom ( Set . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "6",
            "SentID": 3646,
            "TokenID": "10",
            "Context": "} else if ( targetType . isAssignableFrom ( Stream . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "7",
            "SentID": 3674,
            "TokenID": "11",
            "Context": "parameterContext , key -> new TemporaryFolder ( ) , TemporaryFolder . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "8",
            "SentID": 3706,
            "TokenID": "8",
            "Context": "if ( isAnnotated ( annotatedElement , SystemProperties . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "9",
            "SentID": 3708,
            "TokenID": "10",
            "Context": "Arrays . asList ( annotatedElement . getAnnotation ( SystemProperties . class ) . value ( ) ) ) ;"
        },
        {
            "Word": "class",
            "WordID": "10",
            "SentID": 3709,
            "TokenID": "8",
            "Context": "if ( isAnnotated ( annotatedElement , SystemProperty . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "11",
            "SentID": 3710,
            "TokenID": "10",
            "Context": "systemProperties . add ( annotatedElement . getAnnotation ( SystemProperty . class ) ) ;"
        },
        {
            "Word": "class",
            "WordID": "12",
            "SentID": 3851,
            "TokenID": "5",
            "Context": "URL url = Dictionary . class . getClassLoader ( ) . getResource ( \"data\" ) ;"
        },
        {
            "Word": "class",
            "WordID": "13",
            "SentID": 3946,
            "TokenID": "14",
            "Context": "List < String > results = template . queryForList ( sql , String . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "14",
            "SentID": 3965,
            "TokenID": "8",
            "Context": "if ( type . equals ( Form . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "15",
            "SentID": 3967,
            "TokenID": "9",
            "Context": "else if ( type . equals ( FormIterator . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "16",
            "SentID": 3969,
            "TokenID": "9",
            "Context": "else if ( type . equals ( UploadedFile . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "17",
            "SentID": 3972,
            "TokenID": "9",
            "Context": "else if ( type . equals ( UploadStream . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "18",
            "SentID": 3974,
            "TokenID": "9",
            "Context": "else if ( type . equals ( InputStream . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "19",
            "SentID": 3988,
            "TokenID": "15",
            "Context": "if ( ! Types . isKindOf ( managedMethod . getReturnType ( ) , Resource . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "20",
            "SentID": 4064,
            "TokenID": "9",
            "Context": "Controller controllerAnnotation = getAnnotation ( implementationClass , Controller . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "21",
            "SentID": 4068,
            "TokenID": "9",
            "Context": "Service serviceAnnotation = getAnnotation ( implementationClass , Service . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "22",
            "SentID": 4071,
            "TokenID": "9",
            "Context": "Remote remoteAnnotation = getAnnotation ( implementationClass , Remote . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "23",
            "SentID": 4073,
            "TokenID": "9",
            "Context": "RequestPath requestPathAnnotation = getAnnotation ( implementationClass , RequestPath . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "24",
            "SentID": 4080,
            "TokenID": "9",
            "Context": "boolean transactionalType = hasAnnotation ( implementationClass , Transactional . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "25",
            "SentID": 4081,
            "TokenID": "9",
            "Context": "boolean immutableType = hasAnnotation ( implementationClass , Immutable . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "26",
            "SentID": 4085,
            "TokenID": "9",
            "Context": "boolean publicType = hasAnnotation ( implementationClass , Public . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "27",
            "SentID": 4091,
            "TokenID": "9",
            "Context": "boolean remoteMethod = hasAnnotation ( method , Remote . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "28",
            "SentID": 4094,
            "TokenID": "8",
            "Context": "if ( hasAnnotation ( method , Local . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "29",
            "SentID": 4103,
            "TokenID": "9",
            "Context": "boolean publicMethod = hasAnnotation ( method , Public . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "30",
            "SentID": 4107,
            "TokenID": "8",
            "Context": "if ( hasAnnotation ( method , Private . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "31",
            "SentID": 4110,
            "TokenID": "9",
            "Context": "RequestPath methodPath = getAnnotation ( method , RequestPath . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "32",
            "SentID": 4118,
            "TokenID": "8",
            "Context": "transactionalType = hasAnnotation ( method , Transactional . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "33",
            "SentID": 4122,
            "TokenID": "9",
            "Context": "boolean immutable = hasAnnotation ( method , Immutable . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "34",
            "SentID": 4126,
            "TokenID": "8",
            "Context": "if ( hasAnnotation ( method , Mutable . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "35",
            "SentID": 4133,
            "TokenID": "9",
            "Context": "boolean asynchronousMethod = hasAnnotation ( method , Asynchronous . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "36",
            "SentID": 4137,
            "TokenID": "9",
            "Context": "Cron cronMethod = getAnnotation ( method , Cron . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "37",
            "SentID": 4147,
            "TokenID": "9",
            "Context": "ContextParam contextParam = field . getAnnotation ( ContextParam . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "38",
            "SentID": 4160,
            "TokenID": "10",
            "Context": "if ( Types . isKindOf ( implementationClass , ManagedLifeCycle . class ) && ! InstanceScope . APPLICATION . equals ( instanceScope ) ) {"
        },
        {
            "Word": "class",
            "WordID": "39",
            "SentID": 4182,
            "TokenID": "10",
            "Context": "if ( Types . isKindOf ( interfaceClass , ManagedLifeCycle . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "40",
            "SentID": 4188,
            "TokenID": "11",
            "Context": "InstanceScope instanceScope = descriptor . getAttribute ( \"scope\" , InstanceScope . class , InstanceScope . APPLICATION ) ;"
        },
        {
            "Word": "class",
            "WordID": "41",
            "SentID": 4192,
            "TokenID": "11",
            "Context": "InstanceType instanceType = descriptor . getAttribute ( \"type\" , InstanceType . class , InstanceType . POJO ) ;"
        },
        {
            "Word": "class",
            "WordID": "42",
            "SentID": 4205,
            "TokenID": "8",
            "Context": "if ( declaredConstructor . getAnnotation ( Test . class ) != null ) {"
        },
        {
            "Word": "class",
            "WordID": "43",
            "SentID": 4214,
            "TokenID": "9",
            "Context": "if ( ! field . isAnnotationPresent ( Inject . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "44",
            "SentID": 4258,
            "TokenID": "9",
            "Context": "Intercepted intercepted = getAnnotation ( clazz , Intercepted . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "45",
            "SentID": 4261,
            "TokenID": "9",
            "Context": "Intercepted intercepted = getAnnotation ( method , Intercepted . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "46",
            "SentID": 4270,
            "TokenID": "14",
            "Context": "if ( Types . isKindOf ( field . getType ( ) , List . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "47",
            "SentID": 4292,
            "TokenID": "10",
            "Context": "if ( Types . isKindOf ( type , AppFactory . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "48",
            "SentID": 4474,
            "TokenID": "9",
            "Context": "ManagedClassSPI appContext = classesPool . get ( AppContext . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "49",
            "SentID": 4475,
            "TokenID": "18",
            "Context": "if ( appContext != null && Types . isKindOf ( appContext . getImplementationClass ( ) , ContainerSPI . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "50",
            "SentID": 4489,
            "TokenID": "14",
            "Context": "if ( Types . isKindOf ( managedClass . getImplementationClass ( ) , ManagedPreDestroy . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "51",
            "SentID": 4646,
            "TokenID": "9",
            "Context": "TemplateEngine templateEngine = Classes . loadService ( TemplateEngine . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "52",
            "SentID": 4656,
            "TokenID": "10",
            "Context": "if ( Types . isKindOf ( type , Document . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "53",
            "SentID": 4658,
            "TokenID": "12",
            "Context": "} else if ( Types . isKindOf ( type , InputStream . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "54",
            "SentID": 4754,
            "TokenID": "9",
            "Context": "RequestContext context = container . getInstance ( RequestContext . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "55",
            "SentID": 4796,
            "TokenID": "9",
            "Context": "Json json = Classes . loadService ( Json . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "56",
            "SentID": 4827,
            "TokenID": "13",
            "Context": "TransactionalResource transactionalResource = managedClass . getContainer ( ) . getInstance ( TransactionalResource . class ) ;"
        },
        {
            "Word": "class",
            "WordID": "57",
            "SentID": 4885,
            "TokenID": "6",
            "Context": "getPropertiesWithoutAnnotation ( entityType , EditorHidden . class ) . forEach ( ( property ) -> {"
        },
        {
            "Word": "class",
            "WordID": "58",
            "SentID": 4894,
            "TokenID": "8",
            "Context": "getAnnotation ( entityType , property , Description . class )"
        },
        {
            "Word": "class",
            "WordID": "59",
            "SentID": 4936,
            "TokenID": "8",
            "Context": "if ( type == String [ ] . class ) {"
        },
        {
            "Word": "class",
            "WordID": "60",
            "SentID": 4938,
            "TokenID": "10",
            "Context": "if ( Types . isKindOf ( type , Collection . class ) ) {"
        },
        {
            "Word": "class",
            "WordID": "61",
            "SentID": 4940,
            "TokenID": "8",
            "Context": "Class < ? > itemType = String . class ;"
        },
        {
            "Word": "class",
            "WordID": "62",
            "SentID": 4998,
            "TokenID": "10",
            "Context": "if ( getAnnotation ( beanType , property , Id . class ) . isPresent ( ) || property . getName ( ) . equals ( \"name\" ) ) {"
        },
        {
            "Labels": [
                "\"Object-Oriented Programming: Class Definition\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "class",
            "Syntactic": "class keyword",
            "Semantic": ".class to refer to the associated Class object",
            "Description": ".class to refer to the associated Class object",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "190": [
        {
            "Word": "Class",
            "WordID": "2",
            "SentID": 3641,
            "TokenID": "5",
            "Context": "} private Object resolve ( Class < ? > targetType , Random annotation ) {"
        },
        {
            "Word": "Class",
            "WordID": "5",
            "SentID": 3797,
            "TokenID": "5",
            "Context": "analyzer = ( Analyzer ) Class . forName ( an ) . newInstance ( ) ;"
        },
        {
            "Word": "Class",
            "WordID": "6",
            "SentID": 3938,
            "TokenID": "5",
            "Context": "dataSource . setDriverClass ( ( Class < Driver > ) Class . forName ( driverClassName ) ) ;"
        },
        {
            "Word": "Class",
            "WordID": "7",
            "SentID": 3938,
            "TokenID": "10",
            "Context": "dataSource . setDriverClass ( ( Class < Driver > ) Class . forName ( driverClassName ) ) ;"
        },
        {
            "Word": "Class",
            "WordID": "8",
            "SentID": 3952,
            "TokenID": "0",
            "Context": "Class < ? > [ ] interfaceClasses = managedClass . getInterfaceClasses ( ) ;"
        },
        {
            "Word": "Class",
            "WordID": "9",
            "SentID": 3963,
            "TokenID": "0",
            "Context": "Class < ? > type = ( Class < ? > ) formalParameters [ 0 ] ;"
        },
        {
            "Word": "Class",
            "WordID": "10",
            "SentID": 3963,
            "TokenID": "7",
            "Context": "Class < ? > type = ( Class < ? > ) formalParameters [ 0 ] ;"
        },
        {
            "Word": "Class",
            "WordID": "11",
            "SentID": 4084,
            "TokenID": "0",
            "Context": "Class < ? extends Interceptor > classInterceptor = getInterceptorClass ( implementationClass ) ;"
        },
        {
            "Word": "Class",
            "WordID": "12",
            "SentID": 4097,
            "TokenID": "0",
            "Context": "Class < ? extends Interceptor > methodInterceptor = getInterceptorClass ( method ) ;"
        },
        {
            "Word": "Class",
            "WordID": "13",
            "SentID": 4150,
            "TokenID": "2",
            "Context": "} private Class < ? > loadImplementationClass ( Config descriptor ) throws ConfigException {"
        },
        {
            "Word": "Class",
            "WordID": "14",
            "SentID": 4155,
            "TokenID": "0",
            "Context": "Class < ? > implementationClass = Classes . forOptionalName ( implementationName ) ;"
        },
        {
            "Word": "Class",
            "WordID": "15",
            "SentID": 4162,
            "TokenID": "2",
            "Context": "} private Class < ? > [ ] loadInterfaceClasses ( Config descriptor ) throws ConfigException {"
        },
        {
            "Word": "Class",
            "WordID": "16",
            "SentID": 4167,
            "TokenID": "2",
            "Context": "return new Class < ? > [ ] { implementationClass } ;"
        },
        {
            "Word": "Class",
            "WordID": "17",
            "SentID": 4177,
            "TokenID": "0",
            "Context": "Class < ? > [ ] interfaceClasses = new Class < ? > [ interfaceNames . size ( ) ] ;"
        },
        {
            "Word": "Class",
            "WordID": "18",
            "SentID": 4177,
            "TokenID": "9",
            "Context": "Class < ? > [ ] interfaceClasses = new Class < ? > [ interfaceNames . size ( ) ] ;"
        },
        {
            "Word": "Class",
            "WordID": "19",
            "SentID": 4180,
            "TokenID": "1",
            "Context": "final Class < ? > interfaceClass = Classes . forOptionalName ( interfaceName ) ;"
        },
        {
            "Word": "Class",
            "WordID": "20",
            "SentID": 4199,
            "TokenID": "9",
            "Context": "} private static Constructor < ? > getDeclaredConstructor ( Class < ? > implementationClass ) {"
        },
        {
            "Word": "Class",
            "WordID": "21",
            "SentID": 4211,
            "TokenID": "9",
            "Context": "} private static Collection < Field > scanDependencies ( Class < ? > clazz ) {"
        },
        {
            "Word": "Class",
            "WordID": "22",
            "SentID": 4235,
            "TokenID": "2",
            "Context": "for ( Class < ? > interfaceClass : interfaceClasses ) {"
        },
        {
            "Word": "Class",
            "WordID": "23",
            "SentID": 4242,
            "TokenID": "11",
            "Context": "} private static < T extends Annotation > T getAnnotation ( Class < ? > clazz , Class < T > annotationClass ) {"
        },
        {
            "Word": "Class",
            "WordID": "24",
            "SentID": 4242,
            "TokenID": "17",
            "Context": "} private static < T extends Annotation > T getAnnotation ( Class < ? > clazz , Class < T > annotationClass ) {"
        },
        {
            "Word": "Class",
            "WordID": "25",
            "SentID": 4244,
            "TokenID": "2",
            "Context": "for ( Class < ? > interfaceClass : clazz . getInterfaces ( ) ) {"
        },
        {
            "Word": "Class",
            "WordID": "26",
            "SentID": 4248,
            "TokenID": "6",
            "Context": "} private static boolean hasAnnotation ( Class < ? > clazz , Class < ? extends Annotation > annotationClass ) {"
        },
        {
            "Word": "Class",
            "WordID": "27",
            "SentID": 4248,
            "TokenID": "12",
            "Context": "} private static boolean hasAnnotation ( Class < ? > clazz , Class < ? extends Annotation > annotationClass ) {"
        },
        {
            "Word": "Class",
            "WordID": "28",
            "SentID": 4250,
            "TokenID": "14",
            "Context": "} private static < T extends Annotation > T getAnnotation ( Method method , Class < T > annotationClass ) {"
        },
        {
            "Word": "Class",
            "WordID": "29",
            "SentID": 4252,
            "TokenID": "2",
            "Context": "for ( Class < ? > interfaceClass : method . getDeclaringClass ( ) . getInterfaces ( ) ) {"
        },
        {
            "Word": "Class",
            "WordID": "30",
            "SentID": 4257,
            "TokenID": "3",
            "Context": "} private static Class < ? extends Interceptor > getInterceptorClass ( Class < ? > clazz ) {"
        },
        {
            "Word": "Class",
            "WordID": "31",
            "SentID": 4257,
            "TokenID": "11",
            "Context": "} private static Class < ? extends Interceptor > getInterceptorClass ( Class < ? > clazz ) {"
        },
        {
            "Word": "Class",
            "WordID": "32",
            "SentID": 4260,
            "TokenID": "3",
            "Context": "} private static Class < ? extends Interceptor > getInterceptorClass ( Method method ) {"
        },
        {
            "Word": "Class",
            "WordID": "33",
            "SentID": 4269,
            "TokenID": "3",
            "Context": "} private static Class < ? > type ( Field field ) {"
        },
        {
            "Word": "Class",
            "WordID": "34",
            "SentID": 4271,
            "TokenID": "2",
            "Context": "return ( Class < ? > ) ( ( ParameterizedType ) field . getGenericType ( ) ) . getActualTypeArguments ( ) [ 0 ] ;"
        },
        {
            "Word": "Class",
            "WordID": "35",
            "SentID": 4273,
            "TokenID": "8",
            "Context": "protected static Object getDependencyValue ( ManagedClassSPI hostManagedClass , Class < ? > type ) {"
        },
        {
            "Word": "Class",
            "WordID": "36",
            "SentID": 4274,
            "TokenID": "2",
            "Context": "Stack < Class < ? > > stackTrace = dependenciesStack . get ( ) ;"
        },
        {
            "Word": "Class",
            "WordID": "37",
            "SentID": 4281,
            "TokenID": "2",
            "Context": "for ( Class < ? > stackTraceClass : stackTrace ) {"
        },
        {
            "Word": "Class",
            "WordID": "38",
            "SentID": 4291,
            "TokenID": "8",
            "Context": "Object value = container . getOptionalInstance ( ( Class < ? super Object > ) type ) ;"
        },
        {
            "Word": "Class",
            "WordID": "39",
            "SentID": 4423,
            "TokenID": "10",
            "Context": "return getRemoteInstance ( managedClass . getImplementationURL ( ) , ( Class < ? super T > ) managedClass . getInterfaceClass ( ) ) ;"
        },
        {
            "Word": "Class",
            "WordID": "40",
            "SentID": 4424,
            "TokenID": "10",
            "Context": "public < T > T getRemoteInstance ( String implementationURL , Class < ? super T > interfaceClass ) throws UnsupportedProtocolException {"
        },
        {
            "Word": "getClass",
            "WordID": "4",
            "SentID": 4446,
            "TokenID": "4",
            "Context": "if ( existingInstanceProcessoor . getClass ( ) . equals ( instanceProcessor . getClass ( ) ) ) {"
        },
        {
            "Word": "getClass",
            "WordID": "5",
            "SentID": 4446,
            "TokenID": "12",
            "Context": "if ( existingInstanceProcessoor . getClass ( ) . equals ( instanceProcessor . getClass ( ) ) ) {"
        },
        {
            "Word": "getClass",
            "WordID": "6",
            "SentID": 4450,
            "TokenID": "4",
            "Context": "if ( existingClassProcessoor . getClass ( ) . equals ( classProcessor . getClass ( ) ) ) {"
        },
        {
            "Word": "getClass",
            "WordID": "7",
            "SentID": 4450,
            "TokenID": "12",
            "Context": "if ( existingClassProcessoor . getClass ( ) . equals ( classProcessor . getClass ( ) ) ) {"
        },
        {
            "Word": "Class",
            "WordID": "41",
            "SentID": 4468,
            "TokenID": "2",
            "Context": "for ( Class < ? > interfaceClass : managedClass . getInterfaceClasses ( ) ) {"
        },
        {
            "Word": "Class",
            "WordID": "42",
            "SentID": 4485,
            "TokenID": "3",
            "Context": "getInstance ( ( Class < ? super Object > ) managedClass . getInterfaceClass ( ) ) ;"
        },
        {
            "Word": "Class",
            "WordID": "43",
            "SentID": 4502,
            "TokenID": "7",
            "Context": "public < T > T getInstance ( Class < ? super T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "Class",
            "WordID": "44",
            "SentID": 4532,
            "TokenID": "0",
            "Context": "Class < ? > valueType = Classes . forOptionalName ( className ) ;"
        },
        {
            "Word": "Class",
            "WordID": "45",
            "SentID": 4535,
            "TokenID": "0",
            "Context": "Class < ? extends Converter > converterClass = Classes . forOptionalName ( converterName ) ;"
        },
        {
            "Word": "Class",
            "WordID": "46",
            "SentID": 4545,
            "TokenID": "0",
            "Context": "Class < ? > pojoClass = Classes . forOptionalName ( pojoClassName ) ;"
        },
        {
            "Word": "Class",
            "WordID": "47",
            "SentID": 4621,
            "TokenID": "10",
            "Context": "public < T > T asObject ( String string , Class < T > valueType ) {"
        },
        {
            "Word": "Class",
            "WordID": "48",
            "SentID": 4652,
            "TokenID": "10",
            "Context": "public < T > T asObject ( String string , Class < T > valueType ) throws IllegalArgumentException , ConverterException {"
        },
        {
            "Word": "Class",
            "WordID": "49",
            "SentID": 4732,
            "TokenID": "11",
            "Context": "} protected < T > T getParameter ( String name , Class < T > type ) {"
        },
        {
            "Word": "Class",
            "WordID": "50",
            "SentID": 4831,
            "TokenID": "1",
            "Context": "final Class < ? > [ ] interfaceClasses = managedClass . getInterfaceClasses ( ) ;"
        },
        {
            "Word": "Class",
            "WordID": "51",
            "SentID": 4841,
            "TokenID": "9",
            "Context": "} public static < T > T getInstance ( Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "Class",
            "WordID": "52",
            "SentID": 4843,
            "TokenID": "12",
            "Context": "} public static < T > T getInstance ( String instanceName , Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "Class",
            "WordID": "53",
            "SentID": 4845,
            "TokenID": "9",
            "Context": "} public static < T > T getOptionalInstance ( Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "Class",
            "WordID": "54",
            "SentID": 4847,
            "TokenID": "12",
            "Context": "} public static < T > T getRemoteInstance ( String implementationURL , Class < ? super T > interfaceClass ) {"
        },
        {
            "Word": "Class",
            "WordID": "55",
            "SentID": 4883,
            "TokenID": "5",
            "Context": "} protected Component buildAndBind ( Class < TEntity > entityType ) {"
        },
        {
            "Word": "Class",
            "WordID": "57",
            "SentID": 4934,
            "TokenID": "12",
            "Context": "return ConverterRegistry . getConverter ( ) . asObject ( value , ( Class < T > ) type ) ;"
        },
        {
            "Word": "Class",
            "WordID": "58",
            "SentID": 4940,
            "TokenID": "0",
            "Context": "Class < ? > itemType = String . class ;"
        },
        {
            "Word": "Class",
            "WordID": "59",
            "SentID": 4943,
            "TokenID": "3",
            "Context": "itemType = ( Class < ? > ) ( ( ParameterizedType ) type ) . getActualTypeArguments ( ) [ 0 ] ;"
        },
        {
            "Word": "Class",
            "WordID": "60",
            "SentID": 4964,
            "TokenID": "1",
            "Context": "final Class < ? > [ ] types = constructor . getParameterTypes ( ) ;"
        },
        {
            "Word": "Class",
            "WordID": "61",
            "SentID": 4969,
            "TokenID": "1",
            "Context": "final Class < ? > [ ] types = method . getParameterTypes ( ) ;"
        },
        {
            "Word": "Class",
            "WordID": "62",
            "SentID": 4971,
            "TokenID": "14",
            "Context": "} private static Object [ ] preProcessArguments ( ManagedClassSPI managedClass , Member member , Class < ? > [ ] formalParameters , Object ... args ) {"
        },
        {
            "Word": "Class",
            "WordID": "63",
            "SentID": 4995,
            "TokenID": "8",
            "Context": "public static List < PropertyDescriptor > getProperties ( Class < ? > beanType ) {"
        },
        {
            "Labels": [
                "\"Class Identification and Manipulation\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "Class, getClass",
            "Syntactic": "datatype Keyword, method",
            "Semantic": "function calls, generics",
            "Description": "refers to the Class class many with generics",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "491": [
        {
            "Word": ",",
            "WordID": "875",
            "SentID": 3706,
            "TokenID": "5",
            "Context": "if ( isAnnotated ( annotatedElement , SystemProperties . class ) ) {"
        },
        {
            "Word": ",",
            "WordID": "876",
            "SentID": 3709,
            "TokenID": "5",
            "Context": "if ( isAnnotated ( annotatedElement , SystemProperty . class ) ) {"
        },
        {
            "Word": ",",
            "WordID": "1056",
            "SentID": 4064,
            "TokenID": "6",
            "Context": "Controller controllerAnnotation = getAnnotation ( implementationClass , Controller . class ) ;"
        },
        {
            "Word": ",",
            "WordID": "1057",
            "SentID": 4068,
            "TokenID": "6",
            "Context": "Service serviceAnnotation = getAnnotation ( implementationClass , Service . class ) ;"
        },
        {
            "Word": ",",
            "WordID": "1058",
            "SentID": 4071,
            "TokenID": "6",
            "Context": "Remote remoteAnnotation = getAnnotation ( implementationClass , Remote . class ) ;"
        },
        {
            "Word": ",",
            "WordID": "1059",
            "SentID": 4073,
            "TokenID": "6",
            "Context": "RequestPath requestPathAnnotation = getAnnotation ( implementationClass , RequestPath . class ) ;"
        },
        {
            "Word": ",",
            "WordID": "1060",
            "SentID": 4080,
            "TokenID": "6",
            "Context": "boolean transactionalType = hasAnnotation ( implementationClass , Transactional . class ) ;"
        },
        {
            "Word": ",",
            "WordID": "1061",
            "SentID": 4081,
            "TokenID": "6",
            "Context": "boolean immutableType = hasAnnotation ( implementationClass , Immutable . class ) ;"
        },
        {
            "Word": ",",
            "WordID": "1062",
            "SentID": 4085,
            "TokenID": "6",
            "Context": "boolean publicType = hasAnnotation ( implementationClass , Public . class ) ;"
        },
        {
            "Word": ",",
            "WordID": "1063",
            "SentID": 4091,
            "TokenID": "6",
            "Context": "boolean remoteMethod = hasAnnotation ( method , Remote . class ) ;"
        },
        {
            "Word": ",",
            "WordID": "1064",
            "SentID": 4094,
            "TokenID": "5",
            "Context": "if ( hasAnnotation ( method , Local . class ) ) {"
        },
        {
            "Word": ",",
            "WordID": "1067",
            "SentID": 4103,
            "TokenID": "6",
            "Context": "boolean publicMethod = hasAnnotation ( method , Public . class ) ;"
        },
        {
            "Word": ",",
            "WordID": "1068",
            "SentID": 4107,
            "TokenID": "5",
            "Context": "if ( hasAnnotation ( method , Private . class ) ) {"
        },
        {
            "Word": ",",
            "WordID": "1069",
            "SentID": 4110,
            "TokenID": "6",
            "Context": "RequestPath methodPath = getAnnotation ( method , RequestPath . class ) ;"
        },
        {
            "Word": ",",
            "WordID": "1071",
            "SentID": 4118,
            "TokenID": "5",
            "Context": "transactionalType = hasAnnotation ( method , Transactional . class ) ;"
        },
        {
            "Word": ",",
            "WordID": "1072",
            "SentID": 4122,
            "TokenID": "6",
            "Context": "boolean immutable = hasAnnotation ( method , Immutable . class ) ;"
        },
        {
            "Word": ",",
            "WordID": "1073",
            "SentID": 4126,
            "TokenID": "5",
            "Context": "if ( hasAnnotation ( method , Mutable . class ) ) {"
        },
        {
            "Word": ",",
            "WordID": "1074",
            "SentID": 4133,
            "TokenID": "6",
            "Context": "boolean asynchronousMethod = hasAnnotation ( method , Asynchronous . class ) ;"
        },
        {
            "Word": ",",
            "WordID": "1075",
            "SentID": 4137,
            "TokenID": "6",
            "Context": "Cron cronMethod = getAnnotation ( method , Cron . class ) ;"
        },
        {
            "Word": ",",
            "WordID": "1096",
            "SentID": 4258,
            "TokenID": "6",
            "Context": "Intercepted intercepted = getAnnotation ( clazz , Intercepted . class ) ;"
        },
        {
            "Word": ",",
            "WordID": "1097",
            "SentID": 4261,
            "TokenID": "6",
            "Context": "Intercepted intercepted = getAnnotation ( method , Intercepted . class ) ;"
        },
        {
            "Labels": [
                "\"Punctuation Marks in Java Code\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": ",",
            "Syntactic": "comma",
            "Semantic": "arguments, function calls, variable assignment",
            "Description": "comma used to seperate arguments of function calls many of which get assigned to variables.",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Syntactic",
            "Q6_Answer": "None"
        }
    ],
    "160": [
        {
            "Word": "format",
            "WordID": "3",
            "SentID": 3724,
            "TokenID": "6",
            "Context": "} public void trace ( String format , Object arg ) {"
        },
        {
            "Word": "format",
            "WordID": "5",
            "SentID": 3726,
            "TokenID": "6",
            "Context": "} public void trace ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": "format",
            "WordID": "7",
            "SentID": 3728,
            "TokenID": "6",
            "Context": "} public void trace ( String format , Object ... argArray ) {"
        },
        {
            "Word": "msg",
            "WordID": "1",
            "SentID": 3730,
            "TokenID": "6",
            "Context": "} public void trace ( String msg , Throwable t ) {"
        },
        {
            "Word": "msg",
            "WordID": "2",
            "SentID": 3731,
            "TokenID": "6",
            "Context": "log ( Log . VERBOSE , msg , t ) ;"
        },
        {
            "Word": "format",
            "WordID": "9",
            "SentID": 3732,
            "TokenID": "6",
            "Context": "} public void debug ( String format , Object arg ) {"
        },
        {
            "Word": "format",
            "WordID": "11",
            "SentID": 3734,
            "TokenID": "6",
            "Context": "} public void debug ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": "format",
            "WordID": "13",
            "SentID": 3736,
            "TokenID": "6",
            "Context": "} public void debug ( String format , Object ... argArray ) {"
        },
        {
            "Word": "msg",
            "WordID": "3",
            "SentID": 3738,
            "TokenID": "6",
            "Context": "} public void debug ( String msg , Throwable t ) {"
        },
        {
            "Word": "msg",
            "WordID": "4",
            "SentID": 3739,
            "TokenID": "6",
            "Context": "log ( Log . DEBUG , msg , t ) ;"
        },
        {
            "Word": "format",
            "WordID": "15",
            "SentID": 3740,
            "TokenID": "6",
            "Context": "} public void info ( String format , Object arg ) {"
        },
        {
            "Word": "format",
            "WordID": "17",
            "SentID": 3742,
            "TokenID": "6",
            "Context": "} public void info ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": "format",
            "WordID": "19",
            "SentID": 3744,
            "TokenID": "6",
            "Context": "} public void info ( String format , Object ... argArray ) {"
        },
        {
            "Word": "msg",
            "WordID": "5",
            "SentID": 3746,
            "TokenID": "6",
            "Context": "} public void info ( String msg , Throwable t ) {"
        },
        {
            "Word": "msg",
            "WordID": "6",
            "SentID": 3747,
            "TokenID": "6",
            "Context": "log ( Log . INFO , msg , t ) ;"
        },
        {
            "Word": "format",
            "WordID": "21",
            "SentID": 3748,
            "TokenID": "6",
            "Context": "} public void warn ( String format , Object arg ) {"
        },
        {
            "Word": "format",
            "WordID": "23",
            "SentID": 3750,
            "TokenID": "6",
            "Context": "} public void warn ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": "format",
            "WordID": "25",
            "SentID": 3752,
            "TokenID": "6",
            "Context": "} public void warn ( String format , Object ... argArray ) {"
        },
        {
            "Word": "msg",
            "WordID": "7",
            "SentID": 3754,
            "TokenID": "6",
            "Context": "} public void warn ( String msg , Throwable t ) {"
        },
        {
            "Word": "msg",
            "WordID": "8",
            "SentID": 3755,
            "TokenID": "6",
            "Context": "log ( Log . WARN , msg , t ) ;"
        },
        {
            "Word": "format",
            "WordID": "27",
            "SentID": 3756,
            "TokenID": "6",
            "Context": "} public void error ( String format , Object arg ) {"
        },
        {
            "Word": "format",
            "WordID": "29",
            "SentID": 3758,
            "TokenID": "6",
            "Context": "} public void error ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": "format",
            "WordID": "31",
            "SentID": 3760,
            "TokenID": "6",
            "Context": "} public void error ( String format , Object ... argArray ) {"
        },
        {
            "Word": "msg",
            "WordID": "9",
            "SentID": 3762,
            "TokenID": "6",
            "Context": "} public void error ( String msg , Throwable t ) {"
        },
        {
            "Word": "msg",
            "WordID": "10",
            "SentID": 3763,
            "TokenID": "6",
            "Context": "log ( Log . ERROR , msg , t ) ;"
        },
        {
            "Labels": [
                "\"Message Formatting\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "format, msg",
            "Syntactic": "parameter",
            "Semantic": "function definition",
            "Description": "string variables named \"format\" and \"msg\" used as parameters in function definitions",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Syntactic",
            "Q6_Answer": "None"
        }
    ],
    "288": [
        {
            "Word": ",",
            "WordID": "879",
            "SentID": 3724,
            "TokenID": "7",
            "Context": "} public void trace ( String format , Object arg ) {"
        },
        {
            "Word": ",",
            "WordID": "881",
            "SentID": 3725,
            "TokenID": "7",
            "Context": "formatAndLog ( Log . VERBOSE , format , arg ) ;"
        },
        {
            "Word": ",",
            "WordID": "882",
            "SentID": 3726,
            "TokenID": "7",
            "Context": "} public void trace ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": ",",
            "WordID": "885",
            "SentID": 3727,
            "TokenID": "7",
            "Context": "formatAndLog ( Log . VERBOSE , format , arg1 , arg2 ) ;"
        },
        {
            "Word": ",",
            "WordID": "887",
            "SentID": 3728,
            "TokenID": "7",
            "Context": "} public void trace ( String format , Object ... argArray ) {"
        },
        {
            "Word": ",",
            "WordID": "889",
            "SentID": 3729,
            "TokenID": "7",
            "Context": "formatAndLog ( Log . VERBOSE , format , argArray ) ;"
        },
        {
            "Word": ",",
            "WordID": "890",
            "SentID": 3730,
            "TokenID": "7",
            "Context": "} public void trace ( String msg , Throwable t ) {"
        },
        {
            "Word": ",",
            "WordID": "893",
            "SentID": 3732,
            "TokenID": "7",
            "Context": "} public void debug ( String format , Object arg ) {"
        },
        {
            "Word": ",",
            "WordID": "895",
            "SentID": 3733,
            "TokenID": "7",
            "Context": "formatAndLog ( Log . DEBUG , format , arg ) ;"
        },
        {
            "Word": ",",
            "WordID": "896",
            "SentID": 3734,
            "TokenID": "7",
            "Context": "} public void debug ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": ",",
            "WordID": "899",
            "SentID": 3735,
            "TokenID": "7",
            "Context": "formatAndLog ( Log . DEBUG , format , arg1 , arg2 ) ;"
        },
        {
            "Word": ",",
            "WordID": "901",
            "SentID": 3736,
            "TokenID": "7",
            "Context": "} public void debug ( String format , Object ... argArray ) {"
        },
        {
            "Word": ",",
            "WordID": "903",
            "SentID": 3737,
            "TokenID": "7",
            "Context": "formatAndLog ( Log . DEBUG , format , argArray ) ;"
        },
        {
            "Word": ",",
            "WordID": "904",
            "SentID": 3738,
            "TokenID": "7",
            "Context": "} public void debug ( String msg , Throwable t ) {"
        },
        {
            "Word": ",",
            "WordID": "907",
            "SentID": 3740,
            "TokenID": "7",
            "Context": "} public void info ( String format , Object arg ) {"
        },
        {
            "Word": ",",
            "WordID": "909",
            "SentID": 3741,
            "TokenID": "7",
            "Context": "formatAndLog ( Log . INFO , format , arg ) ;"
        },
        {
            "Word": ",",
            "WordID": "910",
            "SentID": 3742,
            "TokenID": "7",
            "Context": "} public void info ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": ",",
            "WordID": "913",
            "SentID": 3743,
            "TokenID": "7",
            "Context": "formatAndLog ( Log . INFO , format , arg1 , arg2 ) ;"
        },
        {
            "Word": ",",
            "WordID": "915",
            "SentID": 3744,
            "TokenID": "7",
            "Context": "} public void info ( String format , Object ... argArray ) {"
        },
        {
            "Word": ",",
            "WordID": "917",
            "SentID": 3745,
            "TokenID": "7",
            "Context": "formatAndLog ( Log . INFO , format , argArray ) ;"
        },
        {
            "Word": ",",
            "WordID": "918",
            "SentID": 3746,
            "TokenID": "7",
            "Context": "} public void info ( String msg , Throwable t ) {"
        },
        {
            "Word": ",",
            "WordID": "921",
            "SentID": 3748,
            "TokenID": "7",
            "Context": "} public void warn ( String format , Object arg ) {"
        },
        {
            "Word": ",",
            "WordID": "923",
            "SentID": 3749,
            "TokenID": "7",
            "Context": "formatAndLog ( Log . WARN , format , arg ) ;"
        },
        {
            "Word": ",",
            "WordID": "924",
            "SentID": 3750,
            "TokenID": "7",
            "Context": "} public void warn ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": ",",
            "WordID": "927",
            "SentID": 3751,
            "TokenID": "7",
            "Context": "formatAndLog ( Log . WARN , format , arg1 , arg2 ) ;"
        },
        {
            "Word": ",",
            "WordID": "929",
            "SentID": 3752,
            "TokenID": "7",
            "Context": "} public void warn ( String format , Object ... argArray ) {"
        },
        {
            "Word": ",",
            "WordID": "931",
            "SentID": 3753,
            "TokenID": "7",
            "Context": "formatAndLog ( Log . WARN , format , argArray ) ;"
        },
        {
            "Word": ",",
            "WordID": "932",
            "SentID": 3754,
            "TokenID": "7",
            "Context": "} public void warn ( String msg , Throwable t ) {"
        },
        {
            "Word": ",",
            "WordID": "935",
            "SentID": 3756,
            "TokenID": "7",
            "Context": "} public void error ( String format , Object arg ) {"
        },
        {
            "Word": ",",
            "WordID": "937",
            "SentID": 3757,
            "TokenID": "7",
            "Context": "formatAndLog ( Log . ERROR , format , arg ) ;"
        },
        {
            "Word": ",",
            "WordID": "938",
            "SentID": 3758,
            "TokenID": "7",
            "Context": "} public void error ( String format , Object arg1 , Object arg2 ) {"
        },
        {
            "Word": ",",
            "WordID": "941",
            "SentID": 3759,
            "TokenID": "7",
            "Context": "formatAndLog ( Log . ERROR , format , arg1 , arg2 ) ;"
        },
        {
            "Word": ",",
            "WordID": "943",
            "SentID": 3760,
            "TokenID": "7",
            "Context": "} public void error ( String format , Object ... argArray ) {"
        },
        {
            "Word": ",",
            "WordID": "945",
            "SentID": 3761,
            "TokenID": "7",
            "Context": "formatAndLog ( Log . ERROR , format , argArray ) ;"
        },
        {
            "Word": ",",
            "WordID": "946",
            "SentID": 3762,
            "TokenID": "7",
            "Context": "} public void error ( String msg , Throwable t ) {"
        },
        {
            "Word": ",",
            "WordID": "1039",
            "SentID": 4001,
            "TokenID": "7",
            "Context": "value = method . invoke ( instance , arguments ) ;"
        },
        {
            "Word": ",",
            "WordID": "1168",
            "SentID": 4422,
            "TokenID": "9",
            "Context": "public < T > T newInstance ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": ",",
            "WordID": "1186",
            "SentID": 4502,
            "TokenID": "14",
            "Context": "public < T > T getInstance ( Class < ? super T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": ",",
            "WordID": "1188",
            "SentID": 4505,
            "TokenID": "6",
            "Context": "return getInstance ( managedClass , instanceKey , args ) ;"
        },
        {
            "Word": ",",
            "WordID": "1190",
            "SentID": 4506,
            "TokenID": "12",
            "Context": "private < T > T getInstance ( ManagedClassSPI managedClass , InstanceKey instanceKey , Object ... args ) {"
        },
        {
            "Word": ",",
            "WordID": "1192",
            "SentID": 4509,
            "TokenID": "6",
            "Context": "return instanceFactory . newInstance ( managedClass , args ) ;"
        },
        {
            "Word": ",",
            "WordID": "1193",
            "SentID": 4515,
            "TokenID": "7",
            "Context": "instance = instanceFactory . newInstance ( managedClass , args ) ;"
        },
        {
            "Word": ",",
            "WordID": "1204",
            "SentID": 4561,
            "TokenID": "9",
            "Context": "public < T > T invoke ( Object object , Object ... args ) throws AuthorizationException , IllegalArgumentException , InvocationException {"
        },
        {
            "Word": ",",
            "WordID": "1208",
            "SentID": 4566,
            "TokenID": "9",
            "Context": "return ( T ) method . invoke ( object , args ) ;"
        },
        {
            "Word": ",",
            "WordID": "1209",
            "SentID": 4569,
            "TokenID": "9",
            "Context": "return ( T ) invoker . invoke ( object , args ) ;"
        },
        {
            "Word": ",",
            "WordID": "1210",
            "SentID": 4573,
            "TokenID": "10",
            "Context": "returnValue = ( T ) invoker . invoke ( object , args ) ;"
        },
        {
            "Word": ",",
            "WordID": "1237",
            "SentID": 4663,
            "TokenID": "9",
            "Context": "public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable {"
        },
        {
            "Word": ",",
            "WordID": "1238",
            "SentID": 4665,
            "TokenID": "6",
            "Context": "return method . invoke ( instance , args ) ;"
        },
        {
            "Word": ",",
            "WordID": "1284",
            "SentID": 4841,
            "TokenID": "14",
            "Context": "} public static < T > T getInstance ( Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": ",",
            "WordID": "1285",
            "SentID": 4842,
            "TokenID": "8",
            "Context": "return getAppFactory ( ) . getInstance ( interfaceClass , args ) ;"
        },
        {
            "Word": ",",
            "WordID": "1287",
            "SentID": 4843,
            "TokenID": "17",
            "Context": "} public static < T > T getInstance ( String instanceName , Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": ",",
            "WordID": "1289",
            "SentID": 4844,
            "TokenID": "10",
            "Context": "return getAppFactory ( ) . getInstance ( instanceName , interfaceClass , args ) ;"
        },
        {
            "Word": ",",
            "WordID": "1290",
            "SentID": 4845,
            "TokenID": "14",
            "Context": "} public static < T > T getOptionalInstance ( Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": ",",
            "WordID": "1291",
            "SentID": 4846,
            "TokenID": "8",
            "Context": "return getAppFactory ( ) . getOptionalInstance ( interfaceClass , args ) ;"
        },
        {
            "Word": ",",
            "WordID": "1298",
            "SentID": 4868,
            "TokenID": "9",
            "Context": "public < I > I newInstance ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Labels": [
                "\"Punctuation Marks in Java\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": ",",
            "Syntactic": "comma",
            "Semantic": "function definitions, parameters",
            "Description": "comma used to seperate parameters in function definitions.",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Syntactic",
            "Q6_Answer": "None"
        }
    ],
    "492": [
        {
            "Word": "arg",
            "WordID": "1",
            "SentID": 3724,
            "TokenID": "9",
            "Context": "} public void trace ( String format , Object arg ) {"
        },
        {
            "Word": "arg",
            "WordID": "2",
            "SentID": 3725,
            "TokenID": "8",
            "Context": "formatAndLog ( Log . VERBOSE , format , arg ) ;"
        },
        {
            "Word": "arg",
            "WordID": "3",
            "SentID": 3732,
            "TokenID": "9",
            "Context": "} public void debug ( String format , Object arg ) {"
        },
        {
            "Word": "arg",
            "WordID": "4",
            "SentID": 3733,
            "TokenID": "8",
            "Context": "formatAndLog ( Log . DEBUG , format , arg ) ;"
        },
        {
            "Word": "arg",
            "WordID": "5",
            "SentID": 3740,
            "TokenID": "9",
            "Context": "} public void info ( String format , Object arg ) {"
        },
        {
            "Word": "arg",
            "WordID": "6",
            "SentID": 3741,
            "TokenID": "8",
            "Context": "formatAndLog ( Log . INFO , format , arg ) ;"
        },
        {
            "Word": "arg",
            "WordID": "7",
            "SentID": 3748,
            "TokenID": "9",
            "Context": "} public void warn ( String format , Object arg ) {"
        },
        {
            "Word": "arg",
            "WordID": "8",
            "SentID": 3749,
            "TokenID": "8",
            "Context": "formatAndLog ( Log . WARN , format , arg ) ;"
        },
        {
            "Word": "arg",
            "WordID": "9",
            "SentID": 3756,
            "TokenID": "9",
            "Context": "} public void error ( String format , Object arg ) {"
        },
        {
            "Word": "arg",
            "WordID": "10",
            "SentID": 3757,
            "TokenID": "8",
            "Context": "formatAndLog ( Log . ERROR , format , arg ) ;"
        },
        {
            "Word": "args",
            "WordID": "1",
            "SentID": 3799,
            "TokenID": "6",
            "Context": "n = Integer . parseInt ( args [ 1 ] ) ;"
        },
        {
            "Word": "args",
            "WordID": "2",
            "SentID": 3800,
            "TokenID": "6",
            "Context": "File path = new File ( args [ 0 ] ) ;"
        },
        {
            "Word": "args",
            "WordID": "3",
            "SentID": 3930,
            "TokenID": "2",
            "Context": "words = args [ 0 ] ;"
        },
        {
            "Word": "arguments",
            "WordID": "10",
            "SentID": 4001,
            "TokenID": "8",
            "Context": "value = method . invoke ( instance , arguments ) ;"
        },
        {
            "Word": "args",
            "WordID": "6",
            "SentID": 4505,
            "TokenID": "7",
            "Context": "return getInstance ( managedClass , instanceKey , args ) ;"
        },
        {
            "Word": "args",
            "WordID": "9",
            "SentID": 4508,
            "TokenID": "8",
            "Context": "args = argumentsProcessor . preProcessArguments ( managedClass , args ) ;"
        },
        {
            "Word": "args",
            "WordID": "10",
            "SentID": 4509,
            "TokenID": "7",
            "Context": "return instanceFactory . newInstance ( managedClass , args ) ;"
        },
        {
            "Word": "args",
            "WordID": "11",
            "SentID": 4515,
            "TokenID": "8",
            "Context": "instance = instanceFactory . newInstance ( managedClass , args ) ;"
        },
        {
            "Word": "args",
            "WordID": "14",
            "SentID": 4564,
            "TokenID": "8",
            "Context": "args = argumentsProcessor . preProcessArguments ( this , args ) ;"
        },
        {
            "Word": "args",
            "WordID": "15",
            "SentID": 4566,
            "TokenID": "10",
            "Context": "return ( T ) method . invoke ( object , args ) ;"
        },
        {
            "Word": "args",
            "WordID": "16",
            "SentID": 4569,
            "TokenID": "10",
            "Context": "return ( T ) invoker . invoke ( object , args ) ;"
        },
        {
            "Word": "args",
            "WordID": "17",
            "SentID": 4573,
            "TokenID": "11",
            "Context": "returnValue = ( T ) invoker . invoke ( object , args ) ;"
        },
        {
            "Word": "args",
            "WordID": "19",
            "SentID": 4665,
            "TokenID": "7",
            "Context": "return method . invoke ( instance , args ) ;"
        },
        {
            "Word": "args",
            "WordID": "20",
            "SentID": 4822,
            "TokenID": "6",
            "Context": "instance = constructor . newInstance ( args ) ;"
        },
        {
            "Word": "args",
            "WordID": "22",
            "SentID": 4842,
            "TokenID": "9",
            "Context": "return getAppFactory ( ) . getInstance ( interfaceClass , args ) ;"
        },
        {
            "Word": "args",
            "WordID": "24",
            "SentID": 4844,
            "TokenID": "11",
            "Context": "return getAppFactory ( ) . getInstance ( instanceName , interfaceClass , args ) ;"
        },
        {
            "Word": "args",
            "WordID": "26",
            "SentID": 4846,
            "TokenID": "9",
            "Context": "return getAppFactory ( ) . getOptionalInstance ( interfaceClass , args ) ;"
        },
        {
            "Word": "args",
            "WordID": "29",
            "SentID": 4960,
            "TokenID": "2",
            "Context": "if ( args == null ) {"
        },
        {
            "Word": "args",
            "WordID": "32",
            "SentID": 4965,
            "TokenID": "9",
            "Context": "return preProcessArguments ( managedClass , constructor , types , args ) ;"
        },
        {
            "Word": "args",
            "WordID": "34",
            "SentID": 4970,
            "TokenID": "9",
            "Context": "return preProcessArguments ( managedClass , method , types , args ) ;"
        },
        {
            "Word": "args",
            "WordID": "36",
            "SentID": 4972,
            "TokenID": "2",
            "Context": "switch ( args . length ) {"
        },
        {
            "Word": "args",
            "WordID": "41",
            "SentID": 4976,
            "TokenID": "12",
            "Context": "args [ 0 ] = ( ( VarArgs < ? > ) args [ 0 ] ) . getArguments ( ) ;"
        },
        {
            "Word": "args",
            "WordID": "42",
            "SentID": 4977,
            "TokenID": "6",
            "Context": "if ( formalParameters . length != args . length ) {"
        },
        {
            "Word": "args",
            "WordID": "43",
            "SentID": 4979,
            "TokenID": "2",
            "Context": "if ( args [ i ] != null && ! Types . isInstanceOf ( args [ i ] , formalParameters [ i ] ) ) {"
        },
        {
            "Word": "args",
            "WordID": "44",
            "SentID": 4979,
            "TokenID": "14",
            "Context": "if ( args [ i ] != null && ! Types . isInstanceOf ( args [ i ] , formalParameters [ i ] ) ) {"
        },
        {
            "Labels": [
                "\"Command Line Parameters\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "args, arg",
            "Semantic": "function calls, configuration",
            "Syntactic": "arguments",
            "Description": "arguments with \"args\" and \"arg\" in the name used in function calls often to do with configuration and logging.",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Syntactic",
            "Q6_Answer": "None"
        }
    ],
    "186": [
        {
            "Word": "formatAndLog",
            "WordID": "1",
            "SentID": 3725,
            "TokenID": "0",
            "Context": "formatAndLog ( Log . VERBOSE , format , arg ) ;"
        },
        {
            "Word": "formatAndLog",
            "WordID": "2",
            "SentID": 3727,
            "TokenID": "0",
            "Context": "formatAndLog ( Log . VERBOSE , format , arg1 , arg2 ) ;"
        },
        {
            "Word": "formatAndLog",
            "WordID": "3",
            "SentID": 3729,
            "TokenID": "0",
            "Context": "formatAndLog ( Log . VERBOSE , format , argArray ) ;"
        },
        {
            "Word": "log",
            "WordID": "1",
            "SentID": 3731,
            "TokenID": "0",
            "Context": "log ( Log . VERBOSE , msg , t ) ;"
        },
        {
            "Word": "formatAndLog",
            "WordID": "4",
            "SentID": 3733,
            "TokenID": "0",
            "Context": "formatAndLog ( Log . DEBUG , format , arg ) ;"
        },
        {
            "Word": "formatAndLog",
            "WordID": "5",
            "SentID": 3735,
            "TokenID": "0",
            "Context": "formatAndLog ( Log . DEBUG , format , arg1 , arg2 ) ;"
        },
        {
            "Word": "formatAndLog",
            "WordID": "6",
            "SentID": 3737,
            "TokenID": "0",
            "Context": "formatAndLog ( Log . DEBUG , format , argArray ) ;"
        },
        {
            "Word": "log",
            "WordID": "2",
            "SentID": 3739,
            "TokenID": "0",
            "Context": "log ( Log . DEBUG , msg , t ) ;"
        },
        {
            "Word": "formatAndLog",
            "WordID": "7",
            "SentID": 3741,
            "TokenID": "0",
            "Context": "formatAndLog ( Log . INFO , format , arg ) ;"
        },
        {
            "Word": "formatAndLog",
            "WordID": "8",
            "SentID": 3743,
            "TokenID": "0",
            "Context": "formatAndLog ( Log . INFO , format , arg1 , arg2 ) ;"
        },
        {
            "Word": "formatAndLog",
            "WordID": "9",
            "SentID": 3745,
            "TokenID": "0",
            "Context": "formatAndLog ( Log . INFO , format , argArray ) ;"
        },
        {
            "Word": "log",
            "WordID": "3",
            "SentID": 3747,
            "TokenID": "0",
            "Context": "log ( Log . INFO , msg , t ) ;"
        },
        {
            "Word": "formatAndLog",
            "WordID": "10",
            "SentID": 3749,
            "TokenID": "0",
            "Context": "formatAndLog ( Log . WARN , format , arg ) ;"
        },
        {
            "Word": "formatAndLog",
            "WordID": "11",
            "SentID": 3751,
            "TokenID": "0",
            "Context": "formatAndLog ( Log . WARN , format , arg1 , arg2 ) ;"
        },
        {
            "Word": "formatAndLog",
            "WordID": "12",
            "SentID": 3753,
            "TokenID": "0",
            "Context": "formatAndLog ( Log . WARN , format , argArray ) ;"
        },
        {
            "Word": "log",
            "WordID": "4",
            "SentID": 3755,
            "TokenID": "0",
            "Context": "log ( Log . WARN , msg , t ) ;"
        },
        {
            "Word": "formatAndLog",
            "WordID": "13",
            "SentID": 3757,
            "TokenID": "0",
            "Context": "formatAndLog ( Log . ERROR , format , arg ) ;"
        },
        {
            "Word": "formatAndLog",
            "WordID": "14",
            "SentID": 3759,
            "TokenID": "0",
            "Context": "formatAndLog ( Log . ERROR , format , arg1 , arg2 ) ;"
        },
        {
            "Word": "formatAndLog",
            "WordID": "15",
            "SentID": 3761,
            "TokenID": "0",
            "Context": "formatAndLog ( Log . ERROR , format , argArray ) ;"
        },
        {
            "Word": "log",
            "WordID": "5",
            "SentID": 3763,
            "TokenID": "0",
            "Context": "log ( Log . ERROR , msg , t ) ;"
        },
        {
            "Word": "log",
            "WordID": "7",
            "SentID": 4054,
            "TokenID": "0",
            "Context": "log . trace ( \"config(Config.Element)\" ) ;"
        },
        {
            "Word": "log",
            "WordID": "8",
            "SentID": 4284,
            "TokenID": "0",
            "Context": "log . error ( builder . toString ( ) ) ;"
        },
        {
            "Word": "log",
            "WordID": "9",
            "SentID": 4453,
            "TokenID": "0",
            "Context": "log . trace ( \"config(Config)\" ) ;"
        },
        {
            "Word": "log",
            "WordID": "10",
            "SentID": 4477,
            "TokenID": "0",
            "Context": "log . trace ( \"start()\" ) ;"
        },
        {
            "Word": "log",
            "WordID": "11",
            "SentID": 4486,
            "TokenID": "0",
            "Context": "log . trace ( \"destroy()\" ) ;"
        },
        {
            "Word": "log",
            "WordID": "12",
            "SentID": 4584,
            "TokenID": "0",
            "Context": "log . error ( e ) ;"
        },
        {
            "Word": "log",
            "WordID": "13",
            "SentID": 4703,
            "TokenID": "0",
            "Context": "log . error ( message . toString ( ) ) ;"
        },
        {
            "Labels": [
                "\"Logging and Formatting Operations\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "formatAndLog, log",
            "Syntactic": "method",
            "Semantic": "Error handling",
            "Description": "methods called \"formatAndLog\" and \"log\" used in error handling.",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Lexicographic",
            "Q6_Answer": "None"
        }
    ],
    "205": [
        {
            "Word": "argArray",
            "WordID": "1",
            "SentID": 3728,
            "TokenID": "10",
            "Context": "} public void trace ( String format , Object ... argArray ) {"
        },
        {
            "Word": "argArray",
            "WordID": "3",
            "SentID": 3736,
            "TokenID": "10",
            "Context": "} public void debug ( String format , Object ... argArray ) {"
        },
        {
            "Word": "argArray",
            "WordID": "5",
            "SentID": 3744,
            "TokenID": "10",
            "Context": "} public void info ( String format , Object ... argArray ) {"
        },
        {
            "Word": "argArray",
            "WordID": "7",
            "SentID": 3752,
            "TokenID": "10",
            "Context": "} public void warn ( String format , Object ... argArray ) {"
        },
        {
            "Word": "argArray",
            "WordID": "9",
            "SentID": 3760,
            "TokenID": "10",
            "Context": "} public void error ( String format , Object ... argArray ) {"
        },
        {
            "Word": "args",
            "WordID": "4",
            "SentID": 4422,
            "TokenID": "12",
            "Context": "public < T > T newInstance ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": "args",
            "WordID": "5",
            "SentID": 4502,
            "TokenID": "17",
            "Context": "public < T > T getInstance ( Class < ? super T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "args",
            "WordID": "7",
            "SentID": 4506,
            "TokenID": "15",
            "Context": "private < T > T getInstance ( ManagedClassSPI managedClass , InstanceKey instanceKey , Object ... args ) {"
        },
        {
            "Word": "args",
            "WordID": "12",
            "SentID": 4561,
            "TokenID": "12",
            "Context": "public < T > T invoke ( Object object , Object ... args ) throws AuthorizationException , IllegalArgumentException , InvocationException {"
        },
        {
            "Word": "args",
            "WordID": "18",
            "SentID": 4663,
            "TokenID": "13",
            "Context": "public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable {"
        },
        {
            "Word": "args",
            "WordID": "21",
            "SentID": 4841,
            "TokenID": "17",
            "Context": "} public static < T > T getInstance ( Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "args",
            "WordID": "23",
            "SentID": 4843,
            "TokenID": "20",
            "Context": "} public static < T > T getInstance ( String instanceName , Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "args",
            "WordID": "25",
            "SentID": 4845,
            "TokenID": "17",
            "Context": "} public static < T > T getOptionalInstance ( Class < T > interfaceClass , Object ... args ) {"
        },
        {
            "Word": "args",
            "WordID": "27",
            "SentID": 4868,
            "TokenID": "12",
            "Context": "public < I > I newInstance ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": "args",
            "WordID": "28",
            "SentID": 4959,
            "TokenID": "12",
            "Context": "} public Object [ ] preProcessArguments ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": "args",
            "WordID": "33",
            "SentID": 4966,
            "TokenID": "12",
            "Context": "} public Object [ ] preProcessArguments ( ManagedMethodSPI managedMethod , Object ... args ) {"
        },
        {
            "Word": "args",
            "WordID": "35",
            "SentID": 4971,
            "TokenID": "24",
            "Context": "} private static Object [ ] preProcessArguments ( ManagedClassSPI managedClass , Member member , Class < ? > [ ] formalParameters , Object ... args ) {"
        },
        {
            "Labels": [
                "\"Command Line Arguments Handling\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "args, argArray",
            "Semantic": "function definitions",
            "Syntactic": "parameters",
            "Description": "parameters called \"args\" and \"argArrray\" in function definitions",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Lexicographic",
            "Q6_Answer": "None"
        }
    ],
    "237": [
        {
            "Word": "t",
            "WordID": "1",
            "SentID": 3730,
            "TokenID": "9",
            "Context": "} public void trace ( String msg , Throwable t ) {"
        },
        {
            "Word": "t",
            "WordID": "2",
            "SentID": 3731,
            "TokenID": "8",
            "Context": "log ( Log . VERBOSE , msg , t ) ;"
        },
        {
            "Word": "t",
            "WordID": "3",
            "SentID": 3738,
            "TokenID": "9",
            "Context": "} public void debug ( String msg , Throwable t ) {"
        },
        {
            "Word": "t",
            "WordID": "4",
            "SentID": 3739,
            "TokenID": "8",
            "Context": "log ( Log . DEBUG , msg , t ) ;"
        },
        {
            "Word": "t",
            "WordID": "5",
            "SentID": 3746,
            "TokenID": "9",
            "Context": "} public void info ( String msg , Throwable t ) {"
        },
        {
            "Word": "t",
            "WordID": "6",
            "SentID": 3747,
            "TokenID": "8",
            "Context": "log ( Log . INFO , msg , t ) ;"
        },
        {
            "Word": "t",
            "WordID": "7",
            "SentID": 3754,
            "TokenID": "9",
            "Context": "} public void warn ( String msg , Throwable t ) {"
        },
        {
            "Word": "t",
            "WordID": "8",
            "SentID": 3755,
            "TokenID": "8",
            "Context": "log ( Log . WARN , msg , t ) ;"
        },
        {
            "Word": "t",
            "WordID": "9",
            "SentID": 3762,
            "TokenID": "9",
            "Context": "} public void error ( String msg , Throwable t ) {"
        },
        {
            "Word": "t",
            "WordID": "10",
            "SentID": 3763,
            "TokenID": "8",
            "Context": "log ( Log . ERROR , msg , t ) ;"
        },
        {
            "Word": "t",
            "WordID": "11",
            "SentID": 4757,
            "TokenID": "10",
            "Context": "} catch ( IOException | ServletException | Error | RuntimeException t ) {"
        },
        {
            "Word": "t",
            "WordID": "12",
            "SentID": 4758,
            "TokenID": "4",
            "Context": "dumpError ( context , t ) ;"
        },
        {
            "Labels": [
                "\"Single Character Variable Usage\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "t",
            "Syntactic": "parameter",
            "Semantic": "error handling",
            "Description": "parameter called \"t\" used in functions related to error handling and logging.",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Syntactic",
            "Q6_Answer": "None"
        }
    ],
    "180": [
        {
            "Word": "ManagedClassSPI",
            "WordID": "1",
            "SentID": 3949,
            "TokenID": "4",
            "Context": "public void postProcessInstance ( ManagedClassSPI managedClass , Object instance ) {"
        },
        {
            "Word": "ManagedMethodSPI",
            "WordID": "1",
            "SentID": 3986,
            "TokenID": "2",
            "Context": "for ( ManagedMethodSPI managedMethod : container . getManagedMethods ( ) ) {"
        },
        {
            "Word": "ManagedMethodSPI",
            "WordID": "2",
            "SentID": 3994,
            "TokenID": "0",
            "Context": "ManagedMethodSPI method = null ;"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "2",
            "SentID": 4273,
            "TokenID": "5",
            "Context": "protected static Object getDependencyValue ( ManagedClassSPI hostManagedClass , Class < ? > type ) {"
        },
        {
            "Word": "ContainerSPI",
            "WordID": "1",
            "SentID": 4278,
            "TokenID": "0",
            "Context": "ContainerSPI container = hostManagedClass . getContainer ( ) ;"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "3",
            "SentID": 4287,
            "TokenID": "0",
            "Context": "ManagedClassSPI dependencyManagedClass = container . getManagedClass ( type ) ;"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "4",
            "SentID": 4297,
            "TokenID": "6",
            "Context": "} private static boolean isProxyRequired ( ManagedClassSPI hostManagedClass , ManagedClassSPI dependencyManagedClass ) {"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "5",
            "SentID": 4297,
            "TokenID": "9",
            "Context": "} private static boolean isProxyRequired ( ManagedClassSPI hostManagedClass , ManagedClassSPI dependencyManagedClass ) {"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "6",
            "SentID": 4422,
            "TokenID": "7",
            "Context": "public < T > T newInstance ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "7",
            "SentID": 4474,
            "TokenID": "0",
            "Context": "ManagedClassSPI appContext = classesPool . get ( AppContext . class ) ;"
        },
        {
            "Word": "ContainerSPI",
            "WordID": "2",
            "SentID": 4475,
            "TokenID": "16",
            "Context": "if ( appContext != null && Types . isKindOf ( appContext . getImplementationClass ( ) , ContainerSPI . class ) ) {"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "8",
            "SentID": 4478,
            "TokenID": "2",
            "Context": "Set < ManagedClassSPI > sortedClasses = new TreeSet < > ( new Comparator < ManagedClassSPI > ( ) {"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "9",
            "SentID": 4478,
            "TokenID": "14",
            "Context": "Set < ManagedClassSPI > sortedClasses = new TreeSet < > ( new Comparator < ManagedClassSPI > ( ) {"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "10",
            "SentID": 4479,
            "TokenID": "4",
            "Context": "public int compare ( ManagedClassSPI o1 , ManagedClassSPI o2 ) {"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "11",
            "SentID": 4479,
            "TokenID": "7",
            "Context": "public int compare ( ManagedClassSPI o1 , ManagedClassSPI o2 ) {"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "12",
            "SentID": 4481,
            "TokenID": "2",
            "Context": "for ( ManagedClassSPI managedClass : classesPool . values ( ) ) {"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "13",
            "SentID": 4484,
            "TokenID": "2",
            "Context": "for ( ManagedClassSPI managedClass : sortedClasses ) {"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "14",
            "SentID": 4503,
            "TokenID": "0",
            "Context": "ManagedClassSPI managedClass = classesPool . get ( interfaceClass ) ;"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "15",
            "SentID": 4506,
            "TokenID": "7",
            "Context": "private < T > T getInstance ( ManagedClassSPI managedClass , InstanceKey instanceKey , Object ... args ) {"
        },
        {
            "Word": "ContainerSPI",
            "WordID": "3",
            "SentID": 4706,
            "TokenID": "0",
            "Context": "ContainerSPI container = ( ContainerSPI ) Factory . getAppFactory ( ) ;"
        },
        {
            "Word": "ContainerSPI",
            "WordID": "4",
            "SentID": 4706,
            "TokenID": "4",
            "Context": "ContainerSPI container = ( ContainerSPI ) Factory . getAppFactory ( ) ;"
        },
        {
            "Word": "ContainerSPI",
            "WordID": "5",
            "SentID": 4744,
            "TokenID": "3",
            "Context": "container = ( ContainerSPI ) config . getServletContext ( ) . getAttribute ( TinyContainer . ATTR_INSTANCE ) ;"
        },
        {
            "Word": "ContainerSPI",
            "WordID": "6",
            "SentID": 4774,
            "TokenID": "1",
            "Context": "final ContainerSPI container = context . getContainer ( ) ;"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "16",
            "SentID": 4868,
            "TokenID": "7",
            "Context": "public < I > I newInstance ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "17",
            "SentID": 4959,
            "TokenID": "7",
            "Context": "} public Object [ ] preProcessArguments ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": "ManagedMethodSPI",
            "WordID": "3",
            "SentID": 4966,
            "TokenID": "7",
            "Context": "} public Object [ ] preProcessArguments ( ManagedMethodSPI managedMethod , Object ... args ) {"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "18",
            "SentID": 4967,
            "TokenID": "1",
            "Context": "final ManagedClassSPI managedClass = managedMethod . getDeclaringClass ( ) ;"
        },
        {
            "Word": "ManagedClassSPI",
            "WordID": "19",
            "SentID": 4971,
            "TokenID": "8",
            "Context": "} private static Object [ ] preProcessArguments ( ManagedClassSPI managedClass , Member member , Class < ? > [ ] formalParameters , Object ... args ) {"
        },
        {
            "Labels": [
                "\"Java SPI (Service Provider Interface) Management\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "SPI",
            "Syntactic": "datatype Keyword",
            "Semantic": "parameters, function calls, function definitions",
            "Description": "datatype keyword, many used in parameters of function definitions",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "409": [
        {
            "Word": "managedClass",
            "WordID": "2",
            "SentID": 3950,
            "TokenID": "3",
            "Context": "if ( ! managedClass . getInstanceScope ( ) . equals ( InstanceScope . APPLICATION ) ) {"
        },
        {
            "Word": "managedClass",
            "WordID": "3",
            "SentID": 3951,
            "TokenID": "3",
            "Context": "if ( ! managedClass . getInstanceType ( ) . equals ( InstanceType . PROXY ) ) {"
        },
        {
            "Word": "managedClass",
            "WordID": "5",
            "SentID": 4056,
            "TokenID": "3",
            "Context": "Config config = managedClass . getConfig ( ) ;"
        },
        {
            "Word": "managedClass",
            "WordID": "6",
            "SentID": 4059,
            "TokenID": "16",
            "Context": "if ( ! fields . isEmpty ( ) && ! InstanceType . POJO . equals ( managedClass . getInstanceType ( ) ) ) {"
        },
        {
            "Word": "implementationClass",
            "WordID": "9",
            "SentID": 4086,
            "TokenID": "5",
            "Context": "for ( Method method : implementationClass . getDeclaredMethods ( ) ) {"
        },
        {
            "Word": "implementationClass",
            "WordID": "10",
            "SentID": 4146,
            "TokenID": "5",
            "Context": "for ( Field field : implementationClass . getDeclaredFields ( ) ) {"
        },
        {
            "Word": "implementationClass",
            "WordID": "12",
            "SentID": 4156,
            "TokenID": "2",
            "Context": "if ( implementationClass == null ) {"
        },
        {
            "Word": "implementationClass",
            "WordID": "13",
            "SentID": 4157,
            "TokenID": "2",
            "Context": "if ( implementationClass . isInterface ( ) ) {"
        },
        {
            "Word": "implementationClass",
            "WordID": "15",
            "SentID": 4160,
            "TokenID": "6",
            "Context": "if ( Types . isKindOf ( implementationClass , ManagedLifeCycle . class ) && ! InstanceScope . APPLICATION . equals ( instanceScope ) ) {"
        },
        {
            "Word": "implementationClass",
            "WordID": "16",
            "SentID": 4161,
            "TokenID": "1",
            "Context": "return implementationClass ;"
        },
        {
            "Word": "implementationClass",
            "WordID": "17",
            "SentID": 4167,
            "TokenID": "9",
            "Context": "return new Class < ? > [ ] { implementationClass } ;"
        },
        {
            "Word": "interfaceClass",
            "WordID": "2",
            "SentID": 4181,
            "TokenID": "2",
            "Context": "if ( interfaceClass == null ) {"
        },
        {
            "Word": "interfaceClass",
            "WordID": "3",
            "SentID": 4182,
            "TokenID": "6",
            "Context": "if ( Types . isKindOf ( interfaceClass , ManagedLifeCycle . class ) ) {"
        },
        {
            "Word": "interfaceClass",
            "WordID": "4",
            "SentID": 4183,
            "TokenID": "9",
            "Context": "if ( instanceType . requiresInterface ( ) && ! interfaceClass . isInterface ( ) ) {"
        },
        {
            "Word": "implementationClass",
            "WordID": "21",
            "SentID": 4200,
            "TokenID": "16",
            "Context": "Constructor < ? > [ ] declaredConstructors = ( Constructor < ? > [ ] ) implementationClass . getDeclaredConstructors ( ) ;"
        },
        {
            "Word": "implementationClass",
            "WordID": "23",
            "SentID": 4233,
            "TokenID": "2",
            "Context": "if ( implementationClass != null ) {"
        },
        {
            "Word": "annotationClass",
            "WordID": "2",
            "SentID": 4243,
            "TokenID": "7",
            "Context": "T annotation = clazz . getAnnotation ( annotationClass ) ;"
        },
        {
            "Word": "annotationClass",
            "WordID": "3",
            "SentID": 4245,
            "TokenID": "6",
            "Context": "annotation = interfaceClass . getAnnotation ( annotationClass ) ;"
        },
        {
            "Word": "annotationClass",
            "WordID": "5",
            "SentID": 4249,
            "TokenID": "7",
            "Context": "Annotation annotation = clazz . getAnnotation ( annotationClass ) ;"
        },
        {
            "Word": "annotationClass",
            "WordID": "7",
            "SentID": 4251,
            "TokenID": "7",
            "Context": "T annotation = method . getAnnotation ( annotationClass ) ;"
        },
        {
            "Word": "annotationClass",
            "WordID": "8",
            "SentID": 4253,
            "TokenID": "21",
            "Context": "annotation = interfaceClass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) . getAnnotation ( annotationClass ) ;"
        },
        {
            "Word": "hostManagedClass",
            "WordID": "2",
            "SentID": 4278,
            "TokenID": "3",
            "Context": "ContainerSPI container = hostManagedClass . getContainer ( ) ;"
        },
        {
            "Word": "dependencyManagedClass",
            "WordID": "6",
            "SentID": 4298,
            "TokenID": "2",
            "Context": "if ( dependencyManagedClass != null ) {"
        },
        {
            "Word": "dependencyManagedClass",
            "WordID": "7",
            "SentID": 4299,
            "TokenID": "3",
            "Context": "InstanceScope dependencyScope = dependencyManagedClass . getInstanceScope ( ) ;"
        },
        {
            "Word": "hostManagedClass",
            "WordID": "5",
            "SentID": 4301,
            "TokenID": "7",
            "Context": "return InstanceScope . APPLICATION . equals ( hostManagedClass . getInstanceScope ( ) ) ;"
        },
        {
            "Word": "interfaceClass",
            "WordID": "15",
            "SentID": 4429,
            "TokenID": "7",
            "Context": "return remoteFactory . getRemoteInstance ( implementationURL , interfaceClass ) ;"
        },
        {
            "Word": "interfaceClass",
            "WordID": "17",
            "SentID": 4462,
            "TokenID": "13",
            "Context": "if ( classDescriptors . get ( i ) . hasAttribute ( \"interface\" , interfaceClass ) ) {"
        },
        {
            "Word": "managedClass",
            "WordID": "11",
            "SentID": 4468,
            "TokenID": "8",
            "Context": "for ( Class < ? > interfaceClass : managedClass . getInterfaceClasses ( ) ) {"
        },
        {
            "Word": "managedClass",
            "WordID": "15",
            "SentID": 4482,
            "TokenID": "2",
            "Context": "if ( managedClass . isAutoInstanceCreation ( ) ) {"
        },
        {
            "Word": "managedClass",
            "WordID": "19",
            "SentID": 4489,
            "TokenID": "6",
            "Context": "if ( Types . isKindOf ( managedClass . getImplementationClass ( ) , ManagedPreDestroy . class ) ) {"
        },
        {
            "Word": "managedClass",
            "WordID": "20",
            "SentID": 4490,
            "TokenID": "7",
            "Context": "ScopeFactory scopeFactory = scopeFactories . get ( managedClass . getInstanceScope ( ) ) ;"
        },
        {
            "Word": "managedClass",
            "WordID": "21",
            "SentID": 4491,
            "TokenID": "6",
            "Context": "InstanceKey instanceKey = new InstanceKey ( managedClass . getKey ( ) ) ;"
        },
        {
            "Word": "managedClass",
            "WordID": "23",
            "SentID": 4504,
            "TokenID": "2",
            "Context": "if ( managedClass == null ) {"
        },
        {
            "Word": "managedClass",
            "WordID": "26",
            "SentID": 4507,
            "TokenID": "7",
            "Context": "InstanceFactory instanceFactory = instanceFactories . get ( managedClass . getInstanceType ( ) ) ;"
        },
        {
            "Word": "managedClass",
            "WordID": "30",
            "SentID": 4527,
            "TokenID": "4",
            "Context": "instanceProcessor . postProcessInstance ( managedClass , pojoInstance ) ;"
        },
        {
            "Word": "converterClass",
            "WordID": "2",
            "SentID": 4536,
            "TokenID": "2",
            "Context": "if ( converterClass == null ) {"
        },
        {
            "Word": "converterClass",
            "WordID": "3",
            "SentID": 4537,
            "TokenID": "10",
            "Context": "ConverterRegistry . getInstance ( ) . registerConverter ( valueType , converterClass ) ;"
        },
        {
            "Word": "pojoClass",
            "WordID": "2",
            "SentID": 4546,
            "TokenID": "2",
            "Context": "if ( pojoClass == null ) {"
        },
        {
            "Word": "managedClass",
            "WordID": "31",
            "SentID": 4556,
            "TokenID": "5",
            "Context": "for ( Field dependency : managedClass . getDependencies ( ) ) {"
        },
        {
            "Word": "managedClass",
            "WordID": "33",
            "SentID": 4821,
            "TokenID": "6",
            "Context": "Constructor < ? > constructor = managedClass . getConstructor ( ) ;"
        },
        {
            "Word": "managedClass",
            "WordID": "34",
            "SentID": 4824,
            "TokenID": "2",
            "Context": "if ( managedClass . getInstanceType ( ) . equals ( InstanceType . PROXY ) ) {"
        },
        {
            "Word": "managedClass",
            "WordID": "35",
            "SentID": 4826,
            "TokenID": "2",
            "Context": "if ( managedClass . isTransactional ( ) ) {"
        },
        {
            "Word": "managedClass",
            "WordID": "36",
            "SentID": 4827,
            "TokenID": "3",
            "Context": "TransactionalResource transactionalResource = managedClass . getContainer ( ) . getInstance ( TransactionalResource . class ) ;"
        },
        {
            "Word": "managedClass",
            "WordID": "37",
            "SentID": 4828,
            "TokenID": "7",
            "Context": "handler = new ManagedProxyHandler ( transactionalResource , managedClass , instance ) ;"
        },
        {
            "Word": "managedClass",
            "WordID": "38",
            "SentID": 4829,
            "TokenID": "5",
            "Context": "handler = new ManagedProxyHandler ( managedClass , instance ) ;"
        },
        {
            "Word": "managedClass",
            "WordID": "39",
            "SentID": 4830,
            "TokenID": "4",
            "Context": "final ClassLoader classLoader = managedClass . getImplementationClass ( ) . getClassLoader ( ) ;"
        },
        {
            "Word": "interfaceClass",
            "WordID": "24",
            "SentID": 4842,
            "TokenID": "7",
            "Context": "return getAppFactory ( ) . getInstance ( interfaceClass , args ) ;"
        },
        {
            "Word": "interfaceClass",
            "WordID": "26",
            "SentID": 4844,
            "TokenID": "9",
            "Context": "return getAppFactory ( ) . getInstance ( instanceName , interfaceClass , args ) ;"
        },
        {
            "Word": "interfaceClass",
            "WordID": "28",
            "SentID": 4846,
            "TokenID": "7",
            "Context": "return getAppFactory ( ) . getOptionalInstance ( interfaceClass , args ) ;"
        },
        {
            "Word": "interfaceClass",
            "WordID": "30",
            "SentID": 4848,
            "TokenID": "9",
            "Context": "return getAppFactory ( ) . getRemoteInstance ( implementationURL , interfaceClass ) ;"
        },
        {
            "Word": "managedClass",
            "WordID": "43",
            "SentID": 4962,
            "TokenID": "2",
            "Context": "if ( managedClass . getImplementationClass ( ) == null ) {"
        },
        {
            "Labels": [
                "\"Class Management and Implementation in Java\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "Class",
            "Syntactic": "objects",
            "Semantic": "conditionals, Configuration",
            "Description": "objects with \"class\" in the name, many used in conditionals and related to configuration",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "235": [
        {
            "Word": "arguments",
            "WordID": "1",
            "SentID": 3964,
            "TokenID": "3",
            "Context": "Object [ ] arguments = new Object [ 1 ] ;"
        },
        {
            "Word": "arguments",
            "WordID": "2",
            "SentID": 3966,
            "TokenID": "0",
            "Context": "arguments [ 0 ] = new FormImpl ( httpRequest ) ;"
        },
        {
            "Word": "arguments",
            "WordID": "3",
            "SentID": 3968,
            "TokenID": "0",
            "Context": "arguments [ 0 ] = new FormIteratorImpl ( httpRequest ) ;"
        },
        {
            "Word": "arguments",
            "WordID": "4",
            "SentID": 3971,
            "TokenID": "0",
            "Context": "arguments [ 0 ] = form . getUploadedFile ( ) ;"
        },
        {
            "Word": "arguments",
            "WordID": "5",
            "SentID": 3973,
            "TokenID": "8",
            "Context": "threadLocal . set ( ( Closeable ) ( arguments [ 0 ] = getUploadStream ( httpRequest , formalParameters ) ) ) ;"
        },
        {
            "Word": "arguments",
            "WordID": "6",
            "SentID": 3975,
            "TokenID": "8",
            "Context": "threadLocal . set ( ( Closeable ) ( arguments [ 0 ] = getUploadStream ( httpRequest , formalParameters ) . openStream ( ) ) ) ;"
        },
        {
            "Word": "arguments",
            "WordID": "7",
            "SentID": 3976,
            "TokenID": "0",
            "Context": "arguments [ 0 ] = new FormObject ( httpRequest , type ) . getValue ( ) ;"
        },
        {
            "Word": "arguments",
            "WordID": "8",
            "SentID": 3977,
            "TokenID": "1",
            "Context": "return arguments ;"
        },
        {
            "Word": "arguments",
            "WordID": "9",
            "SentID": 3999,
            "TokenID": "3",
            "Context": "Object [ ] arguments = argumentsReader . read ( httpRequest , formalParameters ) ;"
        },
        {
            "Word": "getActualTypeArguments",
            "WordID": "1",
            "SentID": 4271,
            "TokenID": "18",
            "Context": "return ( Class < ? > ) ( ( ParameterizedType ) field . getGenericType ( ) ) . getActualTypeArguments ( ) [ 0 ] ;"
        },
        {
            "Word": "args",
            "WordID": "8",
            "SentID": 4508,
            "TokenID": "0",
            "Context": "args = argumentsProcessor . preProcessArguments ( managedClass , args ) ;"
        },
        {
            "Word": "preProcessArguments",
            "WordID": "1",
            "SentID": 4508,
            "TokenID": "4",
            "Context": "args = argumentsProcessor . preProcessArguments ( managedClass , args ) ;"
        },
        {
            "Word": "args",
            "WordID": "13",
            "SentID": 4564,
            "TokenID": "0",
            "Context": "args = argumentsProcessor . preProcessArguments ( this , args ) ;"
        },
        {
            "Word": "preProcessArguments",
            "WordID": "2",
            "SentID": 4564,
            "TokenID": "4",
            "Context": "args = argumentsProcessor . preProcessArguments ( this , args ) ;"
        },
        {
            "Word": "arguments",
            "WordID": "11",
            "SentID": 4627,
            "TokenID": "3",
            "Context": "Object [ ] arguments = new Object [ formalParameters . length ] ;"
        },
        {
            "Word": "arguments",
            "WordID": "12",
            "SentID": 4639,
            "TokenID": "0",
            "Context": "arguments [ argumentIndex ] = argumentPartReader . read ( inputStream , parameterType ) ;"
        },
        {
            "Word": "getArguments",
            "WordID": "1",
            "SentID": 4838,
            "TokenID": "3",
            "Context": "return queryParameters . getArguments ( formalParameters ) ;"
        },
        {
            "Word": "getArguments",
            "WordID": "2",
            "SentID": 4917,
            "TokenID": "5",
            "Context": "} public Object [ ] getArguments ( Type [ ] formalParameters ) {"
        },
        {
            "Word": "arguments",
            "WordID": "13",
            "SentID": 4925,
            "TokenID": "0",
            "Context": "arguments [ i ] = asObject ( parameters . get ( i ) . getValue ( ) , formalParameters [ i ] ) ;"
        },
        {
            "Word": "arguments",
            "WordID": "14",
            "SentID": 4927,
            "TokenID": "0",
            "Context": "arguments [ i ] = null ;"
        },
        {
            "Word": "getActualTypeArguments",
            "WordID": "2",
            "SentID": 4943,
            "TokenID": "15",
            "Context": "itemType = ( Class < ? > ) ( ( ParameterizedType ) type ) . getActualTypeArguments ( ) [ 0 ] ;"
        },
        {
            "Word": "preProcessArguments",
            "WordID": "3",
            "SentID": 4959,
            "TokenID": "5",
            "Context": "} public Object [ ] preProcessArguments ( ManagedClassSPI managedClass , Object ... args ) {"
        },
        {
            "Word": "args",
            "WordID": "30",
            "SentID": 4961,
            "TokenID": "0",
            "Context": "args = EMPTY_ARGS ;"
        },
        {
            "Word": "EMPTY_ARGS",
            "WordID": "1",
            "SentID": 4961,
            "TokenID": "2",
            "Context": "args = EMPTY_ARGS ;"
        },
        {
            "Word": "preProcessArguments",
            "WordID": "4",
            "SentID": 4965,
            "TokenID": "1",
            "Context": "return preProcessArguments ( managedClass , constructor , types , args ) ;"
        },
        {
            "Word": "preProcessArguments",
            "WordID": "5",
            "SentID": 4966,
            "TokenID": "5",
            "Context": "} public Object [ ] preProcessArguments ( ManagedMethodSPI managedMethod , Object ... args ) {"
        },
        {
            "Word": "preProcessArguments",
            "WordID": "6",
            "SentID": 4970,
            "TokenID": "1",
            "Context": "return preProcessArguments ( managedClass , method , types , args ) ;"
        },
        {
            "Word": "preProcessArguments",
            "WordID": "7",
            "SentID": 4971,
            "TokenID": "6",
            "Context": "} private static Object [ ] preProcessArguments ( ManagedClassSPI managedClass , Member member , Class < ? > [ ] formalParameters , Object ... args ) {"
        },
        {
            "Word": "args",
            "WordID": "37",
            "SentID": 4973,
            "TokenID": "0",
            "Context": "args = new Object [ formalParameters . length ] ;"
        },
        {
            "Word": "args",
            "WordID": "40",
            "SentID": 4976,
            "TokenID": "0",
            "Context": "args [ 0 ] = ( ( VarArgs < ? > ) args [ 0 ] ) . getArguments ( ) ;"
        },
        {
            "Word": "getArguments",
            "WordID": "3",
            "SentID": 4976,
            "TokenID": "18",
            "Context": "args [ 0 ] = ( ( VarArgs < ? > ) args [ 0 ] ) . getArguments ( ) ;"
        },
        {
            "Labels": [
                "\"Argument Handling and Processing in Java\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "arguments, args",
            "Syntactic": "variables, methods",
            "Semantic": "variable assignment",
            "Description": "variables and methods with \"arguments\" and \"args\" in the names, often related to assigning values to variables.",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "455": [
        {
            "Word": "Types",
            "WordID": "1",
            "SentID": 3988,
            "TokenID": "3",
            "Context": "if ( ! Types . isKindOf ( managedMethod . getReturnType ( ) , Resource . class ) ) {"
        },
        {
            "Word": "Types",
            "WordID": "2",
            "SentID": 4135,
            "TokenID": "3",
            "Context": "if ( ! Types . isVoid ( method . getReturnType ( ) ) ) {"
        },
        {
            "Word": "Types",
            "WordID": "3",
            "SentID": 4160,
            "TokenID": "2",
            "Context": "if ( Types . isKindOf ( implementationClass , ManagedLifeCycle . class ) && ! InstanceScope . APPLICATION . equals ( instanceScope ) ) {"
        },
        {
            "Word": "Types",
            "WordID": "4",
            "SentID": 4182,
            "TokenID": "2",
            "Context": "if ( Types . isKindOf ( interfaceClass , ManagedLifeCycle . class ) ) {"
        },
        {
            "Word": "Types",
            "WordID": "5",
            "SentID": 4184,
            "TokenID": "7",
            "Context": "if ( implementationClass != null && ! Types . isKindOf ( implementationClass , interfaceClass ) ) {"
        },
        {
            "Word": "Types",
            "WordID": "6",
            "SentID": 4270,
            "TokenID": "2",
            "Context": "if ( Types . isKindOf ( field . getType ( ) , List . class ) ) {"
        },
        {
            "Word": "Types",
            "WordID": "7",
            "SentID": 4292,
            "TokenID": "2",
            "Context": "if ( Types . isKindOf ( type , AppFactory . class ) ) {"
        },
        {
            "Word": "Types",
            "WordID": "8",
            "SentID": 4475,
            "TokenID": "6",
            "Context": "if ( appContext != null && Types . isKindOf ( appContext . getImplementationClass ( ) , ContainerSPI . class ) ) {"
        },
        {
            "Word": "Types",
            "WordID": "9",
            "SentID": 4489,
            "TokenID": "2",
            "Context": "if ( Types . isKindOf ( managedClass . getImplementationClass ( ) , ManagedPreDestroy . class ) ) {"
        },
        {
            "Word": "Types",
            "WordID": "10",
            "SentID": 4656,
            "TokenID": "2",
            "Context": "if ( Types . isKindOf ( type , Document . class ) ) {"
        },
        {
            "Word": "Types",
            "WordID": "11",
            "SentID": 4658,
            "TokenID": "4",
            "Context": "} else if ( Types . isKindOf ( type , InputStream . class ) ) {"
        },
        {
            "Word": "Types",
            "WordID": "12",
            "SentID": 4930,
            "TokenID": "4",
            "Context": "return ( T ) Types . getEmptyValue ( type ) ;"
        },
        {
            "Word": "Types",
            "WordID": "13",
            "SentID": 4931,
            "TokenID": "3",
            "Context": "if ( ! Types . isArrayLike ( type ) ) {"
        },
        {
            "Word": "Types",
            "WordID": "14",
            "SentID": 4938,
            "TokenID": "2",
            "Context": "if ( Types . isKindOf ( type , Collection . class ) ) {"
        },
        {
            "Word": "Types",
            "WordID": "15",
            "SentID": 4951,
            "TokenID": "2",
            "Context": "if ( Types . isPrimitive ( type ) ) {"
        },
        {
            "Word": "Types",
            "WordID": "16",
            "SentID": 4952,
            "TokenID": "2",
            "Context": "if ( Types . isArrayLike ( type ) ) {"
        },
        {
            "Word": "Types",
            "WordID": "17",
            "SentID": 4953,
            "TokenID": "2",
            "Context": "if ( Types . isMap ( type ) ) {"
        },
        {
            "Word": "Types",
            "WordID": "18",
            "SentID": 4979,
            "TokenID": "10",
            "Context": "if ( args [ i ] != null && ! Types . isInstanceOf ( args [ i ] , formalParameters [ i ] ) ) {"
        },
        {
            "Labels": [
                "\"Java Data Types\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "Types",
            "Syntactic": "Object",
            "Semantic": "Conditionals",
            "Description": "Object named \"types\", often having th \"isKindOf\" function called on it, used in a conditional.",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Lexicographic",
            "Q6_Answer": "None"
        }
    ],
    "257": [
        {
            "Word": "getAttribute",
            "WordID": "1",
            "SentID": 4061,
            "TokenID": "8",
            "Context": "Classes . setFieldValue ( instance , field . getAttribute ( \"name\" ) , field . getAttribute ( \"value\" ) ) ;"
        },
        {
            "Word": "getAttribute",
            "WordID": "2",
            "SentID": 4061,
            "TokenID": "15",
            "Context": "Classes . setFieldValue ( instance , field . getAttribute ( \"name\" ) , field . getAttribute ( \"value\" ) ) ;"
        },
        {
            "Word": "getAttribute",
            "WordID": "3",
            "SentID": 4151,
            "TokenID": "5",
            "Context": "String implementationName = descriptor . getAttribute ( \"class\" ) ;"
        },
        {
            "Word": "hasAttribute",
            "WordID": "1",
            "SentID": 4165,
            "TokenID": "5",
            "Context": "if ( ! descriptor . hasAttribute ( \"interface\" ) ) {"
        },
        {
            "Word": "getAttribute",
            "WordID": "4",
            "SentID": 4168,
            "TokenID": "6",
            "Context": "interfaceNames . add ( descriptor . getAttribute ( \"interface\" ) ) ;"
        },
        {
            "Word": "getAttribute",
            "WordID": "5",
            "SentID": 4169,
            "TokenID": "8",
            "Context": "if ( \"REMOTE\" . equals ( descriptor . getAttribute ( \"type\" ) ) ) {"
        },
        {
            "Word": "getAttribute",
            "WordID": "6",
            "SentID": 4170,
            "TokenID": "5",
            "Context": "String url = descriptor . getAttribute ( \"url\" ) ;"
        },
        {
            "Word": "getAttribute",
            "WordID": "7",
            "SentID": 4174,
            "TokenID": "10",
            "Context": "String interfaceName = descriptor . getChild ( i ) . getAttribute ( \"name\" ) ;"
        },
        {
            "Word": "getAttribute",
            "WordID": "8",
            "SentID": 4188,
            "TokenID": "5",
            "Context": "InstanceScope instanceScope = descriptor . getAttribute ( \"scope\" , InstanceScope . class , InstanceScope . APPLICATION ) ;"
        },
        {
            "Word": "getAttribute",
            "WordID": "9",
            "SentID": 4192,
            "TokenID": "5",
            "Context": "InstanceType instanceType = descriptor . getAttribute ( \"type\" , InstanceType . class , InstanceType . POJO ) ;"
        },
        {
            "Word": "getAttribute",
            "WordID": "10",
            "SentID": 4196,
            "TokenID": "5",
            "Context": "String implementationURL = descriptor . getAttribute ( \"url\" ) ;"
        },
        {
            "Word": "getAttribute",
            "WordID": "11",
            "SentID": 4221,
            "TokenID": "5",
            "Context": "String fieldName = config . getAttribute ( \"name\" ) ;"
        },
        {
            "Word": "hasAttribute",
            "WordID": "2",
            "SentID": 4223,
            "TokenID": "5",
            "Context": "if ( ! config . hasAttribute ( \"value\" ) ) {"
        },
        {
            "Word": "getAttribute",
            "WordID": "12",
            "SentID": 4228,
            "TokenID": "5",
            "Context": "Object value = config . getAttribute ( \"value\" , field . getType ( ) ) ;"
        },
        {
            "Word": "getAttribute",
            "WordID": "13",
            "SentID": 4229,
            "TokenID": "10",
            "Context": "Classes . setFieldValue ( null , field , config . getAttribute ( \"value\" , field . getType ( ) ) ) ;"
        },
        {
            "Word": "hasAttribute",
            "WordID": "3",
            "SentID": 4458,
            "TokenID": "5",
            "Context": "if ( ! classDescriptor . hasAttribute ( \"interface\" ) ) {"
        },
        {
            "Word": "setAttribute",
            "WordID": "1",
            "SentID": 4459,
            "TokenID": "2",
            "Context": "classDescriptor . setAttribute ( \"interface\" , classDescriptor . getAttribute ( \"class\" ) ) ;"
        },
        {
            "Word": "getAttribute",
            "WordID": "14",
            "SentID": 4459,
            "TokenID": "8",
            "Context": "classDescriptor . setAttribute ( \"interface\" , classDescriptor . getAttribute ( \"class\" ) ) ;"
        },
        {
            "Word": "getAttribute",
            "WordID": "15",
            "SentID": 4460,
            "TokenID": "5",
            "Context": "String interfaceClass = classDescriptor . getAttribute ( \"interface\" ) ;"
        },
        {
            "Word": "hasAttribute",
            "WordID": "4",
            "SentID": 4462,
            "TokenID": "9",
            "Context": "if ( classDescriptors . get ( i ) . hasAttribute ( \"interface\" , interfaceClass ) ) {"
        },
        {
            "Word": "getAttribute",
            "WordID": "16",
            "SentID": 4531,
            "TokenID": "5",
            "Context": "String className = el . getAttribute ( \"class\" ) ;"
        },
        {
            "Word": "getAttribute",
            "WordID": "17",
            "SentID": 4534,
            "TokenID": "5",
            "Context": "String converterName = el . getAttribute ( \"converter\" ) ;"
        },
        {
            "Word": "getAttribute",
            "WordID": "18",
            "SentID": 4542,
            "TokenID": "5",
            "Context": "String pojoClassName = pojoClassElement . getAttribute ( \"class\" ) ;"
        },
        {
            "Word": "getAttribute",
            "WordID": "19",
            "SentID": 4549,
            "TokenID": "5",
            "Context": "String fieldName = staticElement . getAttribute ( \"name\" ) ;"
        },
        {
            "Word": "hasAttribute",
            "WordID": "5",
            "SentID": 4550,
            "TokenID": "5",
            "Context": "if ( ! staticElement . hasAttribute ( \"value\" ) ) {"
        },
        {
            "Word": "getAttribute",
            "WordID": "20",
            "SentID": 4554,
            "TokenID": "5",
            "Context": "Object value = staticElement . getAttribute ( \"value\" , staticField . getType ( ) ) ;"
        },
        {
            "Word": "getAttribute",
            "WordID": "21",
            "SentID": 4744,
            "TokenID": "11",
            "Context": "container = ( ContainerSPI ) config . getServletContext ( ) . getAttribute ( TinyContainer . ATTR_INSTANCE ) ;"
        },
        {
            "Labels": [
                "\"Attribute Manipulation Methods\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "getAttribute, Attribute",
            "Syntactic": "methods",
            "Semantic": "function calls, getters",
            "Description": "getter and setter methods for Attributes.",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ],
    "457": [
        {
            "Word": "HttpStatus",
            "WordID": "1",
            "SentID": 4354,
            "TokenID": "1",
            "Context": "case HttpStatus . SC_BAD_REQUEST :"
        },
        {
            "Word": "HttpStatus",
            "WordID": "2",
            "SentID": 4356,
            "TokenID": "1",
            "Context": "case HttpStatus . SC_UNAUTHORIZED :"
        },
        {
            "Word": "HttpStatus",
            "WordID": "3",
            "SentID": 4358,
            "TokenID": "1",
            "Context": "case HttpStatus . SC_FORBIDDEN :"
        },
        {
            "Word": "HttpStatus",
            "WordID": "4",
            "SentID": 4359,
            "TokenID": "1",
            "Context": "case HttpStatus . SC_NOT_FOUND :"
        },
        {
            "Word": "HttpStatus",
            "WordID": "5",
            "SentID": 4360,
            "TokenID": "1",
            "Context": "case HttpStatus . SC_GONE :"
        },
        {
            "Word": "HttpStatus",
            "WordID": "6",
            "SentID": 4362,
            "TokenID": "1",
            "Context": "case HttpStatus . SC_CONFLICT :"
        },
        {
            "Word": "HttpStatus",
            "WordID": "7",
            "SentID": 4364,
            "TokenID": "1",
            "Context": "case HttpStatus . SC_PRECONDITION_FAILED :"
        },
        {
            "Word": "HttpStatus",
            "WordID": "8",
            "SentID": 4365,
            "TokenID": "1",
            "Context": "case HttpStatus . SC_REQUESTED_RANGE_NOT_SATISFIABLE :"
        },
        {
            "Word": "HttpStatus",
            "WordID": "9",
            "SentID": 4366,
            "TokenID": "1",
            "Context": "case HttpStatus . SC_REQUEST_TIMEOUT :"
        },
        {
            "Labels": [
                "\"HTTP Status Management\""
            ],
            "Meaningful": "Yes",
            "Lexicographic": "HttpStatus",
            "Syntactic": "Object",
            "Semantic": "Network, Enum, Switch Statement",
            "Description": "Object named \"HttpStatus\" all being used in switch statement cases to access ENUMs",
            "Q1_Answer": "Acceptable",
            "Q2_Answer": "Precise",
            "Q3_Answer": "Superior",
            "Q4_Answer": "",
            "Q5_Answer": "Semantic",
            "Q6_Answer": "None"
        }
    ]
}